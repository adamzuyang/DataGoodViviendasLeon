{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Kelly_copy of VL_Classifier","provenance":[{"file_id":"1X5xIoITpHk1ay-bF49guSu98kVm_STlO","timestamp":1617402013620}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"t1jBkpjDT3NM"},"source":["\n","\n","\n","\n","# INTRODUCTION\n","\n","### Who are we? \n","\n","We are Berkeley undergraduates working with Viviendas Leon, a nonprofit dedicated to eliminating rural poverty in Nicaragua and Guatemala. \n","\n","`Team lead`: Elda Pere\n","\n","`Team members`: Lauren Faulds, Chase Elements, Barnett (Adam) Yang, Kathryn (Katie) Byers, Eva Sidlo, Kelly Trinh \n","\n","\n","### Questions to address: \n","Given location, soil, and weather data, which crops should a farmer plant that would be most resilient to disease?\n","\n","### Dataset description: \n","`Data source`: Viviendas Leon \n","\n","It contains information on crop disease percentage, crop conditions, and any recommendations made. We also scraped weather data, which includes dew point, temperature, percipitation data, and more, and append to our dataset. \n"," \n","### Objectives: \n","1. Clean the data to account for missing value, inconsistent names, translate Spanish to English, and scrap weather data to supplement the dataset. \n","2. Perform exploratory data analysis to find trends between crop type, effectiveness of recommendations, and geographical area, and disease percentage.\n","3. Create a scoring system that takes in past data and analyzes it to return the best performing crop based on past data.\n","4. Build a classifier to predict which crop is most disease-resilient given specific weather and geographical information. \n","\n","`Note`: The initial data cleaning step is left in the appendix below for brevity. The original data is in Spanish, therefore, some of the table showed below will be in Spanish.\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"7jpwSYoNFBi4"},"source":["### Import Libraries"]},{"cell_type":"code","metadata":{"id":"T52YEBZGPYYZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619761122332,"user_tz":420,"elapsed":2313,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"d79286cd-1851-4e59-fb50-47506c5cbf50"},"source":["import pandas as pd\n","import numpy as np\n","from google.colab import (drive, files)\n","from datetime import datetime, timedelta\n","import os\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder, MinMaxScaler\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer, SimpleImputer\n","from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\n","from sklearn.metrics import classification_report, roc_auc_score, roc_curve, accuracy_score, confusion_matrix, f1_score, precision_score, recall_score\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.metrics import make_scorer\n","from sklearn import metrics\n","from sklearn.model_selection import GridSearchCV\n","\n","from sklearn.multiclass import OneVsRestClassifier\n","from sklearn.svm import SVC\n","from sklearn import svm\n","\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import RepeatedStratifiedKFold\n","from sklearn.decomposition import PCA\n","\n","from xgboost import XGBClassifier\n","\n","from imblearn.over_sampling import SMOTE, ADASYN"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"vDXzDykw4xCj"},"source":["# 👀 Read Data\n","\n","`VL_farm_geo_w.csv` is the dataset that went through initial cleaning. \n","\n","Each row represents a visit from Viviendas Leon to a family. The row has information on the crop (condition, percent disease, type of crop, and weather conditions such as dew point, heat index, etc.\n","\n","\n","The data spans from 2017 to 2021. \n","\n"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"7yhTLQhxPadf","executionInfo":{"status":"ok","timestamp":1619761230548,"user_tz":420,"elapsed":365,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"3250de21-c49e-43a0-d547-3015acf1313a"},"source":["# connect to the drive\n","drive.mount('/content/gdrive')\n","path = \"/content/gdrive\"\n","chases_path = path + \"/MyDrive\"\n","kellys_path = path + \"/MyDrive/VL_Data/Farming_Data\"\n","os.chdir(kellys_path)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/gdrive; to attempt to forcibly remount, call drive.mount(\"/content/gdrive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Z9px53Us3mc6","colab":{"base_uri":"https://localhost:8080/","height":467},"executionInfo":{"status":"ok","timestamp":1619762516588,"user_tz":420,"elapsed":825,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"71532cc5-028a-4224-eae4-6cf9ed1486d8"},"source":["#df = pd.read_csv('/content/gdrive/MyDrive/VL_farm.csv') # read Kelly and Lauren's updated data\n","\n","df= pd.read_csv('VL_farm_geo_w.csv', index_col=0)\n","\n","\n","# translate Spanish to English\n","def season(month):\n","    if month == 12 or month == 1 or month == 2:\n","        return \"Winter\"\n","    elif month == 3 or month == 4 or month == 5:\n","        return \"Spring\"\n","    elif month == 6 or month == 7 or month == 8:\n","        return \"Summer\"\n","    elif month == 9 or month == 10 or month == 11:\n","        return \"Fall\"\n","df[\"Season visited\"] = df[\"Month visited\"].apply(season)\n","\n","\n","df['Condition'] = df['Condition'].replace(['Excel'], 'Excelente')\n","df['Condition'] = df['Condition'].replace(['Excelente'], \"excellent_cond\")\n","df['Condition'] = df['Condition'].replace(['Promedio'], 'average_cond')\n","df['Condition'] = df['Condition'].replace(['Bueno'], 'good_cond')\n","df['Condition'] = df['Condition'].replace(['Pobre'], 'poor_cond')\n","df['Condition'] = df['Condition'].replace(['crisopa'], 'bad?_cond')\n","\n","df['Condition'] = df['Condition'].replace([0], 'N/A_cond')\n","df['Seedling_or_transplanted'].unique()\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Almácigo'], 'seedling')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Transplantado'], 'transplanted')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Sin germinar'], 'transplanted')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Fructificacion'], 'fruitification')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Produccion'], 'production')\n","df\n","\n","#drop rows with unsual values \n","df = df[df.Condition != 'bad?_cond']\n","df = df[df['Seedling_or_transplanted'] != 'fruitification']\n","df = df[df['Seedling_or_transplanted'] != 'production']\n","\n","\n","# 'Bueno'== good, '0'== null, 'Promedio'==average, 'Excelente'==excellent, 'Pobre'==poor, 'Excel', 'crisopa'\n","\n","# preview of the data\n","hide_location = (df.columns != \"Region\") & (df.columns != \"Community\") & (df.columns != \"location\") & (df.columns != \"longitude\") & (df.columns !=\"latitude\")\n","df.loc[0:5, hide_location]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date visited</th>\n","      <th>Auditor</th>\n","      <th>Family visited</th>\n","      <th>Present?</th>\n","      <th>Crop</th>\n","      <th>Seedling_or_transplanted</th>\n","      <th>% Disease</th>\n","      <th>Condition</th>\n","      <th>Plague</th>\n","      <th>Organic recommendation</th>\n","      <th>Chemical recommendation</th>\n","      <th>Type</th>\n","      <th>Month visited</th>\n","      <th>Year visited</th>\n","      <th>apienter</th>\n","      <th>date_time</th>\n","      <th>maxtempC</th>\n","      <th>mintempC</th>\n","      <th>totalSnow_cm</th>\n","      <th>sunHour</th>\n","      <th>uvIndex</th>\n","      <th>moon_illumination</th>\n","      <th>moonrise</th>\n","      <th>moonset</th>\n","      <th>sunrise</th>\n","      <th>sunset</th>\n","      <th>DewPointC</th>\n","      <th>FeelsLikeC</th>\n","      <th>HeatIndexC</th>\n","      <th>WindChillC</th>\n","      <th>WindGustKmph</th>\n","      <th>cloudcover</th>\n","      <th>humidity</th>\n","      <th>precipMM</th>\n","      <th>pressure</th>\n","      <th>tempC</th>\n","      <th>visibility</th>\n","      <th>winddirDegree</th>\n","      <th>windspeedKmph</th>\n","      <th>Season visited</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>claudia flavia arévalo</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>ana catalina garcía millón</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>1</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.44%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Date visited        Auditor  ... windspeedKmph Season visited\n","0   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","1   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","2   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","3   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","4   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","5   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","\n","[6 rows x 40 columns]"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cy91R3oHZAjq","executionInfo":{"status":"ok","timestamp":1619762878438,"user_tz":420,"elapsed":1258,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"e3f8dd2b-eb23-4220-d06f-a0e1a1d1f4a7"},"source":["df.shape"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(6741, 48)"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"markdown","metadata":{"id":"2kVIXIApT2AH"},"source":["##### Data Preview\n","\n","Looking at ordinal variable Crop Condition and % Illness"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"YFOt8poXfWZG","executionInfo":{"status":"ok","timestamp":1619762523239,"user_tz":420,"elapsed":1205,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"6d63cd44-3c5f-4469-eb4a-15bd214492bb"},"source":["\n","# 0 = No entry \n","\n","df['Condition'].value_counts().plot(kind='bar')\n","plt.title(\"Overview of condition of all the crops\")\n","plt.ylabel(\"Count\")\n","plt.xlabel(\"Condition\");"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"E-xPxl5V1U-E","colab":{"base_uri":"https://localhost:8080/","height":350},"executionInfo":{"status":"ok","timestamp":1619762536122,"user_tz":420,"elapsed":1401,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"469128f7-9927-4996-f2f9-bde1eead2820"},"source":["plt.figure(figsize=(10,5))\n","\n","dsh = sns.lineplot(x=\"Month visited\", y=\"% Disease\"\n","             ,data=df)\n","plt.title(\"% Disease of all the crops in each month of a year\");"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":363},"id":"tNmqX6GRq-fZ","executionInfo":{"status":"ok","timestamp":1619762537772,"user_tz":420,"elapsed":446,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"c806b5bf-ec10-4e2c-efe1-a360004a7523"},"source":["plt.title(\"Count of types of crops\")\n","plt.xlabel(\"Crop type\")\n","plt.ylabel(\"Count\")\n","df['Type'].value_counts().plot(kind='bar');"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"DdZCfBc5rIfx","executionInfo":{"status":"ok","timestamp":1619762541789,"user_tz":420,"elapsed":936,"user":{"displayName":"Kelly Trinh","photoUrl":"","userId":"00787827113698171001"}},"outputId":"82721fcf-f9ed-44d0-c685-572017fa8d8c"},"source":["plt.figure(figsize=(15, 5))\n","plt.title(\"Count of each crop type\")\n","plt.xlabel(\"Specific crop\")\n","plt.ylabel(\"Count\")\n","ax = df['Crop'].value_counts().plot(kind='bar')\n","#ax.set_xticks(df['Crop'].value_counts().values)\n",";\n","print('Crops to predict: ' , df['Crop'].nunique())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Crops to predict:  42\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"BomMpv54W3Na"},"source":["# ⚙️ Feature Engineering\n","\n","This step determines which variables are not relevant for the model (using correlations, interview with staff, etc).\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ntbL7Vo2tleX"},"source":["### Add Additional Variables"]},{"cell_type":"code","metadata":{"id":"kARG1zdC2H-2"},"source":["# Combined Wellness metric using % Illness and Condition\n","\n","def condition_percentage (row):\n","   if row['Condition'] == 'excellent_cond' :\n","      return 1\n","   if row['Condition'] == 'good_cond' :\n","      return .90\n","   if row['Condition'] == 'average_cond':\n","      return .80\n","   if row['Condition']  == 'poor_cond':\n","      return .70\n","   if row['Condition'] == '0':\n","      return 1\n","   return .80\n","\n","def condition_wellness_columns(df):\n","    df['Percent_Condition'] = df.apply(lambda row: condition_percentage(row), axis=1)\n","    df['Percent_wellness'] = 100 - df['% Disease']\n","    df['Wellness_Condition'] = df['Percent_wellness'] * df['Percent_Condition']\n","    return df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"20nlxXb9Pu8Z"},"source":["df = condition_wellness_columns(df)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"lSsD-5qV6ouJ"},"source":["df['Crop'] = df['Crop'].replace(['Calabasa'], 'Calabaza')\n","df['Crop'] = df['Crop'].replace(['verengena', 'verenjena'], 'bad?_cond')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"wgHfmpdUzUtj","executionInfo":{"status":"ok","timestamp":1619755053025,"user_tz":420,"elapsed":322,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"1fb46d58-5c6a-4981-d987-f54406042004"},"source":["# For each crop, \n","df1 = df[['Region', 'Crop']]\n","df1.groupby(['Crop']).count()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","    </tr>\n","    <tr>\n","      <th>Crop</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Ayote</th>\n","      <td>331</td>\n","    </tr>\n","    <tr>\n","      <th>Calabaza</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Calala</th>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>Camote</th>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>Caña</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Caña de azucar</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Cebolla</th>\n","      <td>284</td>\n","    </tr>\n","    <tr>\n","      <th>Chile</th>\n","      <td>33</td>\n","    </tr>\n","    <tr>\n","      <th>Chile jalapeño</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Chile..</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Chiltoma</th>\n","      <td>1320</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol alacin</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol de vara</th>\n","      <td>662</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol rojo</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>Granadilla</th>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>Guayaba</th>\n","      <td>65</td>\n","    </tr>\n","    <tr>\n","      <th>Jamaica</th>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>Maiz</th>\n","      <td>276</td>\n","    </tr>\n","    <tr>\n","      <th>Melon</th>\n","      <td>161</td>\n","    </tr>\n","    <tr>\n","      <th>None</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Papaya</th>\n","      <td>670</td>\n","    </tr>\n","    <tr>\n","      <th>Pepino</th>\n","      <td>278</td>\n","    </tr>\n","    <tr>\n","      <th>Pina</th>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>Pipian</th>\n","      <td>343</td>\n","    </tr>\n","    <tr>\n","      <th>Plátano</th>\n","      <td>600</td>\n","    </tr>\n","    <tr>\n","      <th>Rabano</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>Remolacha</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>Repollo</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Rábano</th>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>Sandia</th>\n","      <td>208</td>\n","    </tr>\n","    <tr>\n","      <th>Sandia y melon</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Tomate</th>\n","      <td>775</td>\n","    </tr>\n","    <tr>\n","      <th>Trigo</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Verengena</th>\n","      <td>14</td>\n","    </tr>\n","    <tr>\n","      <th>Verenjena</th>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>Verngena</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Yuca</th>\n","      <td>461</td>\n","    </tr>\n","    <tr>\n","      <th>Zanahoria</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>bad?_cond</th>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>zanahoria</th>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Region\n","Crop                  \n","Ayote              331\n","Calabaza             2\n","Calala             100\n","Camote              28\n","Caña                 1\n","Caña de azucar       1\n","Cebolla            284\n","Chile               33\n","Chile jalapeño       1\n","Chile..              1\n","Chiltoma          1320\n","Frijol alacin        1\n","Frijol de vara     662\n","Frijol rojo          5\n","Granadilla          13\n","Guayaba             65\n","Jamaica             18\n","Maiz               276\n","Melon              161\n","None                 1\n","Papaya             670\n","Pepino             278\n","Pina                42\n","Pipian             343\n","Plátano            600\n","Rabano               4\n","Remolacha            4\n","Repollo              6\n","Rábano              15\n","Sandia             208\n","Sandia y melon       1\n","Tomate             775\n","Trigo                1\n","Verengena           14\n","Verenjena            7\n","Verngena             1\n","Yuca               461\n","Zanahoria            3\n","bad?_cond            3\n","zanahoria            1"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"rvg0Lcg4XhhU"},"source":["# drop crops with only 1 count\n","df1 = df1.drop(df1.index[[4173, 5141, 2249, 6539, 4317, 3817, 6403, 5476, 311, 6697, 3002, 2908, 4494]])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mgl81SS5pzCM"},"source":["# 💯 Scoring System\n","\n","We recognize that our machine learning model may not produce the best results, so we are deploying a scoring system to complement the model.\n","\n","Required files:\n","- `VL_farm_geo_w.csv`: A cleaned version of the raw Excel datasets\n","\n","Steps:\n","- Initialize a new scoring function with `score = init_score(df)`, where df is the `cleaned.csv` pandas dataframe\n","    - You can also set df to be any dataframe with the same column names, but you may have to change the default values for crops, regions, and communities when you call the score function.\n","- To create a new score object, call `result = score(region, community)`, where region and community are optional parameters\n","- To get rankings of n crops, call `result.get_best_composite(n)` to get list of crops with best composite scores (includes percent diseased, condition, region, and community scores (if applicable)), `result.get_best_region(n)` to get list of crops with best region scores (if region was specified in the above step), and `result.get_best_community(n)` to get list of crops with best community scores (if community was specified in the above step).\n","    - By default, n is the number of unique crops in the dataset\n","    - Highest scoring crops are listed first in the returned list\n","    \n","Function Descriptions:\n","- `get_best_composite`: Ranks crops using composite scores based on condition, percent diseased, region (if applicable), and community (if applicable). The ranking of each crop corresponds to its order in the returned array (i.e. best to worst order). Uses the dictionary `comp_scores` to inform its rankings (the higher the score, the better the crop's rank).\n","- `get_best_region`: Ranks crops using composite scores based on region (if applicable). The ranking of each crop corresponds to its order in the returned array. Uses the dictionaries `reg_cond_scores` (for conditions) and `reg_dis_scores` (for percent diseased) to inform its rankings.\n","- `get_best_community`: Ranks crops using composite scores based on community (if applicable). The ranking of each crop corresponds to its order in the returned array. Uses the dictionaries `com_cond_scores` (for conditions) and `com_dis_scores` (for percent diseased) to inform its rankings.\n","- `get_best_type_composite`: Ranks crop types (e.g. \"Veg\", \"Grians\", etc.) using composite scores based on condition, percent diseased, region (if applicable), and community (if applicable). The ranking of each crop type corresponds to its order in the returned array. Uses the dictionary `type_comp_scores` to inform its rankings (the higher the score, the better the crop type's rank).\n","- `get_best_type_region`: Ranks crop types using composite scores based on region (if applicable). The ranking of each crop type corresponds to its order in the returned array. Uses the dictionaries `type_reg_cond_scores` (for conditions) and `type_reg_dis_scores` (for percent diseased) to inform its rankings.\n","- `get_best_type_community`: Ranks crop types using composite scores based on community (if applicable). The ranking of each crop type corresponds to its order in the returned array. Uses the dictionaries `type_com_cond_scores` (for conditions) and `type_com_dis_scores` (for percent diseased) to inform its rankings."]},{"cell_type":"code","metadata":{"id":"w69dU-4U-iLW"},"source":["class ScoreResult:\n","    def __init__(\n","        self, \n","        comp_scores, \n","        cond_scores, \n","        per_dis_scores, \n","        reg_cond_scores, \n","        reg_per_dis_scores, \n","        com_cond_scores, \n","        com_per_dis_scores,\n","        type_comp_scores,\n","        type_cond_scores,\n","        type_per_dis_scores,\n","        type_reg_cond_scores,\n","        type_reg_per_dis_scores,\n","        type_com_cond_scores,\n","        type_com_per_dis_scores,\n","        crops,\n","        types\n","    ):\n","        self.comp_scores = comp_scores\n","        self.cond_scores = cond_scores\n","        self.per_dis_scores = per_dis_scores\n","        self.reg_cond_scores = reg_cond_scores\n","        self.reg_dis_scores = reg_per_dis_scores\n","        self.com_cond_scores = com_cond_scores\n","        self.com_dis_scores = com_per_dis_scores\n","        self.type_comp_scores = type_comp_scores\n","        self.type_cond_scores = type_cond_scores\n","        self.type_per_dis_scores = type_per_dis_scores\n","        self.type_reg_cond_scores = type_reg_cond_scores\n","        self.type_reg_dis_scores = type_reg_per_dis_scores\n","        self.type_com_cond_scores = type_com_cond_scores\n","        self.type_com_dis_scores = type_com_per_dis_scores\n","        self.crops = crops\n","        self.types = types\n","        \n","    def get_best_composite(self, n=None):\n","        if n == None:\n","            n = len(self.crops)\n","        crops = self.crops.copy()\n","        crops.sort(key=lambda x: -self.comp_scores[x])\n","        return crops[:n]\n","    \n","    def get_best_region(self, n=None):\n","        if n == None:\n","            n = len(self.crops)\n","        crops = self.crops.copy()\n","        crops.sort(key=lambda x: -(self.reg_cond_scores[x] + self.reg_dis_scores[x]))\n","        return crops[:n]\n","    \n","    def get_best_community(self, n=None):\n","        if n == None:\n","            n = len(self.crops)\n","        crops = self.crops.copy()\n","        crops.sort(key=lambda x: -(self.com_cond_scores[x] + self.com_dis_scores[x]))\n","        return crops[:n]\n","    \n","    def get_best_type_composite(self, n=None):\n","        if n == None:\n","            n = len(self.types)\n","        types = self.types.copy()\n","        types.sort(key=lambda x: -self.type_comp_scores[x])\n","        return types[:n]\n","    \n","    def get_best_type_region(self, n=None):\n","        if n == None:\n","            n = len(self.types)\n","        types = self.types.copy()\n","        types.sort(key=lambda x: -(self.type_reg_cond_scores[x] + self.type_reg_dis_scores[x]))\n","        return types[:n]\n","    \n","    def get_best_type_community(self, n=None):\n","        if n == None:\n","            n = len(self.types)\n","        types = self.types.copy()\n","        types.sort(key=lambda x: -(self.type_com_cond_scores[x] + self.type_com_dis_scores[x]))\n","        return types[:n]\n","        \n","def normalize(d, target=1.0):\n","    raw = sum(d.values())\n","    factor = target/raw\n","    return {key:value*factor for key,value in d.items()}\n","\n","def init_score(df,  \n","               crops=None, \n","               types=None, \n","               regions=None, \n","               communities=None, \n","               conds = None,\n","               cond_weights={\n","                   \"good_cond\": 1, \n","                   \"Bueno\" : 1,\n","                   \"excellent_cond\": 2, \n","                   \"Excelente\": 2,\n","                   \"Excel\": 2,\n","                   \"average_cond\": -1, \n","                   \"Promedio\": -1,\n","                   \"poor_cond\": -2, \n","                   \"Pobre\": -2,\n","                   \"crisopa\": -2,\n","                   0: 0, \n","                   '0': 0}):\n","    if crops == None:\n","        crops = list(df[\"Crop\"].unique())\n","    if regions == None:\n","        regions = list(df[\"Region\"].unique())\n","    if types == None:\n","        types = list(df[\"Type\"].unique())\n","    if communities == None:\n","        communities = list(df[\"Community\"].unique())\n","    if conds == None:\n","        conds = list(df[\"Condition\"].unique())\n","        \n","        \n","    def score(region=None, community=None):\n","        if region != None and region not in regions:\n","            raise ValueError(f\"region is not valid, valid inputs include: {', '.join(regions)}\")\n","        if community != None and community not in communities:\n","            raise ValueError(f\"community is not valid, valid inputs include: {', '.join(communities)}\")\n","        \n","        comp_scores = dict.fromkeys(crops, 0)\n","        cond_scores = dict.fromkeys(crops, 0)\n","        per_dis_scores = dict.fromkeys(crops, 0)\n","        \n","        reg_cond_scores = dict.fromkeys(crops, 0)\n","        reg_per_dis_scores = dict.fromkeys(crops, 0)\n","        \n","        com_cond_scores = dict.fromkeys(crops, 0)\n","        com_per_dis_scores = dict.fromkeys(crops, 0)\n","        \n","        for crop in crops:\n","            cond_total = 0\n","            n = 0\n","            crop_df = df[df[\"Crop\"] == crop]\n","            cond_counts = crop_df[\"Condition\"].value_counts().to_dict()\n","            for cond in conds:\n","                if cond in cond_counts:\n","                    cond_total += cond_counts[cond] * cond_weights[cond]\n","                    n += cond_counts[cond]\n","            if n == 0:\n","                cond_scores[crop] = 0\n","            else:\n","                cond_scores[crop] = cond_total / n\n","            per_dis_scores[crop] = 100 - crop_df[\"% Disease\"].mean()\n","        cond_scores = normalize(cond_scores)\n","        per_dis_scores = normalize(per_dis_scores)\n","        \n","        if region != None:\n","            region_df = df[df[\"Region\"] == region]\n","            for crop in crops:\n","                cond_total = 0\n","                n = 0\n","                crop_df = region_df[region_df[\"Crop\"] == crop]\n","                cond_counts = crop_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    reg_cond_scores[crop] = 0\n","                else:\n","                    reg_cond_scores[crop] = cond_total / n\n","                if isinstance(100 - crop_df[\"% Disease\"].mean(), np.float64):\n","                    reg_per_dis_scores[crop] = 100 - crop_df[\"% Disease\"].mean()\n","                else:\n","                    reg_per_dis_scores[crop] = 0\n","            reg_cond_scores = normalize(reg_cond_scores)\n","            reg_per_dis_scores = normalize(reg_per_dis_scores)\n","                \n","        if community != None:\n","            com_df = df[df[\"Community\"] == community]\n","            for crop in crops:\n","                cond_total = 0\n","                n = 0\n","                crop_df = com_df[com_df[\"Crop\"] == crop]\n","                cond_counts = crop_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    com_cond_scores[crop] = 0\n","                else:\n","                    com_cond_scores[crop] = cond_total / n\n","                if isinstance(100 - crop_df[\"% Disease\"].mean(), np.float64):\n","                    com_per_dis_scores[crop] = 100 - crop_df[\"% Disease\"].mean()\n","                else:\n","                    com_per_dis_scores[crop] = 0\n","            com_cond_scores = normalize(com_cond_scores)\n","            com_per_dis_scores = normalize(com_per_dis_scores)\n","        \n","        for crop in crops:\n","            comp_scores[crop] += cond_scores[crop] + per_dis_scores[crop]\n","            if region != None:\n","                comp_scores[crop] += reg_cond_scores[crop] + reg_per_dis_scores[crop]\n","            if community != None:\n","                comp_scores[crop] += com_cond_scores[crop] + com_per_dis_scores[crop]\n","        comp_scores = normalize(comp_scores)\n","        \n","        \n","        type_comp_scores = dict.fromkeys(types, 0)\n","        type_cond_scores = dict.fromkeys(types, 0)\n","        type_per_dis_scores = dict.fromkeys(types, 0)\n","        \n","        type_reg_cond_scores = dict.fromkeys(types, 0)\n","        type_reg_per_dis_scores = dict.fromkeys(types, 0)\n","        \n","        type_com_cond_scores = dict.fromkeys(types, 0)\n","        type_com_per_dis_scores = dict.fromkeys(types, 0)\n","        \n","        for _type in types:\n","            cond_total = 0\n","            n = 0\n","            type_df = df[df[\"Type\"] == _type]\n","            cond_counts = type_df[\"Condition\"].value_counts().to_dict()\n","            for cond in conds:\n","                if cond in cond_counts:\n","                    cond_total += cond_counts[cond] * cond_weights[cond]\n","                    n += cond_counts[cond]\n","            if n == 0:\n","                type_cond_scores[_type] = 0\n","            else:\n","                type_cond_scores[_type] = cond_total / n\n","            type_per_dis_scores[_type] = 100 - type_df[\"% Disease\"].mean()\n","        type_cond_scores = normalize(type_cond_scores)\n","        type_per_dis_scores = normalize(type_per_dis_scores)\n","        \n","        if region != None:\n","            region_df = df[df[\"Region\"] == region]\n","            for _type in types:\n","                cond_total = 0\n","                n = 0\n","                type_df = region_df[region_df[\"Type\"] == _type]\n","                cond_counts = type_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    type_reg_cond_scores[_type] = 0\n","                else:\n","                    type_reg_cond_scores[_type] = cond_total / n\n","                if isinstance(100 - type_df[\"% Disease\"].mean(), np.float64):\n","                    type_reg_per_dis_scores[_type] = 100 - type_df[\"% Disease\"].mean()\n","                else:\n","                    type_reg_per_dis_scores[_type] = 0\n","            type_reg_cond_scores = normalize(type_reg_cond_scores)\n","            type_reg_per_dis_scores = normalize(type_reg_per_dis_scores)\n","                \n","        if community != None:\n","            com_df = df[df[\"Community\"] == community]\n","            for _type in types:\n","                cond_total = 0\n","                n = 0\n","                type_df = com_df[com_df[\"Type\"] == _type]\n","                cond_counts = type_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    type_com_cond_scores[_type] = 0\n","                else:\n","                    type_com_cond_scores[_type] = cond_total / n\n","                if isinstance(100 - type_df[\"% Disease\"].mean(), np.float64):\n","                    type_com_per_dis_scores[_type] = 100 - type_df[\"% Disease\"].mean()\n","                else:\n","                    type_com_per_dis_scores[_type] = 0\n","            type_com_cond_scores = normalize(type_com_cond_scores)\n","            type_com_per_dis_scores = normalize(type_com_per_dis_scores)\n","        \n","        for _type in types:\n","            type_comp_scores[_type] += type_cond_scores[_type] + type_per_dis_scores[_type]\n","            if region != None:\n","                type_comp_scores[_type] += type_reg_cond_scores[_type] + type_reg_per_dis_scores[_type]\n","            if community != None:\n","                type_comp_scores[_type] += type_com_cond_scores[_type] + type_com_per_dis_scores[_type]\n","        type_comp_scores = normalize(type_comp_scores)\n","        \n","        return ScoreResult(\n","            comp_scores, \n","            cond_scores, \n","            per_dis_scores, \n","            reg_cond_scores, \n","            reg_per_dis_scores, \n","            com_cond_scores, \n","            com_per_dis_scores,\n","            type_comp_scores,\n","            type_cond_scores,\n","            type_per_dis_scores,\n","            type_reg_cond_scores,\n","            type_reg_per_dis_scores,\n","            type_com_cond_scores,\n","            type_com_per_dis_scores,\n","            crops,\n","            types\n","        )\n","    \n","    return score"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Jtkut-gJi8eF"},"source":["# 🔥 Modeling"]},{"cell_type":"markdown","metadata":{"id":"Z42-HgxgvhiT"},"source":["We are building a model that is predicting which general crop type should be planted. There are four general crop types: fruits, vegetables, legumes and seeds, and grasses. We call this the general crop model.\n","\n","\n","\n","**Dataset:**\n","* Features = percent disease, wellness condition (i.e a combination of percent disease and crop condition), weather conditions, and location. \n","* Y = the general crop type. \n","* Addressing imbalanced classes: the class legumes and seeds and class grasses are less represented in the dataset. Realistically, we want farmers to plant a variety of crops, so we want to avoid having the model favoring one type of crop over the other. Therefore, we implemented class balance weights. \n","\n","\n","**Model selection and evaluation**\n","* We are implementing a multi-class classification model. We will be choosing between XGBoost, random forest, one-vs-rest, logistic regression, k-nearest neighbors, and support vector machines. \n","* Criteria for a good model: We also wish for the farmers to plant a variety of crops, so we will choose the model that has the highest accuracy, and also recommend a good mix of crops.  \n","* We used AUC, precision, recall, F1 score, the confusion matrix, and 5-fold cross validation accuracy score to evaluate each of the models.\n","\n","**Hyperparameter tuning**\n","\n","We will use grid search to tune the parameters of the best model selected.\n","\n","Below are the code and results of the model selection and evaluation.\n"]},{"cell_type":"markdown","metadata":{"id":"foi-Fe5kzYv7"},"source":["### Pipeline for training, cross validation and test sets\n"]},{"cell_type":"code","metadata":{"id":"wG7_PErlMjsf","colab":{"base_uri":"https://localhost:8080/","height":117},"executionInfo":{"status":"ok","timestamp":1619755061618,"user_tz":420,"elapsed":435,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"74e03ca9-7c31-4d77-f572-a531f9138bac"},"source":["# Drop unneeded columns\n","drop_cols = [\"Date visited\", \"Auditor\", \"Family visited\", \"Present?\",\n","             \"apienter\", \"date_time\", \"Community\", \"Year visited\",\n","             \"moonrise\", \"moonset\", \"sunrise\", \"sunset\"]\n","df = df.drop(drop_cols, axis = 1)\n","\n","df.head(1)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","      <th>Crop</th>\n","      <th>Seedling_or_transplanted</th>\n","      <th>% Disease</th>\n","      <th>Condition</th>\n","      <th>Plague</th>\n","      <th>Organic recommendation</th>\n","      <th>Chemical recommendation</th>\n","      <th>Type</th>\n","      <th>Month visited</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>maxtempC</th>\n","      <th>mintempC</th>\n","      <th>totalSnow_cm</th>\n","      <th>sunHour</th>\n","      <th>uvIndex</th>\n","      <th>moon_illumination</th>\n","      <th>DewPointC</th>\n","      <th>FeelsLikeC</th>\n","      <th>HeatIndexC</th>\n","      <th>WindChillC</th>\n","      <th>WindGustKmph</th>\n","      <th>cloudcover</th>\n","      <th>humidity</th>\n","      <th>precipMM</th>\n","      <th>pressure</th>\n","      <th>tempC</th>\n","      <th>visibility</th>\n","      <th>winddirDegree</th>\n","      <th>windspeedKmph</th>\n","      <th>location</th>\n","      <th>Season visited</th>\n","      <th>Percent_Condition</th>\n","      <th>Percent_wellness</th>\n","      <th>Wellness_Condition</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Troilo</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>12.46</td>\n","      <td>-87.0</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.46%-87.0</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>97</td>\n","      <td>87.3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Region    Crop  ... Percent_wellness  Wellness_Condition\n","0  Troilo  Calala  ...               97                87.3\n","\n","[1 rows x 36 columns]"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"FxjlUhWgQkU8"},"source":["# One hot encoding\n","\n","# Questions for Elda:\n","# Multiple spellings of same crop name\n","# Should we drop \"Plague\"? Has 162 different unique values. 1-hot encode for now. Ask team as well\n","# Should we drop organic and chemical recommendations? Has a lot of 0 values. First pass: include them (1-hot encode)\n","# Keep \"Community\" or \"location\"? 1-hot encode either? Keep location (1-hot encode), drop \"Community\"\n","# Keep condition and percent diseased? Keep these.\n","\n","df = df.join(pd.get_dummies(df[\"Season visited\"], prefix=\"Season\"), how = 'outer')\n","df = df.join(pd.get_dummies(df[\"Condition\"], prefix=\"Condition\"), how = 'outer')\n","df = df.join(pd.get_dummies(df[\"Region\"], prefix=\"Region\"), how= 'outer')\n","# df = df.join(pd.get_dummies(df[\"Plague\"], prefix=\"Plague\"), how= 'outer')\n","df = df.join(pd.get_dummies(df[\"location\"], prefix=\"Location\"), how = \"outer\")\n","df = df.join(pd.get_dummies(df[\"Seedling_or_transplanted\"], prefix=\"Trans_or_seed\"), how = \"outer\")\n","# df = df.join(pd.get_dummies(df[\"Organic recommendation\"], prefix=\"Org_rec\"), how = \"outer\")\n","# df = df.join(pd.get_dummies(df[\"Chemical recommendation\"], prefix=\"Chem_rec\"), how = \"outer\")\n","\n","# Drop now one-hot encoded columns\n","# df = df.drop([\"Season visited\", \"Condition\", \"Region\", \"Plague\", \"location\", \"Seedling_or_transplanted\", \"Organic recommendation\", \"Chemical recommendation\"], axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4bwzwWJWSvtA"},"source":["# Split into training and testing sets and Oversample using SMOTE \n","y = df[[\"Crop\"]].copy()\n","X = df.drop([\"Crop\"], axis=1)\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"6DoeGasn_x6n"},"source":["### Evaluating Based on Quality"]},{"cell_type":"markdown","metadata":{"id":"GBJmfkkthdIp"},"source":["### Training the Model"]},{"cell_type":"markdown","metadata":{"id":"8t8rKu8SNdei"},"source":["Feature Columns Used Include:\n","Predictors of interest include:\n","  - Weather: `DewPointC`, `HeatIndexC`, `WindChillC`, `sunHour`\n","  - Season: `Season_Fall`, `Season_Spring`, `Season_Summer`, `Season_Winter`, `Month Visited`(?)\n","  - Location Based: `Region_Goyena`, `Region_Troilo`, Location binary?"]},{"cell_type":"code","metadata":{"id":"kExs0ROoB4hP"},"source":["predictors = df[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","target = df['Type']"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Zv0reYS1prAd"},"source":["from imblearn.over_sampling import RandomOverSampler \n","from sklearn.model_selection import KFold\n","from sklearn.utils import compute_class_weight\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"OpSTw1XcAQ6B","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619755078606,"user_tz":420,"elapsed":358,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"bc9bd0f0-dcd4-4787-f901-77da173bb042"},"source":["X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.2, shuffle=True)\n","\n","# data normalization using MinMaxScaler (standardscaler decreases accuracy due to nongaussian distribution)\n","norm = MinMaxScaler().fit(X_train)\n","X_train_norm = norm.transform(X_train)\n","X_test_norm = norm.transform(X_test)\n","\n","kf = KFold(n_splits=5, random_state=42)\n","\n","classes = np.unique(target)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"H28VT5yEsqKm"},"source":["### Evaluation"]},{"cell_type":"code","metadata":{"id":"F3iXbNMLRAIA"},"source":["#roc curves, confusion matrixes using cross validation and training sets"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"bUj7ogy6d6nw","executionInfo":{"status":"error","timestamp":1619755100383,"user_tz":420,"elapsed":16604,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"c3bf9f0e-dbfb-48d4-89b8-d92b45d8e8d5"},"source":["# Checking for America's Next Top Models\n","# cv_results = {}\n","# result_table = pd.DataFrame(columns=['classifiers', 'accuracy'])\n","\n","models = {'xgboost': XGBClassifier(random_state=42,),\n","        'logistic regression': LogisticRegression(solver=\"lbfgs\", random_state=42, multi_class=\"multinomial\"),\n","        'KNN': KNeighborsClassifier( n_neighbors=5),\n","        'decision tree': DecisionTreeClassifier(random_state=42),\n","        'random forest': RandomForestClassifier(random_state=42, n_estimators=100),\n","        'SVC': svm.SVC(random_state=42),\n","        'one vs rest': OneVsRestClassifier(SVC(random_state=42)) }\n","\n","for model in models.items():\n","  for train_ind, val_ind in kf.split(X_train_norm, y_train):\n","    X_tr, y_tr = X_train_norm[train_ind], y_train.iloc[train_ind]\n","    X_val, y_val = X_train_norm[val_ind], y_train.iloc[val_ind]\n","    #fit model in dictionary with values\n","    model[1].fit(X_tr, y_tr)\n","    #predict\n","    y_pred = model[1].predict(X_val)\n","\n","  #testing metrics\n","    precision = precision_score(y_val, y_pred, average='weighted')\n","    accuracy = accuracy_score(y_val, y_pred)\n","    f1 = f1_score(y_val, y_pred, average='weighted')\n","\n","    # cv_results[model[0]] = (accuracy)\n","    cm = confusion_matrix(y_val,y_pred)\n","\n","  #roc auc scores\n","  for each in classes:\n","      fpr, tpr, thresholds = roc_curve(y_val,  \n","                      model[1].predict_proba(X_val)[:,1], pos_label = each) \n","\n","      auroc = round(metrics.auc(fpr, tpr),2)\n","      print(each,'--AUC--->',auroc)\n","\n","  print(model[0], '\\n', 'accuracy score:', accuracy, '\\n', 'f1 score: ', f1, '\\n precision: ', precision)\n","  ax= plt.subplot()\n","  sns.heatmap(cm, annot=True, fmt='g', ax=ax, cmap='Blues');  #annot=True to annotate cells, ftm='g' to disable scientific notation\n","  # labels, title and ticks\n","  ax.set_xlabel('Predicted Labels');ax.set_ylabel('True Labels'); \n","  ax.set_title('Confusion Matrix'); \n","  ax.xaxis.set_ticklabels(['Fruit', 'Grains', 'Legumes', 'Veg']); ax.yaxis.set_ticklabels(['Fruit', 'Grains', 'Legumes', 'Veg']);\n","  plt.show()      \n","  print('\\n') \n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["Fruit --AUC---> 0.51\n","Grains --AUC---> 0.65\n","Legumes Seeds --AUC---> 0.5\n","Veg --AUC---> 0.46\n","xgboost \n"," accuracy score: 0.4387755102040816 \n"," f1 score:  0.3956221237747102 \n"," precision:  0.3893957847188048\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["Fruit --AUC---> 0.52\n","Grains --AUC---> 0.61\n","Legumes Seeds --AUC---> 0.55\n","Veg --AUC---> 0.43\n","logistic regression \n"," accuracy score: 0.4267161410018553 \n"," f1 score:  0.3794095403242365 \n"," precision:  0.34231427142785936\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n","\n","Fruit --AUC---> 0.5\n","Grains --AUC---> 0.55\n","Legumes Seeds --AUC---> 0.5\n","Veg --AUC---> 0.49\n","KNN \n"," accuracy score: 0.4109461966604824 \n"," f1 score:  0.39293574148592614 \n"," precision:  0.3947725072152926\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n","\n","Fruit --AUC---> 0.51\n","Grains --AUC---> 0.56\n","Legumes Seeds --AUC---> 0.49\n","Veg --AUC---> 0.48\n","decision tree \n"," accuracy score: 0.4007421150278293 \n"," f1 score:  0.38688143410546477 \n"," precision:  0.3925642126263092\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n","\n","Fruit --AUC---> 0.49\n","Grains --AUC---> 0.63\n","Legumes Seeds --AUC---> 0.48\n","Veg --AUC---> 0.49\n","random forest \n"," accuracy score: 0.4165120593692022 \n"," f1 score:  0.4021832098071839 \n"," precision:  0.39364563316762785\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-32-f63ed61efdf1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0meach\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m       fpr, tpr, thresholds = roc_curve(y_val,  \n\u001b[0;32m---> 33\u001b[0;31m                       model[1].predict_proba(X_val)[:,1], pos_label = each) \n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m       \u001b[0mauroc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mpredict_proba\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    634\u001b[0m         \u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m         \"\"\"\n\u001b[0;32m--> 636\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    637\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_predict_proba\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    638\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_check_proba\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    601\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprobability\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m             raise AttributeError(\"predict_proba is not available when \"\n\u001b[0m\u001b[1;32m    604\u001b[0m                                  \" probability=False\")\n\u001b[1;32m    605\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_impl\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'c_svc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'nu_svc'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: predict_proba is not available when  probability=False"]}]},{"cell_type":"markdown","metadata":{"id":"uZNH_VNnZx-t"},"source":["#### Model Comparison"]},{"cell_type":"code","metadata":{"id":"5GzOO-HYPiJC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619755145673,"user_tz":420,"elapsed":1231,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"6183d89a-b8d1-4467-caa0-43885baeb8c4"},"source":["# XGBoost\n","xgboost_model = XGBClassifier()\n","xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","y_pred = xgboost_model.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.47516679021497404"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"id":"h4SwswDjEvfN"},"source":["# XGBoost with tuned parameters\n","# {'gamma': 1, 'learn_rate': 0.1, 'max_depth': 3, 'subsample': 0.9}\n","tuned_xgboost_model = XGBClassifier(gamma=1, learn_rate=0.1, max_depth=3, subsample=0.9)\n","tuned_xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","y_pred = tuned_xgboost_model.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"QvM86XUHfZJn","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619755147936,"user_tz":420,"elapsed":391,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"2cdf7864-9b0a-45cc-f927-ca54534bcd76"},"source":["# K Nearest Neighbors\n","neighbors = KNeighborsClassifier(n_neighbors=5)\n","neighbors.fit(X_train, y_train.values.ravel())\n","\n","y_pred = neighbors.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.40400296515937734"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"id":"uZx3YnboST1R","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619755157447,"user_tz":420,"elapsed":317,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"916bbfa0-972e-4277-a638-6b46f12106c5"},"source":["# Decision Trees\n","DT_clf = DecisionTreeClassifier()\n","DT_clf.fit(X_train, y_train.values.ravel())\n","\n","y_pred = DT_clf.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.42772424017790955"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"id":"jXqmOORaXzB0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619755161933,"user_tz":420,"elapsed":2232,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"9d12e1ca-7e8c-46e9-9e8e-0dd0f6d5f642"},"source":["# Support Vector Classifier\n","SVC = svm.SVC()\n","SVC.fit(X_train, y_train)\n","\n","y_pred = SVC.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.45959970348406226"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"markdown","metadata":{"id":"nk8wbTJyEC05"},"source":["### Hyperparameter Tuning"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-566h5EdEcbT","executionInfo":{"status":"ok","timestamp":1619755170333,"user_tz":420,"elapsed":498,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"6edc0dc9-af77-4b06-9e3a-2f076313f644"},"source":["class_weight = compute_class_weight('balanced', classes, target)\n","print(class_weight)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.63355263 6.06205036 1.65707965 0.6048995 ]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ideO92htHovC","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619760262625,"user_tz":420,"elapsed":11618,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"e13f50dd-44fa-4240-937a-5b1491c6d57a"},"source":["# Finding the best parameters for XGBoost\n","def parameter_tune(clf, hyper_params):\n","    # Type of scoring used to compare parameter combinations\n","    acc_scorer = make_scorer(accuracy_score)\n","\n","    # Run the grid search\n","    grid_obj = GridSearchCV(clf, hyper_params, scoring=acc_scorer)\n","    grid_obj.fit(X_train, y_train)\n","    return grid_obj\n","\n","# Parameter combonations that the grid search will try\n","hyper_params = {'max_depth': [3, 4, 5],\n","                'learn_rate': [0.1, 0.09, 0.08, 0.07],\n","                'subsample': [0.8, 0.9, 1],\n","                'gamma': [0, 1, 5]}\n","# Find the best parameters with GridSearchCV\n","#grid_search_obj = parameter_tune(XGBClassifier(), hyper_params)\n","#grid_search_obj.cv_results_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'mean_fit_time': array([0.69356136, 1.34642015]),\n"," 'mean_score_time': array([0.01698923, 0.02862468]),\n"," 'mean_test_score': array([0.46624408, 0.46197675]),\n"," 'param_max_depth': masked_array(data=[3, 6],\n","              mask=[False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'params': [{'max_depth': 3}, {'max_depth': 6}],\n"," 'rank_test_score': array([1, 2], dtype=int32),\n"," 'split0_test_score': array([0.47173309, 0.47265987]),\n"," 'split1_test_score': array([0.47265987, 0.47265987]),\n"," 'split2_test_score': array([0.45640074, 0.44897959]),\n"," 'split3_test_score': array([0.48701299, 0.47309833]),\n"," 'split4_test_score': array([0.44341373, 0.44248609]),\n"," 'std_fit_time': array([0.01308868, 0.00598136]),\n"," 'std_score_time': array([0.00037956, 0.00046428]),\n"," 'std_test_score': array([0.01497168, 0.01342207])}"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"li4q50TOLbQx","executionInfo":{"status":"ok","timestamp":1619760278960,"user_tz":420,"elapsed":326,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"3423f843-ce96-48e2-f752-1986c7506b90"},"source":["# Make the results into a dataframe\n","#grid_search_df = pd.DataFrame(grid_search_obj.cv_results_)\n","#grid_search_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean_fit_time</th>\n","      <th>std_fit_time</th>\n","      <th>mean_score_time</th>\n","      <th>std_score_time</th>\n","      <th>param_max_depth</th>\n","      <th>params</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","      <th>split3_test_score</th>\n","      <th>split4_test_score</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.693561</td>\n","      <td>0.013089</td>\n","      <td>0.016989</td>\n","      <td>0.000380</td>\n","      <td>3</td>\n","      <td>{'max_depth': 3}</td>\n","      <td>0.471733</td>\n","      <td>0.47266</td>\n","      <td>0.456401</td>\n","      <td>0.487013</td>\n","      <td>0.443414</td>\n","      <td>0.466244</td>\n","      <td>0.014972</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.346420</td>\n","      <td>0.005981</td>\n","      <td>0.028625</td>\n","      <td>0.000464</td>\n","      <td>6</td>\n","      <td>{'max_depth': 6}</td>\n","      <td>0.472660</td>\n","      <td>0.47266</td>\n","      <td>0.448980</td>\n","      <td>0.473098</td>\n","      <td>0.442486</td>\n","      <td>0.461977</td>\n","      <td>0.013422</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   mean_fit_time  std_fit_time  ...  std_test_score  rank_test_score\n","0       0.693561      0.013089  ...        0.014972                1\n","1       1.346420      0.005981  ...        0.013422                2\n","\n","[2 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"C7f6V4sX8ztB"},"source":["# Print out the best parameters\n","#grid_search_obj.best_params_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fl6GKbFQ8yK8"},"source":["# Get the best estimator\n","#BEST_XG_CLF = grid_search_obj.best_estimator_\n","#BEST_XG_CLF"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wfIDcpUbOtOc","executionInfo":{"status":"ok","timestamp":1619760457093,"user_tz":420,"elapsed":1278,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"783bc9cd-2675-4660-952e-6acc1cced4b6"},"source":["# Print the classification_report of the best estimator\n","#BEST_XG_CLF.fit(X_train, y_train)\n","\n","#y_pred = BEST_XG_CLF.predict(X_test)\n","#accuracy_score(y_test, y_pred)\n","\n","#print(classification_report(y_test, y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["               precision    recall  f1-score   support\n","\n","        Fruit       0.46      0.58      0.51       519\n","       Grains       0.00      0.00      0.00        59\n","Legumes Seeds       0.18      0.01      0.02       206\n","          Veg       0.50      0.60      0.54       565\n","\n","     accuracy                           0.48      1349\n","    macro avg       0.28      0.30      0.27      1349\n"," weighted avg       0.41      0.48      0.43      1349\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"87sIVNlDrI_Q","executionInfo":{"status":"ok","timestamp":1619475956155,"user_tz":420,"elapsed":2173,"user":{"displayName":"Lauren Faulds","photoUrl":"","userId":"02845362770997815847"}},"outputId":"d782a61a-3c8c-4f25-d236-0fc4dde1d997"},"source":["# XGBoost with oversampled data\n","# over sampled train set\n","oversample = RandomOverSampler(random_state=42)\n","X_train_over, y_train_over = oversample.fit_resample(X_train_norm, y_train)\n","\n","\n","xgboost_model_o = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","                    colsample_bynode=1, colsample_bytree=1, gamma=0, learn_rate=0.2,\n","                    learning_rate=0.1, max_delta_step=0, max_depth=3,\n","                    min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n","                    nthread=None, objective='multi:softprob', random_state=42,\n","                    reg_alpha=0, reg_lambda=1, sample_rate=0.8,\n","                    seed=None, silent=None, subsample=1, verbosity=1)\n","xgboost_model_o.fit(X_train_over, y_train_over)\n","\n","y_pred = xgboost_model_o.predict(X_test_norm)\n","accuracy_score(y_test, y_pred)\n","\n","print(classification_report(y_test, y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["               precision    recall  f1-score   support\n","\n","        Fruit       0.47      0.21      0.29       550\n","       Grains       0.04      0.29      0.07        49\n","Legumes Seeds       0.25      0.46      0.32       206\n","          Veg       0.52      0.38      0.44       544\n","\n","     accuracy                           0.32      1349\n","    macro avg       0.32      0.33      0.28      1349\n"," weighted avg       0.44      0.32      0.35      1349\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"PcmrRSeN9D98"},"source":["predictors = df[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","targetc = df['Crop']\n","\n","X_trainc, X_testc, y_trainc, y_testc = train_test_split(predictors, targetc, test_size=0.2, shuffle=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gM7PC3Yu9Pqh","executionInfo":{"status":"ok","timestamp":1619487303221,"user_tz":420,"elapsed":10249,"user":{"displayName":"Lauren Faulds","photoUrl":"","userId":"02845362770997815847"}},"outputId":"f2457369-6cba-465a-b790-b6eeb414e8dd"},"source":["# Crops data \n","\n","xgboost_model = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","                    colsample_bynode=1, colsample_bytree=1, gamma=0, learn_rate=0.2,\n","                    learning_rate=0.1, max_delta_step=0, max_depth=3,\n","                    min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n","                    nthread=None, objective='multi:softprob', random_state=42,\n","                    reg_alpha=0, reg_lambda=1, sample_rate=0.8, scale_pos_weight=class_weight,\n","                    seed=None, silent=None, subsample=1, verbosity=1)\n","xgboost_model.fit(X_trainc, y_trainc)\n","\n","y_pred = xgboost_model.predict(X_testc)\n","accuracy_score(y_testc, y_pred)\n","\n","print(classification_report(y_testc, y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["                precision    recall  f1-score   support\n","\n","         Ayote       0.15      0.03      0.05        71\n","      Calabaza       0.00      0.00      0.00         1\n","        Calala       0.00      0.00      0.00        16\n","        Camote       0.00      0.00      0.00         4\n","       Cebolla       0.36      0.08      0.14        60\n","         Chile       0.00      0.00      0.00         3\n","      Chiltoma       0.26      0.71      0.38       269\n","Frijol de vara       0.18      0.09      0.12       129\n","   Frijol rojo       0.00      0.00      0.00         2\n","    Granadilla       0.00      0.00      0.00         4\n","       Guayaba       0.00      0.00      0.00        14\n","       Jamaica       0.00      0.00      0.00         2\n","          Maiz       0.00      0.00      0.00        53\n","         Melon       0.00      0.00      0.00        36\n","        Papaya       0.19      0.21      0.20       140\n","        Pepino       0.00      0.00      0.00        55\n","          Pina       0.00      0.00      0.00         9\n","        Pipian       0.23      0.04      0.07        71\n","       Plátano       0.25      0.35      0.30       124\n","     Remolacha       0.00      0.00      0.00         1\n","       Repollo       0.00      0.00      0.00         1\n","        Rábano       0.00      0.00      0.00         3\n","        Sandia       0.00      0.00      0.00        53\n","        Tomate       0.20      0.18      0.19       141\n","     Verengena       0.00      0.00      0.00         3\n","          Yuca       0.10      0.04      0.05        81\n","     Zanahoria       0.00      0.00      0.00         2\n","     verengena       0.00      0.00      0.00         1\n","\n","      accuracy                           0.23      1349\n","     macro avg       0.07      0.06      0.05      1349\n","  weighted avg       0.17      0.23      0.17      1349\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"RR050ACVfh07"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KE3PlV79U2m8"},"source":["## ➡️ Test set predictions"]},{"cell_type":"code","metadata":{"id":"cmRBUZkuTNAQ"},"source":["\n","\n","def show_preds(df, X, y, clf, occupations, duplicates=False):\n","    df = df.copy()\n","    df[\"pred\"] = [occupations[code] for code in clf.predict(X)]\n","    df[\"proba\"] = clf.predict_proba(X).max(axis=1)\n","    df[\"correct\"] = df[\"pred\"] == df[\"occupation\"]\n","    if not duplicates:\n","        df = df.drop_duplicates()\n","    acc = accuracy_score(df[\"occupation\"], df[\"pred\"])\n","    pred_df = df[[\"correct\", \"occupation\", \"pred\", \"proba\", \"jobtitle\", \"industry\"]]\n","    out = pred_df.style.apply(lambda row: [\n","        \"background: mediumspringgreen;\" if row[\"pred\"] is row[\"occupation\"] else \"background: tomato;\" for cell in row\n","    ], axis=1, subset=[\"occupation\", \"pred\"])\n","    print(\"Accuracy = {:.3f}\".format(acc))\n","    return out\n","\n","\n","def show_weights(model, features, classes, ax=None):\n","    has_plot = True\n","    if ax is None:\n","        _, ax = plt.subplots(1, 1)\n","        has_plot = False\n","    weights = np.hstack([clf.intercept_.reshape(-1, 1), clf.coef_]).T\n","    classes = [occupations[crop] for crop in clf.classes_]\n","    predictors = [\"intercept\"] + features\n","    class_labels = [\"\\n\".join(c.split(\" \")) for c in classes]\n","    sns.heatmap(weights, annot=True, fmt=\".3f\", cmap=\"RdBu\", ax=ax)\n","    ax.set_xticks(np.arange(len(classes)) + 0.5)\n","    ax.set_yticks(np.arange(len(predictors)) + 0.5)\n","    ax.set_xticklabels(class_labels, {\"rotation\": 0})\n","    ax.set_yticklabels(predictors, {\"rotation\": 0})\n","    ax.set_xlabel(\"Target Class\")\n","    ax.set_ylabel(\"Predictor Variable\")\n","    ax.set_title(\"Model Weights\")\n","    if not has_plot:\n","        plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"wi24W7gcSiau"},"source":["weights = np.hstack([clf.intercept_.reshape(-1, 1), clf.coef_]).T"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"uFRH429GAshT"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"dSbDddDO3Fg4","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"error","timestamp":1620323253684,"user_tz":420,"elapsed":5604,"user":{"displayName":"Katie Byers","photoUrl":"","userId":"01348501594108183293"}},"outputId":"eb796d39-2750-4b7a-e65f-ff788cc4d568"},"source":["import pickle\n","!pip install app\n","from flask import Flask, render_template,request\n","import pickle #Initialize the flask App\n","\n","app = Flask('crop_prediction')\n","model = pickle.load(open('Pickle_LR_Model.pkl','rb'))\n","\n","import numpy as np\n","from flask import Flask, request, jsonify, render_template\n","import pickle\n","\n","@app.route('/predict', methods=['POST'])\n","\n","def apicall():\n","    \"\"\"API Call\n","\n","    Pandas dataframe (sent as a payload) from API Call\n","    \"\"\"\n","    try:\n","        test_json = request.get_json()\n","        test = pd.read_json(test_json, orient='records')\n","\n","        #To resolve the issue of TypeError: Cannot compare types 'ndarray(dtype=int64)' and 'str'\n","        test['Dependents'] = [str(x) for x in list(test['Dependents'])]\n","\n","        #Getting the Loan_IDs separated out\n","        loan_ids = test['Loan_ID']\n","\n","    except Exception as e:\n","        raise e\n","\n","    clf = 'model_v1.pk'\n","\n","    if test.empty:\n","        return(bad_request())\n","    else:\n","        #Load the saved model\n","        print(\"Loading the model...\")\n","        loaded_model = None\n","        with open('./models/'+clf,'rb') as f:\n","            loaded_model = pickle.load(f)\n","\n","        print(\"The model has been loaded...doing predictions now...\")\n","        predictions = loaded_model.predict(test)\n","\n","        \"\"\"Add the predictions as Series to a new pandas dataframe\n","                                OR\n","           Depending on the use-case, the entire test data appended with the new files\n","        \"\"\"\n","        prediction_series = list(pd.Series(predictions))\n","\n","        final_predictions = pd.DataFrame(list(zip(loan_ids, prediction_series)))\n","\n","        \"\"\"We can be as creative in sending the responses.\n","           But we need to send the response codes as well.\n","        \"\"\"\n","        responses = jsonify(predictions=final_predictions.to_json(orient=\"records\"))\n","        responses.status_code = 200\n","\n","        return (responses)\n","# #default page of our web-app\n","# @app.route('/')\n","# def home():\n","#     return render_template('index.html')\n","\n","# #To use the predict button in our web-app\n","# @app.route('/predict',methods=['POST'])\n","\n","# def predict():\n","#     #For rendering results on HTML GUI\n","#     int_features = [float(x) for x in request.form.values()]\n","#     final_features = [np.array(int_features)]\n","#     prediction = model.predict(final_features)\n","#     output = round(prediction[0], 2) \n","#     return render_template('index.html', prediction_text='CO2    Emission of the vehicle is :{}'.format(output))\n","\n","\n","@app.route('/api',methods=['POST'])\n","def predict():\n","    # Get the data from the POST request.\n","    data = request.get_json(force=True)\n","    # Make prediction using model loaded from disk as per the data.\n","    prediction = model.predict([[np.array(data['exp'])]])\n","    # Take the first value of prediction\n","    output = prediction[0]\n","    return jsonify(output)\n","if __name__ == '__main__':\n","    app.run(port=53300, debug=True)\n","# predict()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Requirement already satisfied: app in /usr/local/lib/python3.7/dist-packages (0.0.1)\n"," * Serving Flask app \"crop_prediction\" (lazy loading)\n"," * Environment: production\n","\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n","\u001b[2m   Use a production WSGI server instead.\u001b[0m\n"," * Debug mode: on\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/base.py:318: UserWarning: Trying to unpickle estimator LogisticRegression from version 0.22.1 when using version 0.22.2.post1. This might lead to breaking code or invalid results. Use at your own risk.\n","  UserWarning)\n"," * Running on http://127.0.0.1:53300/ (Press CTRL+C to quit)\n"," * Restarting with stat\n"],"name":"stderr"},{"output_type":"error","ename":"SystemExit","evalue":"ignored","traceback":["An exception has occurred, use %tb to see the full traceback.\n","\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 1\n"]},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n","  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"6V9QrLAANm4s"},"source":["# function to take in model \n","\n","auc_values = {\"fruit\": 0.51, \"veg\": 0.46,\"legume_seed\": 0.65,\"grasses\": 0.5}\n","\n","def prediction_tool(model, data):\n","  '''Given data, output a model that''\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B1TbSETY6zvx","colab":{"base_uri":"https://localhost:8080/","height":286},"executionInfo":{"status":"error","timestamp":1619816333641,"user_tz":420,"elapsed":1515,"user":{"displayName":"Katie Byers","photoUrl":"","userId":"01348501594108183293"}},"outputId":"4ec10137-381e-4e10-ee45-99b89ae16c7e"},"source":["\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * Serving Flask app \"__main__\" (lazy loading)\n"," * Environment: production\n","\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n","\u001b[2m   Use a production WSGI server instead.\u001b[0m\n"," * Debug mode: on\n"],"name":"stdout"},{"output_type":"stream","text":[" * Running on http://127.0.0.1:53300/ (Press CTRL+C to quit)\n"," * Restarting with stat\n"],"name":"stderr"},{"output_type":"error","ename":"SystemExit","evalue":"ignored","traceback":["An exception has occurred, use %tb to see the full traceback.\n","\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 1\n"]},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n","  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"UpHnFJ2T98Iw","colab":{"base_uri":"https://localhost:8080/"},"outputId":"3b1c71c6-b729-41ac-cf24-734a930740c3"},"source":["\n","!pip install dash\n","import dash\n","import dash_core_components as dcc\n","import dash_html_components as html\n","from dash.dependencies import Input, Output\n","external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']\n","app = dash.Dash(__name__, external_stylesheets=external_stylesheets)\n","all_options = {\n","    'America': ['New York City', 'San Francisco', 'Cincinnati'],\n","    'Canada': [u'Montréal', 'Toronto', 'Ottawa']\n","}\n","app.layout = html.Div([\n","    dcc.RadioItems(\n","        id='countries-dropdown',\n","        options=[{'label': k, 'value': k} for k in all_options.keys()],\n","        value='America'\n","    ),\n","html.Hr(),\n","dcc.RadioItems(id='cities-dropdown'),\n","html.Hr(),\n","html.Div(id='display-selected-values')\n","])\n","@app.callback(\n","    dash.dependencies.Output('cities-dropdown', 'options'),\n","    [dash.dependencies.Input('countries-dropdown', 'value')])\n","def set_cities_options(selected_country):\n","    return [{'label': i, 'value': i} for i in all_options[selected_country]]\n","@app.callback(\n","    dash.dependencies.Output('cities-dropdown', 'value'),\n","    [dash.dependencies.Input('cities-dropdown', 'options')])\n","def set_cities_value(available_options):\n","    return available_options[0]['value']\n","@app.callback(\n","    dash.dependencies.Output('display-selected-values', 'children'),\n","    [dash.dependencies.Input('countries-dropdown', 'value'),\n","     dash.dependencies.Input('cities-dropdown', 'value')])\n","def set_display_children(selected_country, selected_city):\n","    return u'{} is a city in {}'.format(\n","        selected_city, selected_country,\n","    )\n","if __name__ == '__main__':\n","    app.run_server(debug=False)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting dash\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/d4/50/e7c2830168db186f84b7de2988543e974433a6cdb0a0b23d51c781e2b2ab/dash-1.20.0.tar.gz (77kB)\n","\u001b[K     |████████████████████████████████| 81kB 3.8MB/s \n","\u001b[?25hRequirement already satisfied: Flask>=1.0.4 in /usr/local/lib/python3.7/dist-packages (from dash) (1.1.2)\n","Collecting flask-compress\n","  Downloading https://files.pythonhosted.org/packages/c6/d5/69b13600230d24310b98a52da561113fc01a5c17acf77152761eef3e50f1/Flask_Compress-1.9.0-py3-none-any.whl\n","Requirement already satisfied: plotly in /usr/local/lib/python3.7/dist-packages (from dash) (4.4.1)\n","Collecting dash_renderer==1.9.1\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/5f/d3/d661a68b4ce71498d5c0c79617bce3d5fc884d4448c698f77c2247cd1b46/dash_renderer-1.9.1.tar.gz (1.0MB)\n","\u001b[K     |████████████████████████████████| 1.0MB 9.9MB/s \n","\u001b[?25hCollecting dash-core-components==1.16.0\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/f4/79/434e14d77dbf82b27f98df077936a424de254059d47152b0445b7116e97e/dash_core_components-1.16.0.tar.gz (3.5MB)\n","\u001b[K     |████████████████████████████████| 3.5MB 46.7MB/s \n","\u001b[?25hCollecting dash-html-components==1.1.3\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/8f/ca/7eeca4cae4e15cc6f7d0bc41a46368dd3fcdddc72aaa5bac61a8b92d541c/dash_html_components-1.1.3.tar.gz (82kB)\n","\u001b[K     |████████████████████████████████| 92kB 9.0MB/s \n","\u001b[?25hCollecting dash-table==4.11.3\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/97/f7/f4969a926f20a55d3e5970d01b85ff9ad510dba32de189e72dd8f4992740/dash_table-4.11.3.tar.gz (1.8MB)\n","\u001b[K     |████████████████████████████████| 1.8MB 35.3MB/s \n","\u001b[?25hRequirement already satisfied: future in /usr/local/lib/python3.7/dist-packages (from dash) (0.16.0)\n","Requirement already satisfied: itsdangerous>=0.24 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.0.4->dash) (1.1.0)\n","Requirement already satisfied: Werkzeug>=0.15 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.0.4->dash) (1.0.1)\n","Requirement already satisfied: Jinja2>=2.10.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.0.4->dash) (2.11.3)\n","Requirement already satisfied: click>=5.1 in /usr/local/lib/python3.7/dist-packages (from Flask>=1.0.4->dash) (7.1.2)\n","Collecting brotli\n","\u001b[?25l  Downloading https://files.pythonhosted.org/packages/15/ea/5bd575511b37bbd1c794606a0a621e6feff8e96b7dd007a86a5d218b2d94/Brotli-1.0.9-cp37-cp37m-manylinux1_x86_64.whl (357kB)\n","\u001b[K     |████████████████████████████████| 358kB 42.6MB/s \n","\u001b[?25hRequirement already satisfied: six in /usr/local/lib/python3.7/dist-packages (from plotly->dash) (1.15.0)\n","Requirement already satisfied: retrying>=1.3.3 in /usr/local/lib/python3.7/dist-packages (from plotly->dash) (1.3.3)\n","Requirement already satisfied: MarkupSafe>=0.23 in /usr/local/lib/python3.7/dist-packages (from Jinja2>=2.10.1->Flask>=1.0.4->dash) (1.1.1)\n","Building wheels for collected packages: dash, dash-renderer, dash-core-components, dash-html-components, dash-table\n","  Building wheel for dash (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for dash: filename=dash-1.20.0-cp37-none-any.whl size=85834 sha256=d3b39e9e786cf31102b93fab8eaaba58054391c341d98d431f0409288976625f\n","  Stored in directory: /root/.cache/pip/wheels/e6/33/41/ce361d0d1da277d2350f815b10f2ab1e331592d93ef2b07e29\n","  Building wheel for dash-renderer (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for dash-renderer: filename=dash_renderer-1.9.1-cp37-none-any.whl size=1014875 sha256=23ecc466b28ffc91e4b690673ea2f4f7762d28b48277e9fce1f94f3fa838a43c\n","  Stored in directory: /root/.cache/pip/wheels/03/a9/c5/dd5815c601b0ede164c223ffd7bafebde716ca57de06ef8aec\n","  Building wheel for dash-core-components (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for dash-core-components: filename=dash_core_components-1.16.0-cp37-none-any.whl size=3540993 sha256=5d65afd195845dc76e2094a7250ebcf70ee4f3dd66678324342ba5e37303fcb8\n","  Stored in directory: /root/.cache/pip/wheels/86/1e/8c/e87ebba30b73c20dcd641224274febc983af88ed0fd7712a07\n","  Building wheel for dash-html-components (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for dash-html-components: filename=dash_html_components-1.1.3-cp37-none-any.whl size=319471 sha256=75e89a76e720f9906357d52907b9c808d587421f13c64fd2e1944ac897ce684b\n","  Stored in directory: /root/.cache/pip/wheels/07/f9/6c/f9b73a6ae1b7f347a92dc240293cebc267b370ba2a80added2\n","  Building wheel for dash-table (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for dash-table: filename=dash_table-4.11.3-cp37-none-any.whl size=1827619 sha256=c7678587c4f251a77f392b049f9de78cf2a3632776034a22a0f5bf6599866aea\n","  Stored in directory: /root/.cache/pip/wheels/51/9b/89/374be1bc250e28a15edbd657cf364f163e392ba5257bfd0e87\n","Successfully built dash dash-renderer dash-core-components dash-html-components dash-table\n","Installing collected packages: brotli, flask-compress, dash-renderer, dash-core-components, dash-html-components, dash-table, dash\n","Successfully installed brotli-1.0.9 dash-1.20.0 dash-core-components-1.16.0 dash-html-components-1.1.3 dash-renderer-1.9.1 dash-table-4.11.3 flask-compress-1.9.0\n","Dash is running on http://127.0.0.1:8050/\n","\n"," * Serving Flask app \"__main__\" (lazy loading)\n"," * Environment: production\n","\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n","\u001b[2m   Use a production WSGI server instead.\u001b[0m\n"," * Debug mode: off\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"Hfi28J_ofmGu"},"source":["#### Prediction Visualizations"]},{"cell_type":"code","metadata":{"id":"iHVDqC9OflQ0"},"source":["###"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"OeWVeyT0CobY"},"source":["### Appendix\n","\n","### Read the Data\n","\n","Files used for this Classifier:\n","\n","- vl_2017to19.xlsx *from farming data folder* : Viviendas Leon visit data 2017 - 2019. Combine with vl_2019to20.xlsx for full dataset\n","\n","- vl_2019to20.xlsxz *from farming data folder* : Viviendas Leon visit data 2019 - 2020\n","\n","- 210304_Full Participant List Farming Program 2017-2021.xlsx *from farming data folder* : List of corrected family names.\n","\n","- vl_historical_data.csv *from geo data folder*: 2017 - 2021 Weather Data for GPS locations to 2 decimal precision \n","\n","- family_coordinates_api.csv *located in geo data golder* : List of VL family names and api coordinates. Mergess Viviendas Leon visit data with historical weather data\n","\n","#### Initial data cleaning \n","\n","We produced a cleaned version of the data titled `VL_farm_geo_w.csv`.\n","Below is a description of the initial data cleaning steps we took. \n","\n","The data we received from Viviendas Leon (VL) originally consisted of these files:\n","\n","1) corrected names of farmers VL worked with\n","\n","2) farming data 2017 - 2021 of the farmers \n","\n","3) coordinates of the families\n","\n","We further scraped weather information to add to our analysis. \n","\n","1) replaced all the family names with corrected names\n","\n","2) translated Spanish (the original language of the data) into English\n","\n","3) merged the farming data with weather and geocoordinate data\n","\n","Below are useful functions we used for data cleaning, and the code of our data cleaning.\n","\n"]},{"cell_type":"markdown","metadata":{"id":"1M6upY_2g5i4"},"source":["### Read the Data\n","\n","Files used for this Classifier:\n","\n","- vl_2017to19.xlsx *from farming data folder* : Viviendas Leon visit data 2017 - 2019. Combine with vl_2019to20.xlsx for full dataset\n","\n","- vl_2019to20.xlsxz *from farming data folder* : Viviendas Leon visit data 2019 - 2020\n","\n","- 210304_Full Participant List Farming Program 2017-2021.xlsx *from farming data folder* : List of corrected family names.\n","\n","- vl_historical_data.csv *from geo data folder*: 2017 - 2021 Weather Data for GPS locations to 2 decimal precision \n","\n","- family_coordinates_api.csv *located in geo data golder* : List of VL family names and api coordinates. Mergess Viviendas Leon visit data with historical weather data\n"]},{"cell_type":"markdown","metadata":{"id":"h2yibCb6Ew3U"},"source":["## ✏️ Data Preparation\n","\n","Leads: Lauren & Kelly"]},{"cell_type":"code","metadata":{"id":"O7amnEYwD4KN"},"source":["# Load farming data, weather data, geo data\n","\n","# dropped last three rows (just empty)\n","correct_names = pd.read_excel(\"210304_Full Participant List Farming Program 2017-2021.xlsx\").drop([51,52,53], axis=0)\n","correct_names.columns = correct_names.loc[0,:]\n","correct_names = correct_names.drop([0], axis=0)\n","\n","# load data\n","data_17_19 = pd.read_excel(\"VL Huertos Familiares- Hoja de Datos (2017-2019).xlsx\")\n","data_19_20 = pd.read_excel(\"VL Huertos Familiares- Hoja de Datos (2019-2020).xlsx\")\n","\n","# Lauren\n","historic_w = pd.read_csv('w_historic.csv')\n","families_coordinates = pd.read_csv('family_coordinates_api.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ON92OKtRECKe"},"source":["def combined_farming(dataframe1, dataframe2):\n","  # Kelly\n","  #drop empty column\n","  dataframe1 = dataframe1.drop(\"Unnamed: 10\", axis=1)\n","\n","  '''Translate Spanish column names into English'''\n","\n","  translated_cols = ['Date visited','Auditor','Region','Community','Family visited','Present?',\n","                      'Fruit','Fruit_Condition (seedling or transplanted)', 'Fruit_% Disease','Fruit_Condition',\n","                      'Fruit_Plague','Fruit_Organic recommendation','Fruit_Chemical recommendation',\n","                      'Vegetables','Veg_Condition (seedling or transplanted)','Veg_% Disease','Veg_Condition',\n","                      'Veg_Plague','Veg_Organic recommendation','Veg_Chemical recommendation',\n","                      'Legumes and seeds','LnS_Condition (seedling or transplanted)','LnS_% Disease',\n","                      'LnS_Condition','LnS_Plague','LnS_Organic recommendation','LnS_Chemical recommendation',\n","                      'Grasses','Grasses_Condition (seedling or transplanted)','Grasses_% Disease',\n","                      'Grasses_Condition','Grasses_Plague','Grasses_Organic recommendation',\n","                      'Grasses_Chemical recommendation',\n","                      'Commentaries, additional remarks','Response, commentary follow up']\n","  # rename columns \n","  dataframe1.columns = translated_cols\n","  dataframe2.columns = translated_cols\n","\n","  # drop first 3 rows (headings of table names)\n","  dataframe1 = dataframe1.drop([0, 1, 2], axis=0) \n","  dataframe2 = dataframe2.drop([0, 1, 2], axis=0)\n","\n","  # appending 2019-2020 to the bottom of 2017-2019 data\n","  combined_data = dataframe1.append(dataframe2)\n","\n","  return combined_data\n","\n","def clean_farming(combined_data):\n","\n","  '''Preliminary cleaning for consistent data entry, correct names, and structuring\n","  data so that each row is one observation for one crop.'''\n","\n","    # fill NaN with 0s\n","    combined_data = combined_data.fillna(0)\n","\n","\n","    # further cleaning\n","    combined_data[\"Month visited\"] = combined_data[\"Date visited\"].dt.month\n","    combined_data[\"Year visited\"] = combined_data[\"Date visited\"].dt.year\n","    combined_data[\"Veg_% Disease\"] = combined_data[\"Veg_% Disease\"].replace(['35 %', ';4', ' '], [35, 4, 0])\n","    combined_data[\"Fruit\"] = combined_data[\"Fruit\"].replace(['Piña', 'piña'], 'Pina')\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace(\"Pipián\", \"Pipian\")\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace(\"I\", \"None\")\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace([\"Frijol Rojo\", \"Frijoles rojo\"], \"Frijol rojo\")\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace([\"Frijoles blanco\", \"Frijol blanco\"])\n","\n","    # replace with corrected names\n","    combined_data = combined_data.replace(correct_names.iloc[:,3].values, correct_names.iloc[:,4].values)\n","\n","    # structure data so that one row is one observation \n","    overall_info = combined_data.iloc[:,:6]\n","    fruit = combined_data.iloc[:,6:13]\n","    veg = combined_data.iloc[:,13:20]\n","    lns = combined_data.iloc[:,20:27]\n","    grasses = combined_data.iloc[:,27:34]\n","\n","    # keeping a column for crop type\n","    fruit['Type'] = 'Fruit'\n","    veg['Type'] = 'Veg'\n","    lns['Type'] = 'Legumes Seeds'\n","    grasses['Type'] = 'Grains'\n","\n","    crops = [fruit, veg, lns, grasses]\n","    crops_0 = []\n","    new_col_names = ['Date visited','Auditor','Region','Community','Family visited','Present?',\n","                          'Crop','Seedling_or_transplanted', '% Disease','Condition',\n","                          'Plague','Organic recommendation','Chemical recommendation', 'Type']\n","\n","    for table in crops:\n","      temp = pd.concat([overall_info, table], axis=1)\n","      temp.columns = new_col_names\n","      crops_0.append(temp)\n","\n","    final = crops_0[0]\n","    for table in crops_0[1:]:\n","      final = pd.concat([final, table], axis=0)\n","\n","    # Lauren\n","    # Removing empties\n","    final = final[final['Crop']!=0]\n","\n","    # Cleaning names column\n","\n","    final['Family visited'] = final['Family visited'].str.lower()\n","\n","    final = final.replace(\n","        ['arelis', 'arelis  solis', 'arelis solis',\n","          'arelis soliz', 'areliz solis', 'arlelis solis'], 'arelis solis')\n","\n","    final = final.replace(\n","        ['freddy', 'freddy lanza', 'freddy lanzas',\n","          'freddy lasza', 'freddys campo', 'fredi ', 'fredis ',\n","          'fredis lanza', 'fredy lanzas', 'fredys'], 'freddy lanza')\n","\n","    final = final.replace(\n","        ['helen espinoza', 'hellen', 'hellen espinoza', ], 'hellen espinoza')\n","\n","    final = final.replace(\n","        ['johana', 'johana  salgado','johana salgado', 'johanna salgado', 'yohana salgado'], 'johana salgado')\n","\n","    final = final.replace(\n","        ['juan sandobal', 'juan sandoval'], 'juan sandoval')\n","\n","    final = final.replace(\n","        ['maria jose', 'maria jose roque',\n","          'maria jose roque ', 'mariajose roque', ',maria jose roque', ], 'maria jose roque')\n","\n","    final = final.replace(\n","        ['marvin toval', 'marvin toval padilla'], 'marvin toval padilla')\n","\n","    final = final.replace(\n","        ['naideling', 'naideling vargas', 'naidelyn', 'naidelyn vargas', 'naidelyng', 'naidelyng ', 'naidelyng vargas', 'naydelin', 'naydelin varga', 'naydeling', 'naydeling varga', 'naydeling vargas', 'nayeling varga’, ‘neilyng', 'ávila vargas'\n","    ], 'naydeling vargas')\n","\n","    final = final.replace(\n","        ['nayeli roque','nayelis  roque', 'nayelis roque', 'nayelis roqur', 'nerlyn roque',\n","    ], 'nayelis roque')\n","\n","    final = final.replace(\n","        ['nerligh hernandez', 'nerling henandez', 'nerling hernandez',\n","          'nerlyn hernandez', 'nerlynh hernandez',], 'nerling hernandez')\n","\n","    final = final.replace(\n","        ['rayson membreño', 'reison membreño', 'reison membreńo',\n","          'reysom membreño', 'reyson membrecho', 'reyson membreño',\n","          'reyson membreńo', 'reyson menbreño'], 'reysom membreño')\n","\n","    final = final.replace(\n","        ['yader  morales', 'yader morales', 'yader morales ',\n","          'yadermorales', ], 'yader morales')\n","\n","    final[\"Month visited\"] = final[\"Date visited\"].dt.month\n","    final[\"Year visited\"] = final[\"Date visited\"].dt.year      \n","    return final\n","\n","\n","def clean_gps(families_coordinates):\n","    '''Making families_coordinates names identical to VL farming names'''\n","\n","    families_coordinates['Name'] = families_coordinates['Name'].str[8:].str.lower()\n","\n","    families_coordinates['Name'] = families_coordinates['Name'].str.replace('\\s{2,}', ' ')\n","    families_coordinates = families_coordinates.replace(\n","        ['rebeca sequeira'], 'rebeca carolina sequeira morales')\n","    families_coordinates = families_coordinates.replace(\n","        ['fátima castillo'], 'maría de fátima castillo')\n","    families_coordinates = families_coordinates.replace(\n","        ['yojhana cristina flores'], 'johana cristina altamirano flores')\n","    families_coordinates = families_coordinates.replace(\n","        ['karla galeano'], 'karla galiano martínez')\n","    families_coordinates = families_coordinates.replace(\n","        ['rita arevalo'], 'rita arévalo mora')\n","    families_coordinates = families_coordinates.replace(\n","        ['cristina alvares'], 'cristina alvares solís')\n","    families_coordinates = families_coordinates.replace(\n","        ['claudia arevalo'], 'claudia flavia arévalo')\n","    families_coordinates = families_coordinates.replace(\n","        ['silvia elena  moran'], 'silvia elena moran')\n","    families_coordinates = families_coordinates.replace(\n","        ['cristina avendaño'], 'maria cristina avendaño')\n","    families_coordinates = families_coordinates.replace(\n","        ['melania jacaba quiroz'], 'melania jocoba quiroz')\n","    families_coordinates = families_coordinates.replace(\n","        ['daisy ramirez'], 'maria deisy ramirez')\n","    families_coordinates = families_coordinates.replace(\n","        ['maria eugenia morales'], 'maría eugenia morales')\n","    families_coordinates = families_coordinates.replace(\n","        ['ana catalina millón'], 'ana catalina garcía millón')\n","    families_coordinates = families_coordinates.replace(\n","        ['oralia ramimez'], 'oralia ramirez')\n","    families_coordinates = families_coordinates.replace(\n","        ['roosvelt donaire'], 'roosevelt donaire')\n","\n","    return families_coordinates\n","\n","def merged_unified(farming, families_coordinates, historic_w):\n","    '''\n","    takes farming dataset, family_coordinates, historic weather\n","    '''\n","\n","    # Merge geolocation on family names\n","    geo_farm = pd.merge(farming, families_coordinates[['Name', 'apienter', 'latitude', 'longitude']], \n","                                  how=\"left\", left_on=\"Family visited\", \n","                                  right_on=\"Name\").drop(columns=['Name'])\n","\n","    # For missing locations, average longitude 12.46 and avg latitude: -86.96 are imputed                               \n","    geo_farm['apienter'].fillna('12.46%-86.96', inplace=True)\n","\n","    \n","    historic_w['date_time'] = pd.to_datetime(historic_w.date_time)\n","\n","    # Merge weather on geolocation\n","    final = pd.merge(geo_farm, historic_w,\n","                        how=\"left\", left_on=[\"Date visited\", \"apienter\"],\n","                        right_on=[\"date_time\", \"location\"])\n","    \n","    # Last column addition\n","    final[\"Month visited\"] = final[\"Date visited\"].dt.month\n","    final[\"Year visited\"] = final[\"Date visited\"].dt.year\n","    \n","    return final"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kg3APq1iETVU"},"source":["# this cell runs all the defined functions to clean the data\n","\n","combined_data = combined_farming(data_17_19,data_19_20)\n","combined_data = clean_farming(combined_data)\n","families_coordinates = clean_gps(families_coordinates)\n","\n","# Check Farming Dataset names against Correct Name List\n","# extra_names = [name for name in final[\"Family visited\"].unique() if name not in correct_names.iloc[:,3].unique()]\n","# extra_names.sort()\n","\n","# Check Family Coordinates names against Farming Dataset names\n","# [name for name in families_coordinates[\"Name\"].unique() if name not in final[\"Family visited\"].unique()]\n","\n","final = merged_unified(combined_data, families_coordinates, historic_w)\n","# Write to CSV\n","# final.to_csv('VL_farm_geo_w.csv')\n","# final.to_csv(\"/content/drive/MyDrive/VL_farm.csv\")\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"vDHgBBZ-EjQP"},"source":["# now that our data cleaning is finished, we export to a CSV file! \n","\n","final.to_csv('VL_farm_geo_w.csv')\n","final.head(1)"],"execution_count":null,"outputs":[]}]}