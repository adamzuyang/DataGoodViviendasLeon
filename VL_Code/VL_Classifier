{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"VL_Classifier","provenance":[{"file_id":"1X5xIoITpHk1ay-bF49guSu98kVm_STlO","timestamp":1617402013620}],"collapsed_sections":[]},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"t1jBkpjDT3NM"},"source":["# 👋 Introduction\n","\n","### Who are we? \n","\n","We are Berkeley undergraduates working with Viviendas Leon, a nonprofit dedicated to eliminating rural poverty in Nicaragua and Guatemala. \n","\n","`Team lead`: Elda Pere\n","\n","`Team members`: Lauren Faulds, Chase Elements, Barnett (Adam) Yang, Kathryn (Katie) Byers, Eva Sidlo, Kelly Trinh \n","\n","\n","### Questions to address: \n","Given location, soil, and weather data, which crops should a farmer plant that would be most resilient to disease?\n","\n","### Dataset description: \n","`Data source`: Viviendas Leon \n","\n","It contains information on crop disease percentage, crop conditions, and any recommendations made. We also scraped weather data, which includes dew point, temperature, percipitation data, and more, and append to our dataset. \n"," \n","### Objectives: \n","1. Clean the data to account for missing value, inconsistent names, translate Spanish to English, and scrap weather data to supplement the dataset. \n","\n","2. Perform exploratory data analysis to find trends between crop type, effectiveness of recommendations, and geographical area, and disease percentage.\n","\n","3. Build a predictor with the following parameters:\n","- Input: soil, temperature, and weather condition\n","- Output: top 3 specific crops and the best general type of crops that are best for the given. This model works with 4 general crop types: `fruits`, `vegetables`, `legumes & seeds`, and `grasses`. Specific crops example are papayas, tomatoes, onions, etc. \n","\n","We will build a scoring system and a machine learning model. **Note: both the scoring system and the machine learning model with rank the specific crops and assign each of the crops a score based on how suitable it is for the given weather conditions. From this rank and score, we will extract out the top 3 specific crops and the general type of crop.** Our goal is to combine the predictions of the scoring system and the machine learning model.\n","\n","The use case of this model will be for Viviendas Leon to input their own real time data and the predictor will output the above predictions. These predictions will help the organization come up with better recommendations to farmers that the organization works with. \n","\n","### Outline of this notebook:\n","1. Brief data cleaning  \n","2. Scoring system \n","3. Machine learning model\n","4. Predictor function that combines the scoring system and machine learning model to create the predict mentioned in objective number 3. \n","5. Appendix \n","\n","  (sections are not placed in the order they are executed)\n","\n","  5.1 Machine learning model selection \n","\n","  5.2 Hyperparameter tuning\n","\n","  5.3 Data processing \n","\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"7jpwSYoNFBi4"},"source":["### Import Libraries"]},{"cell_type":"code","metadata":{"id":"T52YEBZGPYYZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621357766014,"user_tz":420,"elapsed":2090,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"2828b3d1-ff20-4684-e5cf-ec73d248bf03"},"source":["\n","predict_probaimport pandas as pd\n","import numpy as np\n","from google.colab import (drive, files)\n","from datetime import datetime, timedelta\n","import os\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.decomposition import PCA\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.impute import IterativeImputer, SimpleImputer\n","from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\n","from sklearn.metrics import classification_report, roc_auc_score, roc_curve, accuracy_score, confusion_matrix, f1_score, precision_score, recall_score, make_scorer\n","from sklearn.model_selection import train_test_split, KFold, GridSearchCV, RepeatedStratifiedKFold, cross_val_score\n","from sklearn.multiclass import OneVsRestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder, MinMaxScaler\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.svm import SVC\n","from sklearn.utils import compute_class_weight, compute_sample_weight\n","from xgboost import XGBClassifier\n","from imblearn.over_sampling import SMOTE, ADASYN, RandomOverSampler \n","from collections import defaultdict\n","from sklearn import metrics\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"markdown","metadata":{"id":"vDXzDykw4xCj"},"source":["### 👀 Read Data\n","\n","`VL_farm_geo_w.csv` is the dataset that went through initial cleaning. \n","\n","Each row represents a visit from Viviendas Leon to a family. The row has information on the crop (condition, percent disease, type of crop, and weather conditions such as dew point, heat index, etc.\n","\n","\n","The data spans from 2017 to 2021. \n","\n"]},{"cell_type":"code","metadata":{"id":"7yhTLQhxPadf","colab":{"base_uri":"https://localhost:8080/","height":429},"executionInfo":{"status":"error","timestamp":1621212153899,"user_tz":420,"elapsed":3001,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"70c7cf26-b9a8-43f8-dfe8-b73d7f13e603"},"source":["# connect to the drive\n","drive.mount('/content/gdrive')\n","path = \"/content/gdrive\"\n","chases_path = path + \"/MyDrive\"\n","kellys_path = path + \"/MyDrive/VL_Data/Farming_Data\"\n","os.chdir(chases_path)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.activity.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fexperimentsandconfigs%20https%3a%2f%2fwww.googleapis.com%2fauth%2fphotos.native&response_type=code\n","\n","Enter your authorization code:\n","\n"],"name":"stdout"},{"output_type":"error","ename":"ValueError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)","\u001b[0;32m<ipython-input-8-fe9e3c40a546>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# connect to the drive\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 2\u001b[0;31m \u001b[0mdrive\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmount\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'/content/gdrive'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      3\u001b[0m \u001b[0mpath\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m\"/content/gdrive\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mchases_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpath\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"/MyDrive\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mkellys_path\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpath\u001b[0m \u001b[0;34m+\u001b[0m \u001b[0;34m\"/MyDrive/VL_Data/Farming_Data\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/google/colab/drive.py\u001b[0m in \u001b[0;36mmount\u001b[0;34m(mountpoint, force_remount, timeout_ms, use_metadata_server)\u001b[0m\n\u001b[1;32m    261\u001b[0m       \u001b[0mwrote_to_fifo\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mcase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 263\u001b[0;31m       \u001b[0;32mraise\u001b[0m \u001b[0mValueError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'mount failed: invalid oauth code'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    264\u001b[0m     \u001b[0;32melif\u001b[0m \u001b[0mcase\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m6\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m       \u001b[0;31m# Terminate the DriveFS binary before killing bash.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mValueError\u001b[0m: mount failed: invalid oauth code"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":485},"id":"Z9px53Us3mc6","executionInfo":{"status":"ok","timestamp":1621358452430,"user_tz":420,"elapsed":870,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"d0b00eef-629d-4bfd-980c-712639c92336"},"source":["#df = pd.read_csv('/content/gdrive/MyDrive/VL_farm.csv') # read Kelly and Lauren's updated data\n","\n","df= pd.read_csv('VL_farm_geo_w.csv', index_col=0)\n","\n","\n","# translate Spanish to English\n","def season(month):\n","    if month == 12 or month == 1 or month == 2:\n","        return \"Winter\"\n","    elif month == 3 or month == 4 or month == 5:\n","        return \"Spring\"\n","    elif month == 6 or month == 7 or month == 8:\n","        return \"Summer\"\n","    elif month == 9 or month == 10 or month == 11:\n","        return \"Fall\"\n","df[\"Season visited\"] = df[\"Month visited\"].apply(season)\n","\n","# 'Bueno'== good, '0'== null, 'Promedio'==average, 'Excelente'==excellent, 'Pobre'==poor, 'Excel', 'crisopa'\n","df['Condition'] = df['Condition'].replace(['Excel'], 'Excelente')\n","df['Condition'] = df['Condition'].replace(['Excelente'], \"excellent_cond\")\n","df['Condition'] = df['Condition'].replace(['Promedio'], 'average_cond')\n","df['Condition'] = df['Condition'].replace(['Bueno'], 'good_cond')\n","df['Condition'] = df['Condition'].replace(['Pobre'], 'poor_cond')\n","df['Condition'] = df['Condition'].replace(['crisopa'], 'bad?_cond')\n","\n","df['Condition'] = df['Condition'].replace([0], 'N/A_cond')\n","df['Seedling_or_transplanted'].unique()\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Almácigo'], 'seedling')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Transplantado'], 'transplanted')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Sin germinar'], 'transplanted')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Fructificacion'], 'fruitification')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Produccion'], 'production')\n","df\n","\n","#drop rows with unsual values \n","df = df[df.Condition != 'bad?_cond']\n","df = df[df['Seedling_or_transplanted'] != 'fruitification']\n","df = df[df['Seedling_or_transplanted'] != 'production']\n","\n","# Correct some crop spellings\n","df['Crop'] = df['Crop'].replace(['Calabasa'], 'Calabaza')\n","df['Crop'] = df['Crop'].replace(['Caña'], 'Caña de azucar')\n","df['Crop'] = df['Crop'].replace(['Verngena', 'Verenjena', 'verenjena', 'verengena'], 'Verengena')\n","df['Crop'] = df['Crop'].replace(['Rabano'], 'Rábano')\n","df['Crop'] = df['Crop'].replace(['zanahoria'], 'Zanahoria')\n","\n","# preview of the data\n","print('Data Shape', df.shape)\n","hide_location = (df.columns != \"Region\") & (df.columns != \"Community\") & (df.columns != \"location\") & (df.columns != \"longitude\") & (df.columns !=\"latitude\")\n","df.loc[0:5, hide_location]"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Data Shape (6741, 45)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date visited</th>\n","      <th>Auditor</th>\n","      <th>Family visited</th>\n","      <th>Present?</th>\n","      <th>Crop</th>\n","      <th>Seedling_or_transplanted</th>\n","      <th>% Disease</th>\n","      <th>Condition</th>\n","      <th>Plague</th>\n","      <th>Organic recommendation</th>\n","      <th>Chemical recommendation</th>\n","      <th>Type</th>\n","      <th>Month visited</th>\n","      <th>Year visited</th>\n","      <th>apienter</th>\n","      <th>date_time</th>\n","      <th>maxtempC</th>\n","      <th>mintempC</th>\n","      <th>totalSnow_cm</th>\n","      <th>sunHour</th>\n","      <th>uvIndex</th>\n","      <th>moon_illumination</th>\n","      <th>moonrise</th>\n","      <th>moonset</th>\n","      <th>sunrise</th>\n","      <th>sunset</th>\n","      <th>DewPointC</th>\n","      <th>FeelsLikeC</th>\n","      <th>HeatIndexC</th>\n","      <th>WindChillC</th>\n","      <th>WindGustKmph</th>\n","      <th>cloudcover</th>\n","      <th>humidity</th>\n","      <th>precipMM</th>\n","      <th>pressure</th>\n","      <th>tempC</th>\n","      <th>visibility</th>\n","      <th>winddirDegree</th>\n","      <th>windspeedKmph</th>\n","      <th>Season visited</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>claudia flavia arévalo</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>ana catalina garcía millón</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>1</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.44%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>Fall</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Date visited        Auditor  ... windspeedKmph Season visited\n","0   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","1   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","2   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","3   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","4   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","5   2017-11-06  Lesbia/Camilo  ...             5           Fall\n","\n","[6 rows x 40 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"markdown","metadata":{"id":"2kVIXIApT2AH"},"source":["### Data Preview\n","\n","Looking at ordinal variable Crop Condition and % Illness"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"YFOt8poXfWZG","executionInfo":{"status":"ok","timestamp":1621358453999,"user_tz":420,"elapsed":1395,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"e0357862-6f79-469c-f617-d423759dec92"},"source":["# 0 = No entry \n","df['Condition'].value_counts().plot(kind='bar')\n","plt.title(\"Overview of condition of all the crops\")\n","plt.ylabel(\"Count\")\n","plt.xlabel(\"Condition\");"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":349},"id":"E-xPxl5V1U-E","executionInfo":{"status":"ok","timestamp":1621358455164,"user_tz":420,"elapsed":1781,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"748c16ba-55f4-47d3-f696-b7f418751469"},"source":["plt.figure(figsize=(10,5))\n","\n","dsh = sns.lineplot(x=\"Month visited\", y=\"% Disease\"\n","             ,data=df)\n","plt.title(\"% Disease of all the crops in each month of a year\");"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":364},"id":"tNmqX6GRq-fZ","executionInfo":{"status":"ok","timestamp":1621358455653,"user_tz":420,"elapsed":1387,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"3cfae262-3ca6-4337-e439-7e682d661998"},"source":["plt.title(\"Count of types of crops\")\n","plt.xlabel(\"Crop type\")\n","plt.ylabel(\"Count\")\n","df['Type'].value_counts().plot(kind='bar');"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":433},"id":"DdZCfBc5rIfx","executionInfo":{"status":"ok","timestamp":1621358456374,"user_tz":420,"elapsed":1385,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"9563366e-d1d8-48fb-fc75-e35c914a8611"},"source":["plt.figure(figsize=(15, 5))\n","plt.title(\"Count of each crop type\")\n","plt.xlabel(\"Specific crop\")\n","plt.ylabel(\"Count\")\n","ax = df['Crop'].value_counts().plot(kind='bar')\n","#ax.set_xticks(df['Crop'].value_counts().values)\n",";\n","print('Crops to predict: ' , df['Crop'].nunique())"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Crops to predict:  34\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 1080x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"BomMpv54W3Na"},"source":["# ⚙️ Feature Engineering\n","\n","This step determines which variables are not relevant for the model (using correlations, interview with staff, etc).\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"ntbL7Vo2tleX"},"source":["### Add Additional Variables"]},{"cell_type":"code","metadata":{"id":"kARG1zdC2H-2"},"source":["# Combined Wellness metric using % Illness and Condition\n","\n","def condition_percentage (row):\n","   if row['Condition'] == 'excellent_cond' :\n","      return 1\n","   if row['Condition'] == 'good_cond' :\n","      return .90\n","   if row['Condition'] == 'average_cond':\n","      return .80\n","   if row['Condition']  == 'poor_cond':\n","      return .70\n","   if row['Condition'] == '0':\n","      return 1\n","   return .80\n","\n","def condition_wellness_columns(df):\n","    df['Percent_Condition'] = df.apply(lambda row: condition_percentage(row), axis=1)\n","    df['Percent_wellness'] = 100 - df['% Disease']\n","    df['Wellness_Condition'] = df['Percent_wellness'] * df['Percent_Condition']\n","    return df"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"20nlxXb9Pu8Z","colab":{"base_uri":"https://localhost:8080/","height":689},"executionInfo":{"status":"ok","timestamp":1621358460168,"user_tz":420,"elapsed":1048,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"d90e0c55-3107-4904-9bee-aede75eac0f6"},"source":["df = condition_wellness_columns(df)\n","\n","\n","# One hot encoding\n","df = df.join(pd.get_dummies(df[\"Season visited\"], prefix=\"Season\"), how = 'outer')\n","df = df.join(pd.get_dummies(df[\"Condition\"], prefix=\"Condition\"), how = 'outer')\n","df = df.join(pd.get_dummies(df[\"Region\"], prefix=\"Region\"), how= 'outer')\n","df = df.join(pd.get_dummies(df[\"location\"], prefix=\"Location\"), how = \"outer\")\n","df = df.join(pd.get_dummies(df[\"Seedling_or_transplanted\"], prefix=\"Trans_or_seed\"), how = \"outer\")\n","\n","# Drop now one-hot encoded columns\n","# df = df.drop([\"Season visited\", \"Condition\", \"Region\", \"Plague\", \"location\", \"Seedling_or_transplanted\", \"Organic recommendation\", \"Chemical recommendation\"], axis = 1)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date visited</th>\n","      <th>Auditor</th>\n","      <th>Region</th>\n","      <th>Community</th>\n","      <th>Family visited</th>\n","      <th>Present?</th>\n","      <th>Crop</th>\n","      <th>Seedling_or_transplanted</th>\n","      <th>% Disease</th>\n","      <th>Condition</th>\n","      <th>Plague</th>\n","      <th>Organic recommendation</th>\n","      <th>Chemical recommendation</th>\n","      <th>Type</th>\n","      <th>Month visited</th>\n","      <th>Year visited</th>\n","      <th>apienter</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>date_time</th>\n","      <th>maxtempC</th>\n","      <th>mintempC</th>\n","      <th>totalSnow_cm</th>\n","      <th>sunHour</th>\n","      <th>uvIndex</th>\n","      <th>moon_illumination</th>\n","      <th>moonrise</th>\n","      <th>moonset</th>\n","      <th>sunrise</th>\n","      <th>sunset</th>\n","      <th>DewPointC</th>\n","      <th>FeelsLikeC</th>\n","      <th>HeatIndexC</th>\n","      <th>WindChillC</th>\n","      <th>WindGustKmph</th>\n","      <th>cloudcover</th>\n","      <th>humidity</th>\n","      <th>precipMM</th>\n","      <th>pressure</th>\n","      <th>tempC</th>\n","      <th>visibility</th>\n","      <th>winddirDegree</th>\n","      <th>windspeedKmph</th>\n","      <th>location</th>\n","      <th>Season visited</th>\n","      <th>Percent_Condition</th>\n","      <th>Percent_wellness</th>\n","      <th>Wellness_Condition</th>\n","      <th>Season_Fall</th>\n","      <th>Season_Spring</th>\n","      <th>Season_Summer</th>\n","      <th>Season_Winter</th>\n","      <th>Condition_0</th>\n","      <th>Condition_average_cond</th>\n","      <th>Condition_excellent_cond</th>\n","      <th>Condition_good_cond</th>\n","      <th>Condition_poor_cond</th>\n","      <th>Region_0</th>\n","      <th>Region_Goyena</th>\n","      <th>Region_Troilo</th>\n","      <th>Location_12.44%-86.94</th>\n","      <th>Location_12.44%-86.98</th>\n","      <th>Location_12.44%-87.0</th>\n","      <th>Location_12.45%-86.95</th>\n","      <th>Location_12.45%-86.99</th>\n","      <th>Location_12.45%-87.0</th>\n","      <th>Location_12.46%-86.95</th>\n","      <th>Location_12.46%-86.96</th>\n","      <th>Location_12.46%-87.0</th>\n","      <th>Location_12.47%-86.95</th>\n","      <th>Location_12.48%-86.95</th>\n","      <th>Location_12.48%-86.96</th>\n","      <th>Trans_or_seed_0</th>\n","      <th>Trans_or_seed_7.082352941</th>\n","      <th>Trans_or_seed_seedling</th>\n","      <th>Trans_or_seed_transplanted</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>12.46</td>\n","      <td>-87.00</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.46%-87.0</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>97</td>\n","      <td>87.3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>12.46</td>\n","      <td>-87.00</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.46%-87.0</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>98</td>\n","      <td>88.2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>claudia flavia arévalo</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>12.45</td>\n","      <td>-87.00</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>97</td>\n","      <td>87.3</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>12.45</td>\n","      <td>-87.00</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>98</td>\n","      <td>88.2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Fruit</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>12.45</td>\n","      <td>-87.00</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>98</td>\n","      <td>88.2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6742</th>\n","      <td>2020-10-13</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Goyena</td>\n","      <td>Aristides Sanchez</td>\n","      <td>roosevelt donaire</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>excellent_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Grains</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.48%-86.95</td>\n","      <td>12.48</td>\n","      <td>-86.95</td>\n","      <td>2020-10-13</td>\n","      <td>31</td>\n","      <td>24</td>\n","      <td>0.0</td>\n","      <td>8.8</td>\n","      <td>6</td>\n","      <td>16</td>\n","      <td>02:28 AM</td>\n","      <td>03:20 PM</td>\n","      <td>05:38 AM</td>\n","      <td>05:30 PM</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>10</td>\n","      <td>41</td>\n","      <td>86</td>\n","      <td>23.7</td>\n","      <td>1010</td>\n","      <td>31</td>\n","      <td>8</td>\n","      <td>203</td>\n","      <td>6</td>\n","      <td>12.48%-86.95</td>\n","      <td>Fall</td>\n","      <td>1.0</td>\n","      <td>100</td>\n","      <td>100.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6743</th>\n","      <td>2020-10-15</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Troilo</td>\n","      <td>arelis solis</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>excellent_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Grains</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.46%-86.96</td>\n","      <td>NaN</td>\n","      <td>NaN</td>\n","      <td>2020-10-15</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>10.2</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>04:26 AM</td>\n","      <td>04:55 PM</td>\n","      <td>05:38 AM</td>\n","      <td>05:29 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>8</td>\n","      <td>48</td>\n","      <td>85</td>\n","      <td>11.9</td>\n","      <td>1009</td>\n","      <td>30</td>\n","      <td>9</td>\n","      <td>91</td>\n","      <td>5</td>\n","      <td>12.46%-86.96</td>\n","      <td>Fall</td>\n","      <td>1.0</td>\n","      <td>100</td>\n","      <td>100.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6744</th>\n","      <td>2020-10-19</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>excellent_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Grains</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.46%-87.0</td>\n","      <td>12.46</td>\n","      <td>-87.00</td>\n","      <td>2020-10-19</td>\n","      <td>30</td>\n","      <td>24</td>\n","      <td>0.0</td>\n","      <td>7.4</td>\n","      <td>6</td>\n","      <td>13</td>\n","      <td>08:30 AM</td>\n","      <td>08:18 PM</td>\n","      <td>05:39 AM</td>\n","      <td>05:27 PM</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>71</td>\n","      <td>87</td>\n","      <td>12.8</td>\n","      <td>1009</td>\n","      <td>30</td>\n","      <td>9</td>\n","      <td>137</td>\n","      <td>5</td>\n","      <td>12.46%-87.0</td>\n","      <td>Fall</td>\n","      <td>1.0</td>\n","      <td>100</td>\n","      <td>100.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6745</th>\n","      <td>2020-10-20</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Goyena</td>\n","      <td>Aristides Sanchez</td>\n","      <td>roosevelt donaire</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>Deafania</td>\n","      <td>Hojas de chile</td>\n","      <td>0</td>\n","      <td>Grains</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.48%-86.95</td>\n","      <td>12.48</td>\n","      <td>-86.95</td>\n","      <td>2020-10-20</td>\n","      <td>27</td>\n","      <td>24</td>\n","      <td>0.0</td>\n","      <td>5.9</td>\n","      <td>6</td>\n","      <td>20</td>\n","      <td>09:33 AM</td>\n","      <td>09:16 PM</td>\n","      <td>05:39 AM</td>\n","      <td>05:27 PM</td>\n","      <td>23</td>\n","      <td>27</td>\n","      <td>27</td>\n","      <td>25</td>\n","      <td>6</td>\n","      <td>73</td>\n","      <td>91</td>\n","      <td>19.1</td>\n","      <td>1009</td>\n","      <td>27</td>\n","      <td>9</td>\n","      <td>187</td>\n","      <td>4</td>\n","      <td>12.48%-86.95</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>98</td>\n","      <td>88.2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>6746</th>\n","      <td>2020-11-24</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Goyena</td>\n","      <td>Aristides Sanchez</td>\n","      <td>roosevelt donaire</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>Grains</td>\n","      <td>11</td>\n","      <td>2020</td>\n","      <td>12.48%-86.95</td>\n","      <td>12.48</td>\n","      <td>-86.95</td>\n","      <td>2020-11-24</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>10.2</td>\n","      <td>6</td>\n","      <td>62</td>\n","      <td>01:52 PM</td>\n","      <td>01:21 AM</td>\n","      <td>05:50 AM</td>\n","      <td>05:19 PM</td>\n","      <td>23</td>\n","      <td>29</td>\n","      <td>29</td>\n","      <td>26</td>\n","      <td>8</td>\n","      <td>55</td>\n","      <td>87</td>\n","      <td>6.8</td>\n","      <td>1012</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>89</td>\n","      <td>5</td>\n","      <td>12.48%-86.95</td>\n","      <td>Fall</td>\n","      <td>0.9</td>\n","      <td>100</td>\n","      <td>90.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6741 rows × 76 columns</p>\n","</div>"],"text/plain":["     Date visited  ... Trans_or_seed_transplanted\n","0      2017-11-06  ...                          1\n","1      2017-11-06  ...                          1\n","2      2017-11-06  ...                          1\n","3      2017-11-06  ...                          1\n","4      2017-11-06  ...                          1\n","...           ...  ...                        ...\n","6742   2020-10-13  ...                          1\n","6743   2020-10-15  ...                          1\n","6744   2020-10-19  ...                          1\n","6745   2020-10-20  ...                          1\n","6746   2020-11-24  ...                          1\n","\n","[6741 rows x 76 columns]"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"wgHfmpdUzUtj","executionInfo":{"status":"ok","timestamp":1621212277754,"user_tz":420,"elapsed":1010,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"9e72b545-e202-462f-87f2-7696cd80fd26"},"source":["# For each crop, \n","df1 = df[['Region', 'Crop']]\n","df1.groupby(['Crop']).count()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","    </tr>\n","    <tr>\n","      <th>Crop</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Ayote</th>\n","      <td>331</td>\n","    </tr>\n","    <tr>\n","      <th>Calabaza</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Calala</th>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>Camote</th>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>Caña de azucar</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Cebolla</th>\n","      <td>284</td>\n","    </tr>\n","    <tr>\n","      <th>Chile</th>\n","      <td>33</td>\n","    </tr>\n","    <tr>\n","      <th>Chile jalapeño</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Chile..</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Chiltoma</th>\n","      <td>1320</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol alacin</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol de vara</th>\n","      <td>662</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol rojo</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>Granadilla</th>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>Guayaba</th>\n","      <td>65</td>\n","    </tr>\n","    <tr>\n","      <th>Jamaica</th>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>Maiz</th>\n","      <td>276</td>\n","    </tr>\n","    <tr>\n","      <th>Melon</th>\n","      <td>161</td>\n","    </tr>\n","    <tr>\n","      <th>None</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Papaya</th>\n","      <td>670</td>\n","    </tr>\n","    <tr>\n","      <th>Pepino</th>\n","      <td>278</td>\n","    </tr>\n","    <tr>\n","      <th>Pina</th>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>Pipian</th>\n","      <td>343</td>\n","    </tr>\n","    <tr>\n","      <th>Plátano</th>\n","      <td>600</td>\n","    </tr>\n","    <tr>\n","      <th>Remolacha</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>Repollo</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Rábano</th>\n","      <td>19</td>\n","    </tr>\n","    <tr>\n","      <th>Sandia</th>\n","      <td>208</td>\n","    </tr>\n","    <tr>\n","      <th>Sandia y melon</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Tomate</th>\n","      <td>775</td>\n","    </tr>\n","    <tr>\n","      <th>Trigo</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Verengena</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>Yuca</th>\n","      <td>461</td>\n","    </tr>\n","    <tr>\n","      <th>Zanahoria</th>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Region\n","Crop                  \n","Ayote              331\n","Calabaza             2\n","Calala             100\n","Camote              28\n","Caña de azucar       2\n","Cebolla            284\n","Chile               33\n","Chile jalapeño       1\n","Chile..              1\n","Chiltoma          1320\n","Frijol alacin        1\n","Frijol de vara     662\n","Frijol rojo          5\n","Granadilla          13\n","Guayaba             65\n","Jamaica             18\n","Maiz               276\n","Melon              161\n","None                 1\n","Papaya             670\n","Pepino             278\n","Pina                42\n","Pipian             343\n","Plátano            600\n","Remolacha            4\n","Repollo              6\n","Rábano              19\n","Sandia             208\n","Sandia y melon       1\n","Tomate             775\n","Trigo                1\n","Verengena           25\n","Yuca               461\n","Zanahoria            4"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"rvg0Lcg4XhhU"},"source":["# drop crops with only 1 count\n","df1 = df1.drop(df1.index[[4173, 5141, 2249, 6539, 4317, 3817, 6403, 5476, 311, 6697, 3002, 2908, 4494]])"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"iUonqOc6QcFb"},"source":["df.to_csv('vl_geow_f.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"mgl81SS5pzCM"},"source":["# 💯 Scoring System\n","\n","Required files:\n","- `VL_farm_geo_w.csv`: A cleaned version of the raw Excel datasets\n","\n","Steps:\n","- Initialize a new scoring function with `score = init_score(df)`, where df is the `cleaned.csv` pandas dataframe\n","    - You can also set df to be any dataframe with the same column names, but you may have to change the default values for crops, regions, and communities when you call the score function.\n","- To create a new score object, call `result = score(region, community)`, where region and community are optional parameters\n","- To get rankings of n crops, call `result.get_best_composite(n)` to get list of crops with best composite scores (includes percent diseased, condition, region, and community scores (if applicable)), `result.get_best_region(n)` to get list of crops with best region scores (if region was specified in the above step), and `result.get_best_community(n)` to get list of crops with best community scores (if community was specified in the above step).\n","    - By default, n is the number of unique crops in the dataset\n","    - Highest scoring crops are listed first in the returned list\n","    \n","Function Descriptions:\n","- `get_best_composite`: Ranks crops using composite scores based on condition, percent diseased, region (if applicable), and community (if applicable). The ranking of each crop corresponds to its order in the returned array (i.e. best to worst order). Uses the dictionary `comp_scores` to inform its rankings (the higher the score, the better the crop's rank).\n","- `get_best_region`: Ranks crops using composite scores based on region (if applicable). The ranking of each crop corresponds to its order in the returned array. Uses the dictionaries `reg_cond_scores` (for conditions) and `reg_dis_scores` (for percent diseased) to inform its rankings.\n","- `get_best_community`: Ranks crops using composite scores based on community (if applicable). The ranking of each crop corresponds to its order in the returned array. Uses the dictionaries `com_cond_scores` (for conditions) and `com_dis_scores` (for percent diseased) to inform its rankings.\n","- `get_best_type_composite`: Ranks crop types (e.g. \"Veg\", \"Grians\", etc.) using composite scores based on condition, percent diseased, region (if applicable), and community (if applicable). The ranking of each crop type corresponds to its order in the returned array. Uses the dictionary `type_comp_scores` to inform its rankings (the higher the score, the better the crop type's rank).\n","- `get_best_type_region`: Ranks crop types using composite scores based on region (if applicable). The ranking of each crop type corresponds to its order in the returned array. Uses the dictionaries `type_reg_cond_scores` (for conditions) and `type_reg_dis_scores` (for percent diseased) to inform its rankings.\n","- `get_best_type_community`: Ranks crop types using composite scores based on community (if applicable). The ranking of each crop type corresponds to its order in the returned array. Uses the dictionaries `type_com_cond_scores` (for conditions) and `type_com_dis_scores` (for percent diseased) to inform its rankings."]},{"cell_type":"code","metadata":{"id":"w69dU-4U-iLW"},"source":["class ScoreResult:\n","    def __init__(\n","        self, \n","        comp_scores, \n","        cond_scores, \n","        per_dis_scores, \n","        reg_cond_scores, \n","        reg_per_dis_scores, \n","        com_cond_scores, \n","        com_per_dis_scores,\n","        type_comp_scores,\n","        type_cond_scores,\n","        type_per_dis_scores,\n","        type_reg_cond_scores,\n","        type_reg_per_dis_scores,\n","        type_com_cond_scores,\n","        type_com_per_dis_scores,\n","        crops,\n","        types\n","    ):\n","        self.comp_scores = comp_scores\n","        self.cond_scores = cond_scores\n","        self.per_dis_scores = per_dis_scores\n","        self.reg_cond_scores = reg_cond_scores\n","        self.reg_dis_scores = reg_per_dis_scores\n","        self.com_cond_scores = com_cond_scores\n","        self.com_dis_scores = com_per_dis_scores\n","        self.type_comp_scores = type_comp_scores\n","        self.type_cond_scores = type_cond_scores\n","        self.type_per_dis_scores = type_per_dis_scores\n","        self.type_reg_cond_scores = type_reg_cond_scores\n","        self.type_reg_dis_scores = type_reg_per_dis_scores\n","        self.type_com_cond_scores = type_com_cond_scores\n","        self.type_com_dis_scores = type_com_per_dis_scores\n","        self.crops = crops\n","        self.types = types\n","        \n","    def get_best_composite(self, n=None):\n","        if n == None:\n","            n = len(self.crops)\n","        crops = self.crops.copy()\n","        crops.sort(key=lambda x: -self.comp_scores[x])\n","        return crops[:n]\n","    \n","    def get_best_region(self, n=None):\n","        if n == None:\n","            n = len(self.crops)\n","        crops = self.crops.copy()\n","        crops.sort(key=lambda x: -(self.reg_cond_scores[x] + self.reg_dis_scores[x]))\n","        return crops[:n]\n","    \n","    def get_best_community(self, n=None):\n","        if n == None:\n","            n = len(self.crops)\n","        crops = self.crops.copy()\n","        crops.sort(key=lambda x: -(self.com_cond_scores[x] + self.com_dis_scores[x]))\n","        return crops[:n]\n","    \n","    def get_best_type_composite(self, n=None):\n","        if n == None:\n","            n = len(self.types)\n","        types = self.types.copy()\n","        types.sort(key=lambda x: -self.type_comp_scores[x])\n","        return types[:n]\n","    \n","    def get_best_type_region(self, n=None):\n","        if n == None:\n","            n = len(self.types)\n","        types = self.types.copy()\n","        types.sort(key=lambda x: -(self.type_reg_cond_scores[x] + self.type_reg_dis_scores[x]))\n","        return types[:n]\n","    \n","    def get_best_type_community(self, n=None):\n","        if n == None:\n","            n = len(self.types)\n","        types = self.types.copy()\n","        types.sort(key=lambda x: -(self.type_com_cond_scores[x] + self.type_com_dis_scores[x]))\n","        return types[:n]\n","        \n","def normalize(d, target=1.0):\n","    raw = sum(d.values())\n","    factor = target/raw\n","    return {key:value*factor for key,value in d.items()}\n","\n","def init_score(df,  \n","               crops=None, \n","               types=None, \n","               regions=None, \n","               communities=None, \n","               conds = None,\n","               cond_weights={\n","                   \"good_cond\": 1, \n","                   \"Bueno\" : 1,\n","                   \"excellent_cond\": 2, \n","                   \"Excelente\": 2,\n","                   \"Excel\": 2,\n","                   \"average_cond\": -1, \n","                   \"Promedio\": -1,\n","                   \"poor_cond\": -2, \n","                   \"Pobre\": -2,\n","                   \"crisopa\": -2,\n","                   0: 0, \n","                   '0': 0}):\n","    if crops == None:\n","        crops = list(df[\"Crop\"].unique())\n","    if regions == None:\n","        regions = list(df[\"Region\"].unique())\n","    if types == None:\n","        types = list(df[\"Type\"].unique())\n","    if communities == None:\n","        communities = list(df[\"Community\"].unique())\n","    if conds == None:\n","        conds = list(df[\"Condition\"].unique())\n","        \n","        \n","    def score(region=None, community=None):\n","        if region != None and region not in regions:\n","            raise ValueError(f\"region is not valid, valid inputs include: {', '.join(regions)}\")\n","        if community != None and community not in communities:\n","            raise ValueError(f\"community is not valid, valid inputs include: {', '.join(communities)}\")\n","        \n","        comp_scores = dict.fromkeys(crops, 0)\n","        cond_scores = dict.fromkeys(crops, 0)\n","        per_dis_scores = dict.fromkeys(crops, 0)\n","        \n","        reg_cond_scores = dict.fromkeys(crops, 0)\n","        reg_per_dis_scores = dict.fromkeys(crops, 0)\n","        \n","        com_cond_scores = dict.fromkeys(crops, 0)\n","        com_per_dis_scores = dict.fromkeys(crops, 0)\n","        \n","        for crop in crops:\n","            cond_total = 0\n","            n = 0\n","            crop_df = df[df[\"Crop\"] == crop]\n","            cond_counts = crop_df[\"Condition\"].value_counts().to_dict()\n","            for cond in conds:\n","                if cond in cond_counts:\n","                    cond_total += cond_counts[cond] * cond_weights[cond]\n","                    n += cond_counts[cond]\n","            if n == 0:\n","                cond_scores[crop] = 0\n","            else:\n","                cond_scores[crop] = cond_total / n\n","            per_dis_scores[crop] = 100 - crop_df[\"% Disease\"].mean()\n","        cond_scores = normalize(cond_scores)\n","        per_dis_scores = normalize(per_dis_scores)\n","        \n","        if region != None:\n","            region_df = df[df[\"Region\"] == region]\n","            for crop in crops:\n","                cond_total = 0\n","                n = 0\n","                crop_df = region_df[region_df[\"Crop\"] == crop]\n","                cond_counts = crop_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    reg_cond_scores[crop] = 0\n","                else:\n","                    reg_cond_scores[crop] = cond_total / n\n","                if isinstance(100 - crop_df[\"% Disease\"].mean(), np.float64):\n","                    reg_per_dis_scores[crop] = 100 - crop_df[\"% Disease\"].mean()\n","                else:\n","                    reg_per_dis_scores[crop] = 0\n","            reg_cond_scores = normalize(reg_cond_scores)\n","            reg_per_dis_scores = normalize(reg_per_dis_scores)\n","                \n","        if community != None:\n","            com_df = df[df[\"Community\"] == community]\n","            for crop in crops:\n","                cond_total = 0\n","                n = 0\n","                crop_df = com_df[com_df[\"Crop\"] == crop]\n","                cond_counts = crop_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    com_cond_scores[crop] = 0\n","                else:\n","                    com_cond_scores[crop] = cond_total / n\n","                if isinstance(100 - crop_df[\"% Disease\"].mean(), np.float64):\n","                    com_per_dis_scores[crop] = 100 - crop_df[\"% Disease\"].mean()\n","                else:\n","                    com_per_dis_scores[crop] = 0\n","            com_cond_scores = normalize(com_cond_scores)\n","            com_per_dis_scores = normalize(com_per_dis_scores)\n","        \n","        for crop in crops:\n","            comp_scores[crop] += cond_scores[crop] + per_dis_scores[crop]\n","            if region != None:\n","                comp_scores[crop] += reg_cond_scores[crop] + reg_per_dis_scores[crop]\n","            if community != None:\n","                comp_scores[crop] += com_cond_scores[crop] + com_per_dis_scores[crop]\n","        comp_scores = normalize(comp_scores)\n","        \n","        \n","        type_comp_scores = dict.fromkeys(types, 0)\n","        type_cond_scores = dict.fromkeys(types, 0)\n","        type_per_dis_scores = dict.fromkeys(types, 0)\n","        \n","        type_reg_cond_scores = dict.fromkeys(types, 0)\n","        type_reg_per_dis_scores = dict.fromkeys(types, 0)\n","        \n","        type_com_cond_scores = dict.fromkeys(types, 0)\n","        type_com_per_dis_scores = dict.fromkeys(types, 0)\n","        \n","        for _type in types:\n","            cond_total = 0\n","            n = 0\n","            type_df = df[df[\"Type\"] == _type]\n","            cond_counts = type_df[\"Condition\"].value_counts().to_dict()\n","            for cond in conds:\n","                if cond in cond_counts:\n","                    cond_total += cond_counts[cond] * cond_weights[cond]\n","                    n += cond_counts[cond]\n","            if n == 0:\n","                type_cond_scores[_type] = 0\n","            else:\n","                type_cond_scores[_type] = cond_total / n\n","            type_per_dis_scores[_type] = 100 - type_df[\"% Disease\"].mean()\n","        type_cond_scores = normalize(type_cond_scores)\n","        type_per_dis_scores = normalize(type_per_dis_scores)\n","        \n","        if region != None:\n","            region_df = df[df[\"Region\"] == region]\n","            for _type in types:\n","                cond_total = 0\n","                n = 0\n","                type_df = region_df[region_df[\"Type\"] == _type]\n","                cond_counts = type_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    type_reg_cond_scores[_type] = 0\n","                else:\n","                    type_reg_cond_scores[_type] = cond_total / n\n","                if isinstance(100 - type_df[\"% Disease\"].mean(), np.float64):\n","                    type_reg_per_dis_scores[_type] = 100 - type_df[\"% Disease\"].mean()\n","                else:\n","                    type_reg_per_dis_scores[_type] = 0\n","            type_reg_cond_scores = normalize(type_reg_cond_scores)\n","            type_reg_per_dis_scores = normalize(type_reg_per_dis_scores)\n","                \n","        if community != None:\n","            com_df = df[df[\"Community\"] == community]\n","            for _type in types:\n","                cond_total = 0\n","                n = 0\n","                type_df = com_df[com_df[\"Type\"] == _type]\n","                cond_counts = type_df[\"Condition\"].value_counts().to_dict()\n","                for cond in conds:\n","                    if cond in cond_counts:\n","                        cond_total += cond_counts[cond] * cond_weights[cond]\n","                        n += cond_counts[cond]\n","                if n == 0:\n","                    type_com_cond_scores[_type] = 0\n","                else:\n","                    type_com_cond_scores[_type] = cond_total / n\n","                if isinstance(100 - type_df[\"% Disease\"].mean(), np.float64):\n","                    type_com_per_dis_scores[_type] = 100 - type_df[\"% Disease\"].mean()\n","                else:\n","                    type_com_per_dis_scores[_type] = 0\n","            type_com_cond_scores = normalize(type_com_cond_scores)\n","            type_com_per_dis_scores = normalize(type_com_per_dis_scores)\n","        \n","        for _type in types:\n","            type_comp_scores[_type] += type_cond_scores[_type] + type_per_dis_scores[_type]\n","            if region != None:\n","                type_comp_scores[_type] += type_reg_cond_scores[_type] + type_reg_per_dis_scores[_type]\n","            if community != None:\n","                type_comp_scores[_type] += type_com_cond_scores[_type] + type_com_per_dis_scores[_type]\n","        type_comp_scores = normalize(type_comp_scores)\n","        \n","        return ScoreResult(\n","            comp_scores, \n","            cond_scores, \n","            per_dis_scores, \n","            reg_cond_scores, \n","            reg_per_dis_scores, \n","            com_cond_scores, \n","            com_per_dis_scores,\n","            type_comp_scores,\n","            type_cond_scores,\n","            type_per_dis_scores,\n","            type_reg_cond_scores,\n","            type_reg_per_dis_scores,\n","            type_com_cond_scores,\n","            type_com_per_dis_scores,\n","            crops,\n","            types\n","        )\n","    \n","    return score"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Jtkut-gJi8eF"},"source":["# 🔥 Modeling"]},{"cell_type":"markdown","metadata":{"id":"Z42-HgxgvhiT"},"source":["We are building a model that is predicting which general crop type should be planted. There are four general crop types: fruits, vegetables, legumes and seeds, and grasses. We call this the general crop model.\n","\n","\n","\n","**Dataset:**\n","* Features = percent disease, wellness condition (i.e a combination of percent disease and crop condition), weather conditions, and location. \n","* Y = ranking for each specific crop and a score for each specific crop.  \n","* Addressing imbalanced classes: the class legumes and seeds and class grasses are less represented in the dataset. Realistically, we want farmers to plant a variety of crops, so we want to avoid having the model favoring one type of crop over the other. Therefore, we implemented class balance weights. \n","\n","\n","**Model selection and evaluation**\n","* We are implementing a multi-class classification model. We will be choosing between XGBoost, random forest, one-vs-rest, logistic regression, k-nearest neighbors, and support vector machines. \n","* Criteria for a good model: We also wish for the farmers to plant a variety of crops, so we will choose the model that has the highest accuracy, and also recommend a good mix of crops.  \n","* We used AUC, precision, recall, F1 score, the confusion matrix, and 5-fold cross validation accuracy score to evaluate each of the models.\n","\n","**Hyperparameter tuning**\n","\n","We will use grid search to tune the parameters of the best model selected.\n","\n","Below are the code and results of the model selection and evaluation.\n","\n","\n","**Multiclass Classification**\n","\n","Predict crops with highest probability of success given features. Success is defined by `Wellness_Condition`. Highest likelihood of success is dervied from outputted probabilities of the model\n","\n","**Feature Columns Used:**\n","  - Weather: `DewPointC`, `HeatIndexC`, `WindChillC`, `sunHour`\n","  - Season: `Season_Fall`, `Season_Spring`, `Season_Summer`, `Season_Winter`, `Month Visited`(?)\n","  - Location Based: `Region_Goyena`, `Region_Troilo`\n","\n","**Metrics**\n","- Weight on the features for the either the quality or illness\n","- Make list from outputs, then aggregate lists\n","\n","- Composite score: \n","  - Quality & percent disease\n","    - When modeling can get rid of crops with illness, bad quality \n","  - Model that maps crops to expected percent disease , maps other conditions conditions with season and location ( average percent disease in different locations )\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"xF_VhE-dMxT3"},"source":["## 😊 Final model chosen\n","\n","After the model selection process and tuning the hyperparameters, we've chosen the XGBoost model with default parameters to be the final machine learning model. "]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"h7n0BoyG9teV","executionInfo":{"status":"ok","timestamp":1621362549217,"user_tz":420,"elapsed":826,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"826f9773-e084-4a05-9aa7-2c3fd1f6980c"},"source":["def remove_low_crops(df):\n","  '''\n","  Outputs a dataframe for crop strain modeling without crops with low representaion\n","  '''\n","  # Getting counts of crops in dataframe\n","  crop_counts = df.groupby(['Crop']).size().sort_values(ascending=True)\n","  # Selecting index crop names with less than 10 counts\n","  low_crops = crop_counts[crop_counts < 10].index.tolist()\n","  # filtering dataframe without\n","  df_without = df[~df['Crop'].isin(low_crops)]\n","  return df_without\n","\n","def training(predictors, target):\n","  '''\n","  Uses predictors and target to split and train model. No normaliser needed for xgboost\n","  '''\n","  classes = np.unique(target)\n","  class_weight = compute_class_weight('balanced', classes, target)\n","\n","  xgboost_model = XGBClassifier(scale_pos_weight=class_weight)\n","  xgboost_model.fit(predictors, target)\n","  return xgboost_model\n","\n","def get_preds(model, conditions):\n","  '''\n","  Given model and the user conditions obtain the top class predictions from the model\n","  Conditions: '% Disease' (set to 0), 'Wellness_Condition' (set to 100), \n","  'HeatIndexC' (avg 30.74), 'DewPointC' (avg 20.66), 'WindChillC' (avg 28.10), 'sunHour' (avg 10.95), \n","  'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', \n","  'Region_Goyena', 'Region_Troilo'\n","  '''\n","  # if certain conditions aren't given , then default values \n","  target_prediction = model.predict(conditions)\n","  class_probas = model.predict_proba(conditions)[0].tolist()\n","  model_classes = model.classes_\n","  class_probabilities = list(zip(model_classes, class_probas))\n","  class_probabilities.sort(reverse=True, key=lambda x:x[1])\n","  top_classes = [every[0] for every in class_probabilities[:3]]\n","  return top_classes\n","\n","# May want to do this with the whole dataset for maximum representation of imbalanced classes\n","# Add argument for Crop_model=True or Type_model=True to get more specific for accuracies desired\n","def class_assessment(model, predictors, target):\n","    '''\n","    Assess the roc auc score for all classes. Saves a list of crops with higher roc auc scores\n","    Uses: Model, Training set of X & y\n","    -- default dict module needed from collections package\n","    '''\n","    crop_scores = defaultdict(list)\n","    classes = model.classes_\n","    X_train, X_test, y_train, y_test = train_test_split(predictors.values, target.values, test_size=0.2, shuffle=True)\n","    kf = KFold(n_splits=3, random_state=42)\n","    for train_ind, val_ind in kf.split(X_train, y_train):\n","\n","      # Split train into validation sets\n","        X_tr, y_tr = X_train[train_ind], y_train[train_ind]\n","        X_val, y_val = X_train[val_ind], y_train[val_ind]\n","        # Get roc auc score for each crop\n","        for each in classes:\n","            fpr, tpr, thresholds = roc_curve(y_val,  \n","                model.fit(X_tr, y_tr).predict_proba(X_val)[:,1], pos_label = each)\n","            auc = round(metrics.auc(fpr, tpr),2)\n","            crop_scores[each].append(auc)\n","\n","        crop_auc = pd.DataFrame.from_dict(crop_scores, orient='index')\n","        crop_auc['avg'] = crop_auc.mean(axis=1)\n","        \n","    crop_auc2 = crop_auc[crop_auc['avg'] > 0.5]\n","    crop_auc2.drop(crop_auc.columns[[0, 1, 2]], axis=1, inplace=True)\n","    crop_auc2.sort_values(by=['avg'], ascending=False, inplace=True)\n","    return [crop_auc2, classes]\n","\n","def cherry_pick(func_predictions, model_predictions, well_classified_crops):\n","    '''\n","    Use Adam's functions to supplement model predictions\n","    '''\n","    safe_predictions = [x for x in model_predictions if x in well_classified_crops]\n","    safe_predictions.extend(func_predictions)\n","    return safe_predictions[:3]\n","\n","'''\n","Function for ensembling results\n","'''\n","# def avg_preds(model_predictions, func_predictions):\n","#   '''\n","#   Ensembling results of model and function\n","#   '''\n","#   model_predsdf = pd.DataFrame.from_dict(model_preds, orient='index').sort_values(by=[0], ascending=False).reset_index().reset_index()\n","#   model_predsdf.columns = ['rank', 'crop', 'rating']\n","#   func_predsdf = pd.DataFrame.from_dict(function_results, orient='index').sort_values(by=[0], ascending=False).reset_index().reset_index()\n","#   func_predsdf.columns = ['rank', 'crop', 'rating']\n","#   comb_predsdf = func_predsdf.merge(model_predsdf, left_on='crop', right_on='crop')\n","#   comb_predsdf['averaged_rank'] = (comb_predsdf['rank_x'] + comb_predsdf['rank_y']) / 2 \n","#   comb_predsdf.sort_values(by=['averaged_rank'])\n","#   return comb_predsdf"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'\\nFunction for ensembling results\\n'"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"markdown","metadata":{"id":"foi-Fe5kzYv7"},"source":["## Training, cross validation and testing\n"]},{"cell_type":"code","metadata":{"id":"1YcOFSOwSX-a"},"source":["# Training\n","df = pd.read_csv('vl_geow_f.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"TlC3Kfx8cJf7"},"source":["# 1) Remove the low crops\n","df_less = remove_low_crops(df)\n","\n","# 2) Train the model\n","predictorsc = df_less[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","targetc = df_less['Crop']\n","\n","predictorst = df[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","targett = df['Type']\n","\n","crop_model = training(predictorsc, targetc)\n","type_model = training(predictorst, targett)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":162},"id":"aExDjXQAk0Ly","executionInfo":{"status":"error","timestamp":1621362262628,"user_tz":420,"elapsed":2827,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"998252cc-397c-4c73-dca8-12dfe0f76c62"},"source":["crop_model.predict(testc)"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-16-661b3b8bac0f>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcrop_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtestc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mNameError\u001b[0m: name 'testc' is not defined"]}]},{"cell_type":"markdown","metadata":{"id":"KE3PlV79U2m8"},"source":["## ➡️ Test set predictions"]},{"cell_type":"code","metadata":{"id":"hWdhDTxMSobl"},"source":["# Load the conditions into a dataframe\n","some_conditions = [0, 100, 30.74, 20.66, 28.10, 10.95, 0, 0, 0, 0, 0, 0]\n","columns_dict = {0: '% Disease', 1: 'Wellness_Condition', 2: 'HeatIndexC',\n","                  3: 'DewPointC', 4: 'WindChillC', 5: 'sunHour',\n","                  6: 'Season_Fall', 7: 'Season_Spring', 8: 'Season_Summer',\n","                  9: 'Season_Winter', 10: 'Region_Goyena', 11: 'Region_Troilo'}\n","some_conditions_df = pd.DataFrame(some_conditions).T.rename(columns=columns_dict)\n","\n","# Get the predictions from the model\n","crop_preds = get_preds(crop_model, some_conditions_df)\n","type_preds = get_preds(type_model, some_conditions_df)\n","\n","well_classified_categories = class_assessment(type_model, predictorst, targett)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"RaYjaTqz2VwG"},"source":["well_classified_categories.reset_index().rename(columns={'index': 'Crop Type'})"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"y74DwRquNOcg"},"source":["# 🎉 Final combined function\n","\n","This will be the function that combine the scoring system and the machine learning model. \n","\n","**How it works:**\n","\n","We will first use the machine learning model to output the ranks and the scores for the specific crop types. \n","\n","We will examine the AUC score for the recommended general crop type. If the score is below a certain threshold, then instead the ranks and scores that the machine learning model outputs, we use ranks and scores from the scoring system. If the score is above the threshold, then we will run a function that combines the ranks and scores the machine learning model predicts with the ranks and scores the scoring system predict. \n"]},{"cell_type":"code","metadata":{"id":"WlSy6Iy7yKR8"},"source":["  import pickle\n","  \n","  predictorsc = df_less[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","  targetc = df_less['Crop']\n","  \n","  classes = np.unique(targetc)\n","  class_weight = compute_class_weight('balanced', classes, targetc)\n","\n","  xgboost_model = XGBClassifier(scale_pos_weight=class_weight)\n","  xgboost_model.fit(predictorsc, targetc)\n","\n","filename = 'finalized_model33.pkl'\n","pickle.dump(xgboost_model, open(filename, 'wb'))\n"," "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DsGdxTrmNPbd","colab":{"base_uri":"https://localhost:8080/","height":334},"executionInfo":{"status":"error","timestamp":1621362317841,"user_tz":420,"elapsed":4978,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"ad001acc-9c5e-4e0a-bea5-3329cc0088f9"},"source":["# Maybe useful? df_test_binary[\"Fare\"].fillna(df_test_binary.groupby(\"NameLen\")[\"Fare\"].transform(\"median\"), inplace=True)\n","def final_function(Percent_Disease=0, Wellness_Condition=100, HeatIndexC=30.74,\n","                   DewPointC=20.66, WindChillC=28.10, sunHour=10.95,\n","                   Season_Fall=0, Season_Spring=0,\n","                   Season_Summer=0, Season_Winter=0,\n","                   Region_Goyena=0, Region_Troilo=0):\n","  \"\"\"\n","      NOTE: This function assumes that df is defined above!\n","\n","      The parameters are set to default values as specified by the model. Feel\n","      free to pass in as many or as few of these parameters as necessary. This\n","      function will return a string representing the model's recommendation.\n","  \"\"\"\n","  # 1) Remove the low crops\n","  df_less = remove_low_crops(df)\n","\n","  # 2) Train the model\n","  predictorsc = df_less[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","  targetc = df_less['Crop']\n","\n","  predictorst = df[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","  targett = df['Type']\n","\n","  crop_model = training(predictorsc, targetc)\n","  type_model = training(predictorst, targett)\n","\n","  # 3) Put the passed in conditions into a dataframe\n","  conditions = [Percent_Disease, Wellness_Condition, HeatIndexC, DewPointC,\n","                WindChillC, sunHour, Season_Fall, Season_Spring, Season_Summer,\n","                Season_Winter, Region_Goyena, Region_Troilo]\n","  columns_dict = {0: '% Disease', 1: 'Wellness_Condition', 2: 'HeatIndexC',\n","                  3: 'DewPointC', 4: 'WindChillC', 5: 'sunHour',\n","                  6: 'Season_Fall', 7: 'Season_Spring', 8: 'Season_Summer',\n","                  9: 'Season_Winter', 10: 'Region_Goyena', 11: 'Region_Troilo'}\n","  conditions_df = pd.DataFrame(conditions).T.rename(columns=columns_dict)\n","\n","  # 4) Call the model\n","  crop_preds = get_preds(crop_model, conditions_df)\n","  type_preds = get_preds(type_model, conditions_df)\n","  well_classified_crops = class_assessment(crop_model, predictorsc, targetc)\n","  well_classified_crops.reset_index().rename(columns={'index': 'Crop'})\n","  well_classified_crops = well_classified_crops.head(3)\n","  well_classified_categories = class_assessment(type_model, predictorst, targett)\n","  well_classified_categories.reset_index().rename(columns={'index': 'Crop Type'})\n","  well_classified_categories = well_classified_categories.head(1)\n","\n","  # 5) Call the scoring system\n","  score = init_score(df)\n","  result = score()\n","  if Region_Goyena == 1:\n","    region = 'Goyena'\n","  elif Region_Troilo == 1:\n","    region = 'Troilo'\n","  else:\n","    region = None\n","  score_func = init_score(df)\n","  result = score_func(region)\n","  high_score_crops = result.get_best_composite(n=3)\n","  high_score_categories = result.get_best_type_composite(n=1)\n","  if high_score_categories[0] == 'Veg':\n","    high_score_categories[0] = 'Vegetable'\n","\n","  # 6) Add the results of the crop scoring to get the crop DF up to 3\n","  crops_length = len(well_classified_crops)\n","  if crops_length < 3:\n","    high_score_crops_2D = []\n","    for i in range(min(len(high_score_crops, 3 - crops_length))):\n","      high_score_crops_2D.append([high_score_crops[i], None])\n","    high_score_df = pd.DataFrame(new_high_score_crops, columns=['Crop', 'avg'])\n","    well_classified_crops = well_classified_crops.append(high_score_df)\n","  \n","  # 7) Add the results of the crop type scoring if the category DF is 0 in len\n","  if len(well_classified_categories) < 1:\n","    high_score_types_2D = [[high_score_categories[0], None]]\n","    well_classified_categories = pd.DataFrame(high_score_types_2D, columns=['Crop Type', 'avg'])\n","  \n","  # 8) Return the crop and category recommendations dataframes in a list\n","  return [well_classified_crops, well_classified_categories]\n","  \n","final_function()"],"execution_count":null,"outputs":[{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-19-d47c4f61572b>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     78\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0;34m[\u001b[0m\u001b[0mwell_classified_crops\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mwell_classified_categories\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     79\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 80\u001b[0;31m \u001b[0mfinal_function\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m<ipython-input-19-d47c4f61572b>\u001b[0m in \u001b[0;36mfinal_function\u001b[0;34m(Percent_Disease, Wellness_Condition, HeatIndexC, DewPointC, WindChillC, sunHour, Season_Fall, Season_Spring, Season_Summer, Season_Winter, Region_Goyena, Region_Troilo)\u001b[0m\n\u001b[1;32m     22\u001b[0m   \u001b[0mtargett\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdf\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'Type'\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m   \u001b[0mcrop_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictorsc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtargetc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m   \u001b[0mtype_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mtraining\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictorst\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtargett\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-14-735bdb010d52>\u001b[0m in \u001b[0;36mtraining\u001b[0;34m(predictors, target)\u001b[0m\n\u001b[1;32m     19\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     20\u001b[0m   \u001b[0mxgboost_model\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mXGBClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mscale_pos_weight\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mclass_weight\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 21\u001b[0;31m   \u001b[0mxgboost_model\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mpredictors\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtarget\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     22\u001b[0m   \u001b[0;32mreturn\u001b[0m \u001b[0mxgboost_model\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, callbacks)\u001b[0m\n\u001b[1;32m    730\u001b[0m                               \u001b[0mevals_result\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mevals_result\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    731\u001b[0m                               \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxgb_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxgb_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 732\u001b[0;31m                               callbacks=callbacks)\n\u001b[0m\u001b[1;32m    733\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    734\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobjective\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb_options\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"objective\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, learning_rates)\u001b[0m\n\u001b[1;32m    214\u001b[0m                            \u001b[0mevals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mevals\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                            \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m                            xgb_model=xgb_model, callbacks=callbacks)\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36m_train_internal\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, xgb_model, callbacks)\u001b[0m\n\u001b[1;32m     72\u001b[0m         \u001b[0;31m# Skip the first update if it is a recovery step.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mversion\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m             \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m             \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_rabit_checkpoint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0mversion\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   1107\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m             _check_call(_LIB.XGBoosterUpdateOneIter(self.handle, ctypes.c_int(iteration),\n\u001b[0;32m-> 1109\u001b[0;31m                                                     dtrain.handle))\n\u001b[0m\u001b[1;32m   1110\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m             \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"id":"dEnkhd4OxWkF","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1621362783714,"user_tz":420,"elapsed":231314,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"fa573962-61e1-40de-f3ee-c2182c0fabfc"},"source":["\n","well_classified_crops = class_assessment(crop_model, predictorsc, targetc)\n","well_classified_crops"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n","/usr/local/lib/python3.7/dist-packages/pandas/core/frame.py:4174: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n","  errors=errors,\n","/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:70: SettingWithCopyWarning: \n","A value is trying to be set on a copy of a slice from a DataFrame\n","\n","See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["[                 avg\n"," Granadilla  0.886667\n"," Calala      0.780000\n"," Pina        0.733333\n"," Jamaica     0.663333\n"," Camote      0.653333\n"," Guayaba     0.610000\n"," Rábano      0.570000\n"," Pepino      0.566667\n"," Papaya      0.563333\n"," Pipian      0.540000\n"," Yuca        0.536667\n"," Melon       0.513333\n"," Chiltoma    0.503333,\n"," array(['Ayote', 'Calala', 'Camote', 'Cebolla', 'Chile', 'Chiltoma',\n","        'Frijol de vara', 'Granadilla', 'Guayaba', 'Jamaica', 'Maiz',\n","        'Melon', 'Papaya', 'Pepino', 'Pina', 'Pipian', 'Plátano', 'Rábano',\n","        'Sandia', 'Tomate', 'Verengena', 'Yuca'], dtype=object)]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q85cpjy-ud7Q","executionInfo":{"status":"ok","timestamp":1621362871012,"user_tz":420,"elapsed":728,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"}},"outputId":"940471de-ed9b-4e4c-ab6d-6587f2328aae"},"source":["well_classified_crops[1]"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['Ayote', 'Calala', 'Camote', 'Cebolla', 'Chile', 'Chiltoma',\n","       'Frijol de vara', 'Granadilla', 'Guayaba', 'Jamaica', 'Maiz',\n","       'Melon', 'Papaya', 'Pepino', 'Pina', 'Pipian', 'Plátano', 'Rábano',\n","       'Sandia', 'Tomate', 'Verengena', 'Yuca'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"markdown","metadata":{"id":"H28VT5yEsqKm"},"source":[" # 📚 Appendix"]},{"cell_type":"markdown","metadata":{"id":"uZNH_VNnZx-t"},"source":["#### Model Comparison"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OpSTw1XcAQ6B","executionInfo":{"elapsed":519,"status":"ok","timestamp":1620403398932,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"},"user_tz":420},"outputId":"0a5ba700-9b85-450c-b8e9-87e961de5481"},"source":["X_train, X_test, y_train, y_test = train_test_split(predictors, target, test_size=0.2, shuffle=True)\n","\n","# data normalization using MinMaxScaler (standardscaler decreases accuracy due to nongaussian distribution)\n","norm = MinMaxScaler().fit(X_train)\n","X_train_norm = norm.transform(X_train)\n","X_test_norm = norm.transform(X_test)\n","\n","kf = KFold(n_splits=5, random_state=42)\n","\n","classes = np.unique(target)\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:296: FutureWarning: Setting a random_state has no effect since shuffle is False. This will raise an error in 0.24. You should leave random_state to its default (None), or set shuffle=True.\n","  FutureWarning\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"bUj7ogy6d6nw","executionInfo":{"elapsed":18818,"status":"error","timestamp":1620403422172,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"},"user_tz":420},"outputId":"33af3574-4e07-4f87-df15-6693e1ceaa2b"},"source":["# Checking for America's Next Top Models\n","# cv_results = {}\n","# result_table = pd.DataFrame(columns=['classifiers', 'accuracy'])\n","\n","models = {'xgboost': XGBClassifier(random_state=42,),\n","        'logistic regression': LogisticRegression(solver=\"lbfgs\", random_state=42, multi_class=\"multinomial\"),\n","        'KNN': KNeighborsClassifier( n_neighbors=5),\n","        'decision tree': DecisionTreeClassifier(random_state=42),\n","        'random forest': RandomForestClassifier(random_state=42, n_estimators=100),\n","        'SVC': svm.SVC(random_state=42),\n","        'one vs rest': OneVsRestClassifier(SVC(random_state=42)) }\n","\n","for model in models.items():\n","  for train_ind, val_ind in kf.split(X_train_norm, y_train):\n","    X_tr, y_tr = X_train_norm[train_ind], y_train.iloc[train_ind]\n","    X_val, y_val = X_train_norm[val_ind], y_train.iloc[val_ind]\n","    #fit model in dictionary with values\n","    model[1].fit(X_tr, y_tr)\n","    #predict\n","    y_pred = model[1].predict(X_val)\n","\n","  #testing metrics\n","    precision = precision_score(y_val, y_pred, average='weighted')\n","    accuracy = accuracy_score(y_val, y_pred)\n","    f1 = f1_score(y_val, y_pred, average='weighted')\n","\n","    # cv_results[model[0]] = (accuracy)\n","    cm = confusion_matrix(y_val,y_pred)\n","\n","  #roc auc scores\n","  for each in classes:\n","      fpr, tpr, thresholds = roc_curve(y_val,  \n","                      model[1].predict_proba(X_val)[:,1], pos_label = each) \n","\n","      auroc = round(metrics.auc(fpr, tpr),2)\n","      print(each,'--AUC--->',auroc)\n","\n","  print(model[0], '\\n', 'accuracy score:', accuracy, '\\n', 'f1 score: ', f1, '\\n precision: ', precision)\n","  ax= plt.subplot()\n","  sns.heatmap(cm, annot=True, fmt='g', ax=ax, cmap='Blues');  #annot=True to annotate cells, ftm='g' to disable scientific notation\n","  # labels, title and ticks\n","  ax.set_xlabel('Predicted Labels');ax.set_ylabel('True Labels'); \n","  ax.set_title('Confusion Matrix'); \n","  ax.xaxis.set_ticklabels(['Fruit', 'Grains', 'Legumes', 'Veg']); ax.yaxis.set_ticklabels(['Fruit', 'Grains', 'Legumes', 'Veg']);\n","  plt.show()      \n","  print('\\n') \n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["Fruit --AUC---> 0.56\n","Grains --AUC---> 0.58\n","Legumes Seeds --AUC---> 0.53\n","Veg --AUC---> 0.41\n","xgboost \n"," accuracy score: 0.45918367346938777 \n"," f1 score:  0.412746162562218 \n"," precision:  0.37491104277938814\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/linear_model/_logistic.py:940: ConvergenceWarning: lbfgs failed to converge (status=1):\n","STOP: TOTAL NO. of ITERATIONS REACHED LIMIT.\n","\n","Increase the number of iterations (max_iter) or scale the data as shown in:\n","    https://scikit-learn.org/stable/modules/preprocessing.html\n","Please also refer to the documentation for alternative solver options:\n","    https://scikit-learn.org/stable/modules/linear_model.html#logistic-regression\n","  extra_warning_msg=_LOGISTIC_SOLVER_CONVERGENCE_MSG)\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"stream","text":["Fruit --AUC---> 0.57\n","Grains --AUC---> 0.57\n","Legumes Seeds --AUC---> 0.53\n","Veg --AUC---> 0.4\n","logistic regression \n"," accuracy score: 0.4647495361781076 \n"," f1 score:  0.4156902808477612 \n"," precision:  0.3765595023871452\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","Fruit --AUC---> 0.51\n","Grains --AUC---> 0.55\n","Legumes Seeds --AUC---> 0.51\n","Veg --AUC---> 0.47\n","KNN \n"," accuracy score: 0.4035250463821892 \n"," f1 score:  0.38416951217611955 \n"," precision:  0.37352857266524414\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","Fruit --AUC---> 0.51\n","Grains --AUC---> 0.51\n","Legumes Seeds --AUC---> 0.53\n","Veg --AUC---> 0.47\n","decision tree \n"," accuracy score: 0.4174397031539889 \n"," f1 score:  0.40725511422730903 \n"," precision:  0.4020391314391\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n","Fruit --AUC---> 0.51\n","Grains --AUC---> 0.56\n","Legumes Seeds --AUC---> 0.55\n","Veg --AUC---> 0.45\n","random forest \n"," accuracy score: 0.41465677179962895 \n"," f1 score:  0.40060824133830425 \n"," precision:  0.39251121211923445\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 2 Axes>"]},"metadata":{"tags":[]}},{"output_type":"stream","text":["\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n","/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision is ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"},{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-26-f63ed61efdf1>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     31\u001b[0m   \u001b[0;32mfor\u001b[0m \u001b[0meach\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mclasses\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     32\u001b[0m       fpr, tpr, thresholds = roc_curve(y_val,  \n\u001b[0;32m---> 33\u001b[0;31m                       model[1].predict_proba(X_val)[:,1], pos_label = each) \n\u001b[0m\u001b[1;32m     34\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     35\u001b[0m       \u001b[0mauroc\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mround\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmetrics\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mauc\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfpr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtpr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m2\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36mpredict_proba\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    634\u001b[0m         \u001b[0mdatasets\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    635\u001b[0m         \"\"\"\n\u001b[0;32m--> 636\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_check_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    637\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_predict_proba\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    638\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/svm/_base.py\u001b[0m in \u001b[0;36m_check_proba\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    601\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_check_proba\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    602\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprobability\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 603\u001b[0;31m             raise AttributeError(\"predict_proba is not available when \"\n\u001b[0m\u001b[1;32m    604\u001b[0m                                  \" probability=False\")\n\u001b[1;32m    605\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_impl\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32min\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'c_svc'\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m'nu_svc'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: predict_proba is not available when  probability=False"]}]},{"cell_type":"markdown","metadata":{"id":"nk8wbTJyEC05"},"source":["### Hyperparameter Tuning"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"87sIVNlDrI_Q","executionInfo":{"elapsed":2085,"status":"ok","timestamp":1620403502921,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"},"user_tz":420},"outputId":"faa13bb1-7672-4c28-9fa6-7b0801143b70"},"source":["# XGBoost with oversampled data\n","# over sampled train set\n","oversample = RandomOverSampler(random_state=42)\n","X_train_over, y_train_over = oversample.fit_resample(X_train_norm, y_train)\n","\n","\n","xgboost_model_o = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","                    colsample_bynode=1, colsample_bytree=1, gamma=0, learn_rate=0.2,\n","                    learning_rate=0.1, max_delta_step=0, max_depth=3,\n","                    min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n","                    nthread=None, objective='multi:softprob', random_state=42,\n","                    reg_alpha=0, reg_lambda=1, sample_rate=0.8,\n","                    seed=None, silent=None, subsample=1, verbosity=1)\n","xgboost_model_o.fit(X_train_over, y_train_over)\n","\n","y_pred = xgboost_model_o.predict(X_test_norm)\n","accuracy_score(y_test, y_pred)\n","\n","print(classification_report(y_test, y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:87: FutureWarning: Function safe_indexing is deprecated; safe_indexing is deprecated in version 0.22 and will be removed in version 0.24.\n","  warnings.warn(msg, category=FutureWarning)\n"],"name":"stderr"},{"output_type":"stream","text":["               precision    recall  f1-score   support\n","\n","        Fruit       0.47      0.15      0.23       531\n","       Grains       0.05      0.41      0.09        56\n","Legumes Seeds       0.26      0.40      0.31       211\n","          Veg       0.56      0.42      0.48       551\n","\n","     accuracy                           0.31      1349\n","    macro avg       0.33      0.35      0.28      1349\n"," weighted avg       0.45      0.31      0.34      1349\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"h4SwswDjEvfN"},"source":["# XGBoost with tuned parameters\n","# {'gamma': 1, 'learn_rate': 0.1, 'max_depth': 3, 'subsample': 0.9}\n","tuned_xgboost_model = XGBClassifier(gamma=1, learn_rate=0.1, max_depth=3, subsample=0.9)\n","tuned_xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","y_pred = tuned_xgboost_model.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"-566h5EdEcbT","executionInfo":{"elapsed":498,"status":"ok","timestamp":1619755170333,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"},"user_tz":420},"outputId":"6edc0dc9-af77-4b06-9e3a-2f076313f644"},"source":["class_weight = compute_class_weight('balanced', classes, target)\n","print(class_weight)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["[0.63355263 6.06205036 1.65707965 0.6048995 ]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ideO92htHovC","executionInfo":{"elapsed":11618,"status":"ok","timestamp":1619760262625,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"},"user_tz":420},"outputId":"e13f50dd-44fa-4240-937a-5b1491c6d57a"},"source":["# Finding the best parameters for XGBoost\n","def parameter_tune(clf, hyper_params):\n","    # Type of scoring used to compare parameter combinations\n","    acc_scorer = make_scorer(accuracy_score)\n","\n","    # Run the grid search\n","    grid_obj = GridSearchCV(clf, hyper_params, scoring=acc_scorer)\n","    grid_obj.fit(X_train, y_train)\n","    return grid_obj\n","\n","# Parameter combonations that the grid search will try\n","hyper_params = {'max_depth': [3, 4, 5],\n","                'learn_rate': [0.1, 0.09, 0.08, 0.07],\n","                'subsample': [0.8, 0.9, 1],\n","                'gamma': [0, 1, 5]}\n","# Find the best parameters with GridSearchCV\n","#grid_search_obj = parameter_tune(XGBClassifier(), hyper_params)\n","#grid_search_obj.cv_results_"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'mean_fit_time': array([0.69356136, 1.34642015]),\n"," 'mean_score_time': array([0.01698923, 0.02862468]),\n"," 'mean_test_score': array([0.46624408, 0.46197675]),\n"," 'param_max_depth': masked_array(data=[3, 6],\n","              mask=[False, False],\n","        fill_value='?',\n","             dtype=object),\n"," 'params': [{'max_depth': 3}, {'max_depth': 6}],\n"," 'rank_test_score': array([1, 2], dtype=int32),\n"," 'split0_test_score': array([0.47173309, 0.47265987]),\n"," 'split1_test_score': array([0.47265987, 0.47265987]),\n"," 'split2_test_score': array([0.45640074, 0.44897959]),\n"," 'split3_test_score': array([0.48701299, 0.47309833]),\n"," 'split4_test_score': array([0.44341373, 0.44248609]),\n"," 'std_fit_time': array([0.01308868, 0.00598136]),\n"," 'std_score_time': array([0.00037956, 0.00046428]),\n"," 'std_test_score': array([0.01497168, 0.01342207])}"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":165},"id":"li4q50TOLbQx","executionInfo":{"elapsed":326,"status":"ok","timestamp":1619760278960,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"},"user_tz":420},"outputId":"3423f843-ce96-48e2-f752-1986c7506b90"},"source":["# Make the results into a dataframe\n","#grid_search_df = pd.DataFrame(grid_search_obj.cv_results_)\n","#grid_search_df"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>mean_fit_time</th>\n","      <th>std_fit_time</th>\n","      <th>mean_score_time</th>\n","      <th>std_score_time</th>\n","      <th>param_max_depth</th>\n","      <th>params</th>\n","      <th>split0_test_score</th>\n","      <th>split1_test_score</th>\n","      <th>split2_test_score</th>\n","      <th>split3_test_score</th>\n","      <th>split4_test_score</th>\n","      <th>mean_test_score</th>\n","      <th>std_test_score</th>\n","      <th>rank_test_score</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.693561</td>\n","      <td>0.013089</td>\n","      <td>0.016989</td>\n","      <td>0.000380</td>\n","      <td>3</td>\n","      <td>{'max_depth': 3}</td>\n","      <td>0.471733</td>\n","      <td>0.47266</td>\n","      <td>0.456401</td>\n","      <td>0.487013</td>\n","      <td>0.443414</td>\n","      <td>0.466244</td>\n","      <td>0.014972</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.346420</td>\n","      <td>0.005981</td>\n","      <td>0.028625</td>\n","      <td>0.000464</td>\n","      <td>6</td>\n","      <td>{'max_depth': 6}</td>\n","      <td>0.472660</td>\n","      <td>0.47266</td>\n","      <td>0.448980</td>\n","      <td>0.473098</td>\n","      <td>0.442486</td>\n","      <td>0.461977</td>\n","      <td>0.013422</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   mean_fit_time  std_fit_time  ...  std_test_score  rank_test_score\n","0       0.693561      0.013089  ...        0.014972                1\n","1       1.346420      0.005981  ...        0.013422                2\n","\n","[2 rows x 14 columns]"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"id":"C7f6V4sX8ztB"},"source":["# Print out the best parameters\n","#grid_search_obj.best_params_"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Fl6GKbFQ8yK8"},"source":["# Get the best estimator\n","#BEST_XG_CLF = grid_search_obj.best_estimator_\n","#BEST_XG_CLF"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wfIDcpUbOtOc","executionInfo":{"elapsed":1278,"status":"ok","timestamp":1619760457093,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"},"user_tz":420},"outputId":"783bc9cd-2675-4660-952e-6acc1cced4b6"},"source":["# Print the classification_report of the best estimator\n","#BEST_XG_CLF.fit(X_train, y_train)\n","\n","#y_pred = BEST_XG_CLF.predict(X_test)\n","#accuracy_score(y_test, y_pred)\n","\n","#print(classification_report(y_test, y_pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["               precision    recall  f1-score   support\n","\n","        Fruit       0.46      0.58      0.51       519\n","       Grains       0.00      0.00      0.00        59\n","Legumes Seeds       0.18      0.01      0.02       206\n","          Veg       0.50      0.60      0.54       565\n","\n","     accuracy                           0.48      1349\n","    macro avg       0.28      0.30      0.27      1349\n"," weighted avg       0.41      0.48      0.43      1349\n","\n"],"name":"stdout"},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/metrics/_classification.py:1272: UndefinedMetricWarning: Precision and F-score are ill-defined and being set to 0.0 in labels with no predicted samples. Use `zero_division` parameter to control this behavior.\n","  _warn_prf(average, modifier, msg_start, len(result))\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"PcmrRSeN9D98"},"source":["predictors = df[['% Disease', 'Wellness_Condition', 'HeatIndexC', 'DewPointC', 'WindChillC', 'sunHour', 'Season_Fall', 'Season_Spring', 'Season_Summer', 'Season_Winter', 'Region_Goyena', 'Region_Troilo']]\n","targetc = df['Crop']\n","\n","X_trainc, X_testc, y_trainc, y_testc = train_test_split(predictors, targetc, test_size=0.2, shuffle=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":228},"id":"gM7PC3Yu9Pqh","executionInfo":{"elapsed":527,"status":"error","timestamp":1620403116133,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"},"user_tz":420},"outputId":"bc59f415-dfbd-4a69-d077-390dc831549e"},"source":["# Crops data \n","\n","xgboost_model = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","                    colsample_bynode=1, colsample_bytree=1, gamma=0, learn_rate=0.2,\n","                    learning_rate=0.1, max_delta_step=0, max_depth=3,\n","                    min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n","                    nthread=None, objective='multi:softprob', random_state=42,\n","                    reg_alpha=0, reg_lambda=1, sample_rate=0.8, scale_pos_weight=class_weight,\n","                    seed=None, silent=None, subsample=1, verbosity=1)\n","xgboost_model.fit(X_trainc, y_trainc)\n","\n","y_pred = xgboost_model.predict(X_testc)\n","accuracy_score(y_testc, y_pred)\n","\n","print(classification_report(y_testc, y_pred))"],"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-2-4cdd73359259>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;31m# Crops data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m xgboost_model = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n\u001b[0m\u001b[1;32m      4\u001b[0m                     \u001b[0mcolsample_bynode\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcolsample_bytree\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mgamma\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlearn_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.2\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m                     \u001b[0mlearning_rate\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_delta_step\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmax_depth\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'XGBClassifier' is not defined"]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":286},"id":"B1TbSETY6zvx","executionInfo":{"elapsed":1515,"status":"error","timestamp":1619816333641,"user":{"displayName":"Katie Byers","photoUrl":"","userId":"01348501594108183293"},"user_tz":420},"outputId":"4ec10137-381e-4e10-ee45-99b89ae16c7e"},"source":["\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":[" * Serving Flask app \"__main__\" (lazy loading)\n"," * Environment: production\n","\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n","\u001b[2m   Use a production WSGI server instead.\u001b[0m\n"," * Debug mode: on\n"],"name":"stdout"},{"output_type":"stream","text":[" * Running on http://127.0.0.1:53300/ (Press CTRL+C to quit)\n"," * Restarting with stat\n"],"name":"stderr"},{"output_type":"error","ename":"SystemExit","evalue":"ignored","traceback":["An exception has occurred, use %tb to see the full traceback.\n","\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 1\n"]},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n","  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":360},"id":"UpHnFJ2T98Iw","executionInfo":{"elapsed":1505,"status":"error","timestamp":1620402871538,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"},"user_tz":420},"outputId":"8b16f327-d5a4-4735-d8f5-63c682e927e1"},"source":[""],"execution_count":null,"outputs":[{"output_type":"error","ename":"ModuleNotFoundError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)","\u001b[0;32m<ipython-input-1-2cdd3addbe25>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mdash\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mdash_bootstrap_components\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mdbc\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mdash\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdependencies\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mInput\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mOutput\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mloaded_model\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mloadmodel\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mlayout\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mlayout\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'dash'","","\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"]}]},{"cell_type":"markdown","metadata":{"id":"OeWVeyT0CobY"},"source":["\n","## ✏️ Data Preparation\n","\n","\n","We produced a cleaned version of the data titled `VL_farm_geo_w.csv`.\n","Below is a description of the initial data cleaning steps we took. \n","\n","The data we received from Viviendas Leon (VL) originally consisted of these files:\n","\n","1) corrected names of farmers VL worked with\n","\n","2) farming data 2017 - 2021 of the farmers \n","\n","3) coordinates of the families\n","\n","We further scraped weather information to add to our analysis. \n","\n","1) replaced all the family names with corrected names\n","\n","2) translated Spanish (the original language of the data) into English\n","\n","3) merged the farming data with weather and geocoordinate data\n","\n","Below are useful functions we used for data cleaning, and the code of our data cleaning.\n","\n"]},{"cell_type":"code","metadata":{"id":"O7amnEYwD4KN"},"source":["# Load farming data, weather data, geo data\n","\n","# dropped last three rows (just empty)\n","correct_names = pd.read_excel(\"210304_Full Participant List Farming Program 2017-2021.xlsx\").drop([51,52,53], axis=0)\n","correct_names.columns = correct_names.loc[0,:]\n","correct_names = correct_names.drop([0], axis=0)\n","\n","# load data\n","data_17_19 = pd.read_excel(\"VL Huertos Familiares- Hoja de Datos (2017-2019).xlsx\")\n","data_19_20 = pd.read_excel(\"VL Huertos Familiares- Hoja de Datos (2019-2020).xlsx\")\n","\n","# Lauren\n","historic_w = pd.read_csv('w_historic.csv')\n","families_coordinates = pd.read_csv('family_coordinates_api.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ON92OKtRECKe"},"source":["def combined_farming(dataframe1, dataframe2):\n","  # Kelly\n","  #drop empty column\n","  dataframe1 = dataframe1.drop(\"Unnamed: 10\", axis=1)\n","\n","  '''Translate Spanish column names into English'''\n","\n","  translated_cols = ['Date visited','Auditor','Region','Community','Family visited','Present?',\n","                      'Fruit','Fruit_Condition (seedling or transplanted)', 'Fruit_% Disease','Fruit_Condition',\n","                      'Fruit_Plague','Fruit_Organic recommendation','Fruit_Chemical recommendation',\n","                      'Vegetables','Veg_Condition (seedling or transplanted)','Veg_% Disease','Veg_Condition',\n","                      'Veg_Plague','Veg_Organic recommendation','Veg_Chemical recommendation',\n","                      'Legumes and seeds','LnS_Condition (seedling or transplanted)','LnS_% Disease',\n","                      'LnS_Condition','LnS_Plague','LnS_Organic recommendation','LnS_Chemical recommendation',\n","                      'Grasses','Grasses_Condition (seedling or transplanted)','Grasses_% Disease',\n","                      'Grasses_Condition','Grasses_Plague','Grasses_Organic recommendation',\n","                      'Grasses_Chemical recommendation',\n","                      'Commentaries, additional remarks','Response, commentary follow up']\n","  # rename columns \n","  dataframe1.columns = translated_cols\n","  dataframe2.columns = translated_cols\n","\n","  # drop first 3 rows (headings of table names)\n","  dataframe1 = dataframe1.drop([0, 1, 2], axis=0) \n","  dataframe2 = dataframe2.drop([0, 1, 2], axis=0)\n","\n","  # appending 2019-2020 to the bottom of 2017-2019 data\n","  combined_data = dataframe1.append(dataframe2)\n","\n","  return combined_data\n","\n","def clean_farming(combined_data):\n","\n","  '''Preliminary cleaning for consistent data entry, correct names, and structuring\n","  data so that each row is one observation for one crop.'''\n","\n","    # fill NaN with 0s\n","    combined_data = combined_data.fillna(0)\n","\n","\n","    # further cleaning\n","    combined_data[\"Month visited\"] = combined_data[\"Date visited\"].dt.month\n","    combined_data[\"Year visited\"] = combined_data[\"Date visited\"].dt.year\n","    combined_data[\"Veg_% Disease\"] = combined_data[\"Veg_% Disease\"].replace(['35 %', ';4', ' '], [35, 4, 0])\n","    combined_data[\"Fruit\"] = combined_data[\"Fruit\"].replace(['Piña', 'piña'], 'Pina')\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace(\"Pipián\", \"Pipian\")\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace(\"I\", \"None\")\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace([\"Frijol Rojo\", \"Frijoles rojo\"], \"Frijol rojo\")\n","    combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace([\"Frijoles blanco\", \"Frijol blanco\"])\n","\n","    # replace with corrected names\n","    combined_data = combined_data.replace(correct_names.iloc[:,3].values, correct_names.iloc[:,4].values)\n","\n","    # structure data so that one row is one observation \n","    overall_info = combined_data.iloc[:,:6]\n","    fruit = combined_data.iloc[:,6:13]\n","    veg = combined_data.iloc[:,13:20]\n","    lns = combined_data.iloc[:,20:27]\n","    grasses = combined_data.iloc[:,27:34]\n","\n","    # keeping a column for crop type\n","    fruit['Type'] = 'Fruit'\n","    veg['Type'] = 'Veg'\n","    lns['Type'] = 'Legumes Seeds'\n","    grasses['Type'] = 'Grains'\n","\n","    crops = [fruit, veg, lns, grasses]\n","    crops_0 = []\n","    new_col_names = ['Date visited','Auditor','Region','Community','Family visited','Present?',\n","                          'Crop','Seedling_or_transplanted', '% Disease','Condition',\n","                          'Plague','Organic recommendation','Chemical recommendation', 'Type']\n","\n","    for table in crops:\n","      temp = pd.concat([overall_info, table], axis=1)\n","      temp.columns = new_col_names\n","      crops_0.append(temp)\n","\n","    final = crops_0[0]\n","    for table in crops_0[1:]:\n","      final = pd.concat([final, table], axis=0)\n","\n","    # Lauren\n","    # Removing empties\n","    final = final[final['Crop']!=0]\n","\n","    # Cleaning names column\n","\n","    final['Family visited'] = final['Family visited'].str.lower()\n","\n","    final = final.replace(\n","        ['arelis', 'arelis  solis', 'arelis solis',\n","          'arelis soliz', 'areliz solis', 'arlelis solis'], 'arelis solis')\n","\n","    final = final.replace(\n","        ['freddy', 'freddy lanza', 'freddy lanzas',\n","          'freddy lasza', 'freddys campo', 'fredi ', 'fredis ',\n","          'fredis lanza', 'fredy lanzas', 'fredys'], 'freddy lanza')\n","\n","    final = final.replace(\n","        ['helen espinoza', 'hellen', 'hellen espinoza', ], 'hellen espinoza')\n","\n","    final = final.replace(\n","        ['johana', 'johana  salgado','johana salgado', 'johanna salgado', 'yohana salgado'], 'johana salgado')\n","\n","    final = final.replace(\n","        ['juan sandobal', 'juan sandoval'], 'juan sandoval')\n","\n","    final = final.replace(\n","        ['maria jose', 'maria jose roque',\n","          'maria jose roque ', 'mariajose roque', ',maria jose roque', ], 'maria jose roque')\n","\n","    final = final.replace(\n","        ['marvin toval', 'marvin toval padilla'], 'marvin toval padilla')\n","\n","    final = final.replace(\n","        ['naideling', 'naideling vargas', 'naidelyn', 'naidelyn vargas', 'naidelyng', 'naidelyng ', 'naidelyng vargas', 'naydelin', 'naydelin varga', 'naydeling', 'naydeling varga', 'naydeling vargas', 'nayeling varga’, ‘neilyng', 'ávila vargas'\n","    ], 'naydeling vargas')\n","\n","    final = final.replace(\n","        ['nayeli roque','nayelis  roque', 'nayelis roque', 'nayelis roqur', 'nerlyn roque',\n","    ], 'nayelis roque')\n","\n","    final = final.replace(\n","        ['nerligh hernandez', 'nerling henandez', 'nerling hernandez',\n","          'nerlyn hernandez', 'nerlynh hernandez',], 'nerling hernandez')\n","\n","    final = final.replace(\n","        ['rayson membreño', 'reison membreño', 'reison membreńo',\n","          'reysom membreño', 'reyson membrecho', 'reyson membreño',\n","          'reyson membreńo', 'reyson menbreño'], 'reysom membreño')\n","\n","    final = final.replace(\n","        ['yader  morales', 'yader morales', 'yader morales ',\n","          'yadermorales', ], 'yader morales')\n","\n","    final[\"Month visited\"] = final[\"Date visited\"].dt.month\n","    final[\"Year visited\"] = final[\"Date visited\"].dt.year      \n","    return final\n","\n","\n","def clean_gps(families_coordinates):\n","    '''Making families_coordinates names identical to VL farming names'''\n","\n","    families_coordinates['Name'] = families_coordinates['Name'].str[8:].str.lower()\n","\n","    families_coordinates['Name'] = families_coordinates['Name'].str.replace('\\s{2,}', ' ')\n","    families_coordinates = families_coordinates.replace(\n","        ['rebeca sequeira'], 'rebeca carolina sequeira morales')\n","    families_coordinates = families_coordinates.replace(\n","        ['fátima castillo'], 'maría de fátima castillo')\n","    families_coordinates = families_coordinates.replace(\n","        ['yojhana cristina flores'], 'johana cristina altamirano flores')\n","    families_coordinates = families_coordinates.replace(\n","        ['karla galeano'], 'karla galiano martínez')\n","    families_coordinates = families_coordinates.replace(\n","        ['rita arevalo'], 'rita arévalo mora')\n","    families_coordinates = families_coordinates.replace(\n","        ['cristina alvares'], 'cristina alvares solís')\n","    families_coordinates = families_coordinates.replace(\n","        ['claudia arevalo'], 'claudia flavia arévalo')\n","    families_coordinates = families_coordinates.replace(\n","        ['silvia elena  moran'], 'silvia elena moran')\n","    families_coordinates = families_coordinates.replace(\n","        ['cristina avendaño'], 'maria cristina avendaño')\n","    families_coordinates = families_coordinates.replace(\n","        ['melania jacaba quiroz'], 'melania jocoba quiroz')\n","    families_coordinates = families_coordinates.replace(\n","        ['daisy ramirez'], 'maria deisy ramirez')\n","    families_coordinates = families_coordinates.replace(\n","        ['maria eugenia morales'], 'maría eugenia morales')\n","    families_coordinates = families_coordinates.replace(\n","        ['ana catalina millón'], 'ana catalina garcía millón')\n","    families_coordinates = families_coordinates.replace(\n","        ['oralia ramimez'], 'oralia ramirez')\n","    families_coordinates = families_coordinates.replace(\n","        ['roosvelt donaire'], 'roosevelt donaire')\n","\n","    return families_coordinates\n","\n","def merged_unified(farming, families_coordinates, historic_w):\n","    '''\n","    takes farming dataset, family_coordinates, historic weather\n","    '''\n","\n","    # Merge geolocation on family names\n","    geo_farm = pd.merge(farming, families_coordinates[['Name', 'apienter', 'latitude', 'longitude']], \n","                                  how=\"left\", left_on=\"Family visited\", \n","                                  right_on=\"Name\").drop(columns=['Name'])\n","\n","    # For missing locations, average longitude 12.46 and avg latitude: -86.96 are imputed                               \n","    geo_farm['apienter'].fillna('12.46%-86.96', inplace=True)\n","\n","    \n","    historic_w['date_time'] = pd.to_datetime(historic_w.date_time)\n","\n","    # Merge weather on geolocation\n","    final = pd.merge(geo_farm, historic_w,\n","                        how=\"left\", left_on=[\"Date visited\", \"apienter\"],\n","                        right_on=[\"date_time\", \"location\"])\n","    \n","    # Last column addition\n","    final[\"Month visited\"] = final[\"Date visited\"].dt.month\n","    final[\"Year visited\"] = final[\"Date visited\"].dt.year\n","    \n","    return final"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"Kg3APq1iETVU"},"source":["# this cell runs all the defined functions to clean the data\n","\n","combined_data = combined_farming(data_17_19,data_19_20)\n","combined_data = clean_farming(combined_data)\n","families_coordinates = clean_gps(families_coordinates)\n","\n","# Check Farming Dataset names against Correct Name List\n","# extra_names = [name for name in final[\"Family visited\"].unique() if name not in correct_names.iloc[:,3].unique()]\n","# extra_names.sort()\n","\n","# Check Family Coordinates names against Farming Dataset names\n","# [name for name in families_coordinates[\"Name\"].unique() if name not in final[\"Family visited\"].unique()]\n","\n","final = merged_unified(combined_data, families_coordinates, historic_w)\n","# Write to CSV\n","# final.to_csv('VL_farm_geo_w.csv')\n","# final.to_csv(\"/content/drive/MyDrive/VL_farm.csv\")\n","\n","\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vDHgBBZ-EjQP","executionInfo":{"elapsed":745,"status":"ok","timestamp":1620403599058,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"},"user_tz":420},"outputId":"fee7cb29-7ceb-4467-d520-bd45babdd83c"},"source":["import pickle \n","filename = 'finalized_model.sav'\n","pickle.dump(xgboost_model_o, open(filename, 'wb'))\n"," \n","# some time later...\n"," \n","# load the model from disk\n","loaded_model = pickle.load(open(filename, 'rb'))\n","result = loaded_model.score(X_train_over, y_train_over)\n","print(result)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["0.4317673378076063\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":409},"id":"_Kf0CJJUkmgK","executionInfo":{"elapsed":8002,"status":"error","timestamp":1620403954247,"user":{"displayName":"Ms. Eva Jean Sidlo","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhBVKz6Ck1SEElo9kfGZkC_uzeLMWXC5zHhXaZx=s64","userId":"01586958595045391758"},"user_tz":420},"outputId":"12499fe3-247a-4660-9942-8a1738dd73b8"},"source":["import pickle\n","!pip install app\n","from flask import Flask, render_template,request\n","import pickle #Initialize the flask App\n","\n","app = Flask('crop_prediction')\n","model =loaded_model\n","\n","import numpy as np\n","from flask import Flask, request, jsonify, render_template\n","import pickle\n","\n","@app.route('/predict', methods=['POST'])\n","\n","\n","# #default page of our web-app\n","# @app.route('/')\n","# def home():\n","#     return render_template('index.html')\n","\n","# #To use the predict button in our web-app\n","# @app.route('/predict',methods=['POST'])\n","\n","# def predict():\n","#     #For rendering results on HTML GUI\n","#     int_features = [float(x) for x in request.form.values()]\n","#     final_features = [np.array(int_features)]\n","#     prediction = model.predict(final_features)\n","#     output = round(prediction[0], 2) \n","#     return render_template('index.html', prediction_text='CO2    Emission of the vehicle is :{}'.format(output))\n","\n","\n","@app.route('/api',methods=['POST'])\n","def predict():\n","    # Get the data from the POST request.\n","    data = request.get_json(force=True)\n","    # Make prediction using model loaded from disk as per the data.\n","    prediction = model.predict(X_train_over, y_train_over)\n","    # Take the first value of prediction\n","    output = prediction[0]\n","    return jsonify(output)\n","if __name__ == '__main__':\n","    app.run(port=53300, debug=True)\n","# predict()"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Collecting app\n","  Downloading https://files.pythonhosted.org/packages/76/11/f386fe5dedd254167f16cca77427eeb6ac0918e344ae881bcdec8057b3d5/app-0.0.1.zip\n","Building wheels for collected packages: app\n","  Building wheel for app (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for app: filename=app-0.0.1-cp37-none-any.whl size=1518 sha256=4e759f3ba169f3f2bed78d76540d466f9852aa5c90aae249c281702a0ad5da82\n","  Stored in directory: /root/.cache/pip/wheels/9c/ab/d2/9a121974bb3f903f8d57e5fe98056d08d367e60e0c32e0f606\n","Successfully built app\n","Installing collected packages: app\n","Successfully installed app-0.0.1\n"," * Serving Flask app \"crop_prediction\" (lazy loading)\n"," * Environment: production\n","\u001b[31m   WARNING: This is a development server. Do not use it in a production deployment.\u001b[0m\n","\u001b[2m   Use a production WSGI server instead.\u001b[0m\n"," * Debug mode: on\n"],"name":"stdout"},{"output_type":"stream","text":[" * Running on http://127.0.0.1:53300/ (Press CTRL+C to quit)\n"," * Restarting with stat\n"],"name":"stderr"},{"output_type":"error","ename":"SystemExit","evalue":"ignored","traceback":["An exception has occurred, use %tb to see the full traceback.\n","\u001b[0;31mSystemExit\u001b[0m\u001b[0;31m:\u001b[0m 1\n"]},{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2890: UserWarning: To exit: use 'exit', 'quit', or Ctrl-D.\n","  warn(\"To exit: use 'exit', 'quit', or Ctrl-D.\", stacklevel=1)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"HUnyqYWHkmoV"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"ANKbYY2mkmrm"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"cuM6m_dUkmvC"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"O_BMzUSzkmxU"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"xSlGdhcekmz2"},"source":[""],"execution_count":null,"outputs":[]}]}