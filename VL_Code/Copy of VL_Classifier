{"nbformat":4,"nbformat_minor":0,"metadata":{"accelerator":"GPU","colab":{"name":"Copy of VL_Classifier","provenance":[{"file_id":"1X5xIoITpHk1ay-bF49guSu98kVm_STlO","timestamp":1617402013620}],"collapsed_sections":[],"toc_visible":true},"kernelspec":{"display_name":"Python 3","name":"python3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"t1jBkpjDT3NM"},"source":["# ViviendasLeon Classifier \n","*DataGood External Consulting*\n"]},{"cell_type":"markdown","metadata":{"id":"0KigPoVQuybM"},"source":["DataGood will use ViviendasLeon’s beneficiary farming data to build a web platform that predicts which crops should be grown. The platform will ask the user for conditions such as the season, location and fertilizer costs, and use the multiclass classifier to output the types of crops that would outperform others. \n","\n","\n","Goal: Predict the best crops to grow depending on the beneficiary’s circumstances (season, location, fertilizer costs, etc.) using a multiclass classifier. "]},{"cell_type":"markdown","metadata":{"id":"xeLO0clGw-5S"},"source":["Resources: \n","\n","* Schedule call with Elda (just add meeting to her Berkeley calendar; don't even ask)   \n","* https://towardsdatascience.com/machine-learning-multiclass-classification-with-imbalanced-data-set-29f6a177c1a \n","*   https://www.kaggle.com/mattwills8/multi-class-classification-of-iris-dataset\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"h2yibCb6Ew3U"},"source":["## ✏️ Data Preparation"]},{"cell_type":"markdown","metadata":{"id":"0nQONvFYvRKR"},"source":["Leads: Lauren & Kelly"]},{"cell_type":"markdown","metadata":{"id":"7jpwSYoNFBi4"},"source":["### Import Libraries"]},{"cell_type":"code","metadata":{"id":"T52YEBZGPYYZ","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1619206938156,"user_tz":420,"elapsed":1477,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"00177d1e-1492-4b75-acf7-509c15eb5bd5"},"source":["import pandas as pd\n","import numpy as np\n","from google.colab import (drive, files)\n","from datetime import datetime, timedelta\n","import os\n","import matplotlib.pyplot as plt\n","import seaborn as sns\n","\n","from sklearn.model_selection import train_test_split\n","from sklearn.pipeline import Pipeline\n","from sklearn.compose import ColumnTransformer\n","from sklearn.preprocessing import StandardScaler, LabelEncoder, OneHotEncoder\n","from sklearn.feature_extraction.text import CountVectorizer\n","from sklearn.experimental import enable_iterative_imputer\n","from sklearn.impute import IterativeImputer, SimpleImputer\n","from sklearn.linear_model import LogisticRegression, LogisticRegressionCV\n","from sklearn.metrics import classification_report, roc_auc_score, roc_curve, accuracy_score, confusion_matrix\n","from sklearn.ensemble import RandomForestClassifier\n","\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import RepeatedStratifiedKFold\n","from sklearn.decomposition import PCA\n","from sklearn.linear_model import LogisticRegression\n","from matplotlib import pyplot\n","\n","from xgboost import XGBClassifier\n","\n","from imblearn.over_sampling import SMOTE"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/externals/six.py:31: FutureWarning: The module is deprecated in version 0.21 and will be removed in version 0.23 since we've dropped support for Python 2.7. Please rely on the official version of six (https://pypi.org/project/six/).\n","  \"(https://pypi.org/project/six/).\", FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/utils/deprecation.py:144: FutureWarning: The sklearn.neighbors.base module is  deprecated in version 0.22 and will be removed in version 0.24. The corresponding classes / functions should instead be imported from sklearn.neighbors. Anything that cannot be imported from sklearn.neighbors is now part of the private API.\n","  warnings.warn(message, FutureWarning)\n"],"name":"stderr"}]},{"cell_type":"code","metadata":{"id":"7yhTLQhxPadf"},"source":["# connect to the drive\n","#drive.mount('/content/gdrive', force_remount=True)\n","#path = \"/content/gdrive\"\n","#os.chdir(path)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"0UxZCMw6Pjuo"},"source":["## choose appropriate path and uncomment below\n","\n","#filepath = 'MyDrive/ViviendasLeon/VL_Code'\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C9F24gCFpH-z","executionInfo":{"status":"ok","timestamp":1619206955804,"user_tz":420,"elapsed":19099,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"169aaa85-5a0d-40db-bcfa-c1db605775b6"},"source":["drive.mount('/content/drive/')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive/\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"1M6upY_2g5i4"},"source":["### Read the Data\n","\n","Files used for this Classifier:\n","\n","- vl_2017to19.xlsx *from farming data folder* : Viviendas Leon visit data 2017 - 2019. Combine with vl_2019to20.xlsx for full dataset\n","\n","- vl_2019to20.xlsxz *from farming data folder* : Viviendas Leon visit data 2019 - 2020\n","\n","- 210304_Full Participant List Farming Program 2017-2021.xlsx *from farming data folder* : List of corrected family names.\n","\n","- vl_historical_data.csv *from geo data folder*: 2017 - 2021 Weather Data for GPS locations to 2 decimal precision \n","\n","- family_coordinates_api.csv *located in geo data golder* : List of VL family names and api coordinates. Mergess Viviendas Leon visit data with historical weather data\n"]},{"cell_type":"code","metadata":{"id":"qT1bvi7eo1SC"},"source":["# Add farming data, weather data, geo data\n","# Kelly \n","\n","# dropped last three rows (just empty)\n","correct_names = pd.read_excel(\"/content/drive/MyDrive/210304_Full Participant List Farming Program 2017-2021.xlsx\").drop([51,52,53], axis=0)\n","correct_names.columns = correct_names.loc[0,:]\n","correct_names = correct_names.drop([0], axis=0)\n","\n","# load data\n","data_17_19 = pd.read_excel(\"/content/drive/MyDrive/VL Huertos Familiares- Hoja de Datos (2017-2019).xlsx\")\n","data_19_20 = pd.read_excel(\"/content/drive/MyDrive/VL Huertos Familiares- Hoja de Datos (2019-2020).xlsx\")\n","\n","# Lauren\n","historic_w = pd.read_csv('/content/drive/MyDrive/vl_historical_data.csv')\n","families_coordinates = pd.read_csv('/content/drive/MyDrive/family_coordinates_api.csv')"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"WA4H4c6ptQiI"},"source":["### Clean and Restructure Data for Modelling"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":168},"id":"EXAd4MM5tP_k","executionInfo":{"status":"ok","timestamp":1619206959415,"user_tz":420,"elapsed":22691,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"552bb119-24fa-4deb-f51c-99d4bcdc75ec"},"source":["# Kelly\n","\n","# drop empty column\n","data_17_19 = data_17_19.drop(\"Unnamed: 10\", axis=1)\n","\n","translated_cols = ['Date visited','Auditor','Region','Community','Family visited','Present?',\n","                      'Fruit','Fruit_Condition (seedling or transplanted)', 'Fruit_% Disease','Fruit_Condition',\n","                      'Fruit_Plague','Fruit_Organic recommendation','Fruit_Chemical recommendation',\n","                      'Vegetables','Veg_Condition (seedling or transplanted)','Veg_% Disease','Veg_Condition',\n","                      'Veg_Plague','Veg_Organic recommendation','Veg_Chemical recommendation',\n","                      'Legumes and seeds','LnS_Condition (seedling or transplanted)','LnS_% Disease',\n","                      'LnS_Condition','LnS_Plague','LnS_Organic recommendation','LnS_Chemical recommendation',\n","                      'Grasses','Grasses_Condition (seedling or transplanted)','Grasses_% Disease',\n","                      'Grasses_Condition','Grasses_Plague','Grasses_Organic recommendation',\n","                      'Grasses_Chemical recommendation',\n","                      'Commentaries, additional remarks','Response, commentary follow up']\n","# rename columns \n","data_17_19.columns = translated_cols\n","data_19_20.columns = translated_cols\n","\n","# drop first 3 rows (headings of table names)\n","data_17_19 = data_17_19.drop([0, 1, 2], axis=0)                     \n","data_19_20 = data_19_20.drop([0, 1, 2], axis=0)            \n","\n","# appending 2019-2020 to the bottom of 2017-2019 data\n","combined_data = data_17_19.append(data_19_20)\n","\n","# fill NaN with 0s\n","combined_data = combined_data.fillna(0)\n","\n","\n","# further cleaning\n","combined_data[\"Month visited\"] = combined_data[\"Date visited\"].dt.month\n","combined_data[\"Year visited\"] = combined_data[\"Date visited\"].dt.year\n","combined_data[\"Veg_% Disease\"] = combined_data[\"Veg_% Disease\"].replace(['35 %', ';4', ' '], [35, 4, 0])\n","combined_data[\"Fruit\"] = combined_data[\"Fruit\"].replace(['Piña', 'piña'], 'Pina')\n","combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace(\"Pipián\", \"Pipian\")\n","combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace(\"I\", \"None\")\n","combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace([\"Frijol Rojo\", \"Frijoles rojo\"], \"Frijol rojo\")\n","combined_data[\"Legumes and seeds\"] = combined_data[\"Legumes and seeds\"].replace([\"Frijoles blanco\", \"Frijol blanco\"])\n","\n","# replace with corrected names\n","combined_data = combined_data.replace(correct_names.iloc[:,3].values, correct_names.iloc[:,4].values)\n","\n","# structure data so that one row is one observation \n","overall_info = combined_data.iloc[:,:6]\n","fruit = combined_data.iloc[:,6:13]\n","veg = combined_data.iloc[:,13:20]\n","lns = combined_data.iloc[:,20:27]\n","grasses = combined_data.iloc[:,27:34]\n","\n","crops = [fruit, veg, lns, grasses]\n","crops_0 = []\n","new_col_names = ['Date visited','Auditor','Region','Community','Family visited','Present?',\n","                      'Crop','Seedling_or_transplanted', '% Disease','Condition',\n","                      'Plague','Organic recommendation','Chemical recommendation']\n","\n","for table in crops:\n","  temp = pd.concat([overall_info, table], axis=1)\n","  temp.columns = new_col_names\n","  crops_0.append(temp)\n","\n","final = crops_0[0]\n","for table in crops_0[1:]:\n","  final = pd.concat([final, table], axis=0)\n","\n","final.head(1)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date visited</th>\n","      <th>Auditor</th>\n","      <th>Region</th>\n","      <th>Community</th>\n","      <th>Family visited</th>\n","      <th>Present?</th>\n","      <th>Crop</th>\n","      <th>Seedling_or_transplanted</th>\n","      <th>% Disease</th>\n","      <th>Condition</th>\n","      <th>Plague</th>\n","      <th>Organic recommendation</th>\n","      <th>Chemical recommendation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 2</td>\n","      <td>Ana Catalina García Millón</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>Transplantado</td>\n","      <td>1</td>\n","      <td>Bueno</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Date visited        Auditor  ... Organic recommendation Chemical recommendation\n","3   2017-11-06  Lesbia/Camilo  ...                      0                       0\n","\n","[1 rows x 13 columns]"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"G1vTFy1vmpKs"},"source":["# Lauren\n","\n","#Removing empty observations\n","final = final[final['Crop']!=0]\n","\n","# Cleaning names column\n","\n","final['Family visited'] = final['Family visited'].str.lower()\n","\n","final = final.replace(\n","    ['arelis', 'arelis  solis', 'arelis solis',\n","       'arelis soliz', 'areliz solis', 'arlelis solis'], 'arelis solis')\n","\n","final = final.replace(\n","    ['freddy', 'freddy lanza', 'freddy lanzas',\n","       'freddy lasza', 'freddys campo', 'fredi ', 'fredis ',\n","       'fredis lanza', 'fredy lanzas', 'fredys'], 'freddy lanza')\n","\n","final = final.replace(\n","    ['helen espinoza', 'hellen', 'hellen espinoza', ], 'hellen espinoza')\n","\n","final = final.replace(\n","    ['johana', 'johana  salgado','johana salgado', 'johanna salgado', 'yohana salgado'], 'johana salgado')\n","\n","final = final.replace(\n","    ['juan sandobal', 'juan sandoval'], 'juan sandoval')\n","\n","final = final.replace(\n","    ['maria jose', 'maria jose roque',\n","       'maria jose roque ', 'mariajose roque', ',maria jose roque', ], 'maria jose roque')\n","\n","final = final.replace(\n","    ['marvin toval', 'marvin toval padilla'], 'marvin toval padilla')\n","\n","final = final.replace(\n","    ['naideling', 'naideling vargas', 'naidelyn', 'naidelyn vargas', 'naidelyng', 'naidelyng ', 'naidelyng vargas', 'naydelin', 'naydelin varga', 'naydeling', 'naydeling varga', 'naydeling vargas', 'nayeling varga’, ‘neilyng', 'ávila vargas'\n","], 'naydeling vargas')\n","\n","final = final.replace(\n","    ['nayeli roque','nayelis  roque', 'nayelis roque', 'nayelis roqur', 'nerlyn roque',\n","], 'nayelis roque')\n","\n","final = final.replace(\n","    ['nerligh hernandez', 'nerling henandez', 'nerling hernandez',\n","       'nerlyn hernandez', 'nerlynh hernandez',], 'nerling hernandez')\n","\n","final = final.replace(\n","    ['rayson membreño', 'reison membreño', 'reison membreńo',\n","       'reysom membreño', 'reyson membrecho', 'reyson membreño',\n","       'reyson membreńo', 'reyson menbreño'], 'reysom membreño')\n","\n","final = final.replace(\n","    ['yader  morales', 'yader morales', 'yader morales ',\n","       'yadermorales', ], 'yader morales')\n","\n","# Fix crop mispellings\n","final = final.replace(\n","    [\"Verenjena\", \"Verengena\", \"verenjena\", \"verengena\", \"Verngena\"], \"Berenjena\")\n","final = final.replace(\n","    [\"Chile..\"], \"Chile\")\n","final = final.replace(\n","    [\"zanahoria\"], \"Zanahoria\")\n","final = final.replace(\n","    [\"Calabasa\"], \"Calabaza\")\n","final = final[final[\"Crop\"] != \"None\"]\n","    \n","# Check duplicates\n","# final_names = [name for name in final[\"Family visited\"].unique() if name not in correct_names.iloc[:,3].unique()]\n","# final_names.sort()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"K1ZnjftB0-jb"},"source":["final[\"Month visited\"] = final[\"Date visited\"].dt.month\n","final[\"Year visited\"] = final[\"Date visited\"].dt.year"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":80},"id":"EEo-ut8BH0rf","executionInfo":{"status":"ok","timestamp":1619206959419,"user_tz":420,"elapsed":22672,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"db8b400f-173d-45a6-abeb-5b3a429c3863"},"source":["# Making families_coordinates names identical to VL farming names\n","families_coordinates = pd.read_csv('/content/drive/MyDrive/family_coordinates_api.csv')\n","families_coordinates['Name'] = families_coordinates['Name'].str[8:].str.lower()\n","\n","families_coordinates['Name'] = families_coordinates['Name'].str.replace('\\s{2,}', ' ')\n","families_coordinates = families_coordinates.replace(\n","    ['rebeca sequeira'], 'rebeca carolina sequeira morales')\n","families_coordinates = families_coordinates.replace(\n","    ['fátima castillo'], 'maría de fátima castillo')\n","families_coordinates = families_coordinates.replace(\n","    ['yojhana cristina flores'], 'johana cristina altamirano flores')\n","families_coordinates = families_coordinates.replace(\n","    ['karla galeano'], 'karla galiano martínez')\n","families_coordinates = families_coordinates.replace(\n","    ['rita arevalo'], 'rita arévalo mora')\n","families_coordinates = families_coordinates.replace(\n","    ['cristina alvares'], 'cristina alvares solís')\n","families_coordinates = families_coordinates.replace(\n","    ['claudia arevalo'], 'claudia flavia arévalo')\n","families_coordinates = families_coordinates.replace(\n","    ['silvia elena  moran'], 'silvia elena moran')\n","families_coordinates = families_coordinates.replace(\n","    ['cristina avendaño'], 'maria cristina avendaño')\n","families_coordinates = families_coordinates.replace(\n","    ['melania jacaba quiroz'], 'melania jocoba quiroz')\n","families_coordinates = families_coordinates.replace(\n","    ['daisy ramirez'], 'maria deisy ramirez')\n","families_coordinates = families_coordinates.replace(\n","    ['maria eugenia morales'], 'maría eugenia morales')\n","families_coordinates = families_coordinates.replace(\n","    ['ana catalina millón'], 'ana catalina garcía millón')\n","families_coordinates = families_coordinates.replace(\n","    ['oralia ramimez'], 'oralia ramirez')\n","families_coordinates = families_coordinates.replace(\n","    ['roosvelt donaire'], 'roosevelt donaire')\n","\n","# Check discrepancies\n","# [name for name in families_coordinates[\"Name\"].unique() if name not in final[\"Family visited\"].unique()]\n","\n","families_coordinates.head(1)\n","# families_coordinates.describe()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>latitude</th>\n","      <th>longitude</th>\n","      <th>apienter</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>rebeca carolina sequeira morales</td>\n","      <td>12.46</td>\n","      <td>-86.95</td>\n","      <td>12.46%-86.95</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                               Name  latitude  longitude      apienter\n","0  rebeca carolina sequeira morales     12.46     -86.95  12.46%-86.95"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"markdown","metadata":{"id":"I5khI1yHTbHx"},"source":["#### Merging Unified Datatable "]},{"cell_type":"code","metadata":{"id":"NBbls8QOSwLP"},"source":["# Combine datasets to fit the goal\n","\n","# Merge geolocation on family names\n","final = pd.merge(final, families_coordinates[['Name', 'apienter']], \n","                              how=\"left\", left_on=\"Family visited\", \n","                              right_on=\"Name\").drop(columns=['Name'])\n","\n","# For missing locations, average longitude 12.46 and avg latitude: -86.96 are imputed                               \n","final['apienter'].fillna('12.46%-86.96', inplace=True)\n","\n","# Merge weather on geolocation\n","historic_w['date_time'] = pd.to_datetime(historic_w.date_time)\n","\n","final = pd.merge(final, historic_w,\n","                     how=\"left\", left_on=[\"Date visited\", \"apienter\"],\n","                     right_on=[\"date_time\", \"location\"])\n","\n","# Write ffinal\n","final.to_csv('VL_farm_geo_w.csv', index=False)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2kVIXIApT2AH"},"source":["### Data Preview\n","\n","Looking at ordinal variable Crop Condition and % Illness"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"rBd7cl5VwB8c","executionInfo":{"status":"ok","timestamp":1619206959654,"user_tz":420,"elapsed":22890,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"79a09a4b-fa41-4f13-eaaf-d4aca924d42e"},"source":["final.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Date visited                datetime64[ns]\n","Auditor                             object\n","Region                              object\n","Community                           object\n","Family visited                      object\n","Present?                            object\n","Crop                                object\n","Seedling_or_transplanted            object\n","% Disease                            int64\n","Condition                           object\n","Plague                              object\n","Organic recommendation              object\n","Chemical recommendation             object\n","Month visited                        int64\n","Year visited                         int64\n","apienter                            object\n","date_time                   datetime64[ns]\n","maxtempC                             int64\n","mintempC                             int64\n","totalSnow_cm                       float64\n","sunHour                            float64\n","uvIndex                              int64\n","moon_illumination                    int64\n","moonrise                            object\n","moonset                             object\n","sunrise                             object\n","sunset                              object\n","DewPointC                            int64\n","FeelsLikeC                           int64\n","HeatIndexC                           int64\n","WindChillC                           int64\n","WindGustKmph                         int64\n","cloudcover                           int64\n","humidity                             int64\n","precipMM                           float64\n","pressure                             int64\n","tempC                                int64\n","visibility                           int64\n","winddirDegree                        int64\n","windspeedKmph                        int64\n","location                            object\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"Y9x0Ywn7e70q"},"source":["# distribution of target variables in crops condition and lack of illness\n","# Excelente Excellent\n","# Excel Excellent\n","# Bueno Good\n","# Promedio Average\n","# Pobre Poor\n","# Crisopa ??"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":321},"id":"YFOt8poXfWZG","executionInfo":{"status":"ok","timestamp":1619206959825,"user_tz":420,"elapsed":23044,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"97de5e28-aa28-4c1a-9068-3a4c1ec44057"},"source":["final['Condition'].value_counts().plot(kind='bar')"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f3bb31ad9d0>"]},"metadata":{"tags":[]},"execution_count":13},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":334},"id":"E-xPxl5V1U-E","executionInfo":{"status":"ok","timestamp":1619206960673,"user_tz":420,"elapsed":23880,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"fc968157-ad70-4196-d59b-2b8d71ef57d7"},"source":["plt.figure(figsize=(10,5))\n","\n","dsh = sns.lineplot(x=\"Month visited\", y=\"% Disease\"\n","             ,data=final)"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 720x360 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"648bdYLJ0vmJ","executionInfo":{"status":"ok","timestamp":1619206960674,"user_tz":420,"elapsed":23871,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"2a66bccf-2e45-4f00-b6f1-04ab4400e01c"},"source":["final.dtypes"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Date visited                datetime64[ns]\n","Auditor                             object\n","Region                              object\n","Community                           object\n","Family visited                      object\n","Present?                            object\n","Crop                                object\n","Seedling_or_transplanted            object\n","% Disease                            int64\n","Condition                           object\n","Plague                              object\n","Organic recommendation              object\n","Chemical recommendation             object\n","Month visited                        int64\n","Year visited                         int64\n","apienter                            object\n","date_time                   datetime64[ns]\n","maxtempC                             int64\n","mintempC                             int64\n","totalSnow_cm                       float64\n","sunHour                            float64\n","uvIndex                              int64\n","moon_illumination                    int64\n","moonrise                            object\n","moonset                             object\n","sunrise                             object\n","sunset                              object\n","DewPointC                            int64\n","FeelsLikeC                           int64\n","HeatIndexC                           int64\n","WindChillC                           int64\n","WindGustKmph                         int64\n","cloudcover                           int64\n","humidity                             int64\n","precipMM                           float64\n","pressure                             int64\n","tempC                                int64\n","visibility                           int64\n","winddirDegree                        int64\n","windspeedKmph                        int64\n","location                            object\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"id":"8SNoVbci0CkV"},"source":[" import pandas as pd\n","import numpy as np\n","import seaborn as sns\n","import matplotlib.pyplot as plt"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":411},"id":"UKdQtDzQCDs0","executionInfo":{"status":"ok","timestamp":1619206961017,"user_tz":420,"elapsed":24197,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"a9031bf3-5d55-4df4-94a3-9e2e3bc9239f"},"source":["final.to_csv(\"/content/drive/MyDrive/VL_farm.csv\")\n","final.head()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Date visited</th>\n","      <th>Auditor</th>\n","      <th>Region</th>\n","      <th>Community</th>\n","      <th>Family visited</th>\n","      <th>Present?</th>\n","      <th>Crop</th>\n","      <th>Seedling_or_transplanted</th>\n","      <th>% Disease</th>\n","      <th>Condition</th>\n","      <th>Plague</th>\n","      <th>Organic recommendation</th>\n","      <th>Chemical recommendation</th>\n","      <th>Month visited</th>\n","      <th>Year visited</th>\n","      <th>apienter</th>\n","      <th>date_time</th>\n","      <th>maxtempC</th>\n","      <th>mintempC</th>\n","      <th>totalSnow_cm</th>\n","      <th>sunHour</th>\n","      <th>uvIndex</th>\n","      <th>moon_illumination</th>\n","      <th>moonrise</th>\n","      <th>moonset</th>\n","      <th>sunrise</th>\n","      <th>sunset</th>\n","      <th>DewPointC</th>\n","      <th>FeelsLikeC</th>\n","      <th>HeatIndexC</th>\n","      <th>WindChillC</th>\n","      <th>WindGustKmph</th>\n","      <th>cloudcover</th>\n","      <th>humidity</th>\n","      <th>precipMM</th>\n","      <th>pressure</th>\n","      <th>tempC</th>\n","      <th>visibility</th>\n","      <th>winddirDegree</th>\n","      <th>windspeedKmph</th>\n","      <th>location</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 2</td>\n","      <td>ana catalina garcía millón</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>Transplantado</td>\n","      <td>1</td>\n","      <td>Bueno</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.44%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.44%-87.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>claudia flavia arévalo</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>Transplantado</td>\n","      <td>3</td>\n","      <td>Bueno</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>Transplantado</td>\n","      <td>2</td>\n","      <td>Bueno</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>Transplantado</td>\n","      <td>2</td>\n","      <td>Bueno</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Cacique Adiac</td>\n","      <td>exania estrada</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>Transplantado</td>\n","      <td>2</td>\n","      <td>Bueno</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.46%-87.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Date visited        Auditor  ... windspeedKmph     location\n","0   2017-11-06  Lesbia/Camilo  ...             5  12.44%-87.0\n","1   2017-11-06  Lesbia/Camilo  ...             5  12.45%-87.0\n","2   2017-11-06  Lesbia/Camilo  ...             5  12.45%-87.0\n","3   2017-11-06  Lesbia/Camilo  ...             5  12.45%-87.0\n","4   2017-11-06  Lesbia/Camilo  ...             5  12.46%-87.0\n","\n","[5 rows x 41 columns]"]},"metadata":{"tags":[]},"execution_count":17}]},{"cell_type":"code","metadata":{"id":"PZc9XxpEhw9R"},"source":["#other relevant visuals (one or two)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"BomMpv54W3Na"},"source":["## ⚙️ Feature Engineering\n","\n"]},{"cell_type":"markdown","metadata":{"id":"2ywI0CTmwDQk"},"source":["Leads: Katie & Eva"]},{"cell_type":"markdown","metadata":{"id":"PYDJvLxzf4d8"},"source":["### Fix Data Types"]},{"cell_type":"code","metadata":{"id":"_L5y-Iy5fp8j"},"source":["#if necessary \n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"v4redP-5986o"},"source":["### Missing Values"]},{"cell_type":"code","metadata":{"id":"v_orUbwAc3nc"},"source":["#describe best way to impute/remove missing values and write a function for it (Kelly and Lauren might have already done this)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"kt7EQ4JjAY2e"},"source":["### Drop Unnecessary Columns"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":728},"id":"UDY0H-ga_dCe","executionInfo":{"status":"ok","timestamp":1619206961359,"user_tz":420,"elapsed":24510,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"e752d2e2-53a5-470d-aa70-ae579ca9a627"},"source":["#determine which variables are not relevant for the model (using correlations, interview with staff, etc)\n","df = pd.read_csv('/content/drive/MyDrive/VL_farm.csv') # read Kelly and Lauren's updated data\n","\n","def season(month):\n","    if month == 12 or month == 1 or month == 2:\n","        return \"Winter\"\n","    elif month == 3 or month == 4 or month == 5:\n","        return \"Spring\"\n","    elif month == 6 or month == 7 or month == 8:\n","        return \"Summer\"\n","    elif month == 9 or month == 10 or month == 11:\n","        return \"Fall\"\n","df[\"Season visited\"] = df[\"Month visited\"].apply(season)\n","\n","\n","df['Condition'] = df['Condition'].replace(['Excel'], 'Excelente')\n","df['Condition'] = df['Condition'].replace(['Excelente'], \"excellent_cond\")\n","df['Condition'] = df['Condition'].replace(['Promedio'], 'average_cond')\n","df['Condition'] = df['Condition'].replace(['Bueno'], 'good_cond')\n","df['Condition'] = df['Condition'].replace(['Pobre'], 'poor_cond')\n","df['Condition'] = df['Condition'].replace(['crisopa'], 'bad?_cond')\n","\n","df['Condition'] = df['Condition'].replace([0], 'N/A_cond')\n","df['Seedling_or_transplanted'].unique()\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Almácigo'], 'seedling')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Transplantado'], 'transplanted')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Sin germinar'], 'transplanted')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Fructificacion'], 'fruitification')\n","df['Seedling_or_transplanted'] = df['Seedling_or_transplanted'].replace(['Produccion'], 'production')\n","df\n","\n","#drop rows with unsual values \n","df = df[df.Condition != 'bad?_cond']\n","df = df[df['Seedling_or_transplanted'] != 'fruitification']\n","df = df[df['Seedling_or_transplanted'] != 'production']\n","\n","\n","df\n","# 'Bueno'== good, '0'== null, 'Promedio'==average, 'Excelente'==excellent, 'Pobre'==poor, 'Excel', 'crisopa'"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Unnamed: 0</th>\n","      <th>Date visited</th>\n","      <th>Auditor</th>\n","      <th>Region</th>\n","      <th>Community</th>\n","      <th>Family visited</th>\n","      <th>Present?</th>\n","      <th>Crop</th>\n","      <th>Seedling_or_transplanted</th>\n","      <th>% Disease</th>\n","      <th>Condition</th>\n","      <th>Plague</th>\n","      <th>Organic recommendation</th>\n","      <th>Chemical recommendation</th>\n","      <th>Month visited</th>\n","      <th>Year visited</th>\n","      <th>apienter</th>\n","      <th>date_time</th>\n","      <th>maxtempC</th>\n","      <th>mintempC</th>\n","      <th>totalSnow_cm</th>\n","      <th>sunHour</th>\n","      <th>uvIndex</th>\n","      <th>moon_illumination</th>\n","      <th>moonrise</th>\n","      <th>moonset</th>\n","      <th>sunrise</th>\n","      <th>sunset</th>\n","      <th>DewPointC</th>\n","      <th>FeelsLikeC</th>\n","      <th>HeatIndexC</th>\n","      <th>WindChillC</th>\n","      <th>WindGustKmph</th>\n","      <th>cloudcover</th>\n","      <th>humidity</th>\n","      <th>precipMM</th>\n","      <th>pressure</th>\n","      <th>tempC</th>\n","      <th>visibility</th>\n","      <th>winddirDegree</th>\n","      <th>windspeedKmph</th>\n","      <th>location</th>\n","      <th>Season visited</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 2</td>\n","      <td>ana catalina garcía millón</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>1</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.44%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.44%-87.0</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>claudia flavia arévalo</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>3</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>cristina alvares solís</td>\n","      <td>Si</td>\n","      <td>Calala</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.45%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.45%-87.0</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>2017-11-06</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Cacique Adiac</td>\n","      <td>exania estrada</td>\n","      <td>Si</td>\n","      <td>Papaya</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2017</td>\n","      <td>12.46%-87.0</td>\n","      <td>2017-11-06</td>\n","      <td>31</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>11.6</td>\n","      <td>6</td>\n","      <td>76</td>\n","      <td>08:02 PM</td>\n","      <td>08:06 AM</td>\n","      <td>05:43 AM</td>\n","      <td>05:21 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>18</td>\n","      <td>82</td>\n","      <td>5.3</td>\n","      <td>1013</td>\n","      <td>31</td>\n","      <td>9</td>\n","      <td>105</td>\n","      <td>5</td>\n","      <td>12.46%-87.0</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>6741</th>\n","      <td>6741</td>\n","      <td>2020-10-13</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Goyena</td>\n","      <td>Aristides Sanchez</td>\n","      <td>roosevelt donaire</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>excellent_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.48%-86.95</td>\n","      <td>2020-10-13</td>\n","      <td>31</td>\n","      <td>24</td>\n","      <td>0.0</td>\n","      <td>8.8</td>\n","      <td>6</td>\n","      <td>16</td>\n","      <td>02:28 AM</td>\n","      <td>03:20 PM</td>\n","      <td>05:38 AM</td>\n","      <td>05:30 PM</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>10</td>\n","      <td>41</td>\n","      <td>86</td>\n","      <td>23.7</td>\n","      <td>1010</td>\n","      <td>31</td>\n","      <td>8</td>\n","      <td>203</td>\n","      <td>6</td>\n","      <td>12.48%-86.95</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>6742</th>\n","      <td>6742</td>\n","      <td>2020-10-15</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Troilo</td>\n","      <td>arelis solis</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>excellent_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.46%-86.96</td>\n","      <td>2020-10-15</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>10.2</td>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>04:26 AM</td>\n","      <td>04:55 PM</td>\n","      <td>05:38 AM</td>\n","      <td>05:29 PM</td>\n","      <td>23</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>8</td>\n","      <td>48</td>\n","      <td>85</td>\n","      <td>11.9</td>\n","      <td>1009</td>\n","      <td>30</td>\n","      <td>9</td>\n","      <td>91</td>\n","      <td>5</td>\n","      <td>12.46%-86.96</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>6743</th>\n","      <td>6743</td>\n","      <td>2020-10-19</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Troilo</td>\n","      <td>Ceiba 1</td>\n","      <td>karla galiano martínez</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>excellent_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.46%-87.0</td>\n","      <td>2020-10-19</td>\n","      <td>30</td>\n","      <td>24</td>\n","      <td>0.0</td>\n","      <td>7.4</td>\n","      <td>6</td>\n","      <td>13</td>\n","      <td>08:30 AM</td>\n","      <td>08:18 PM</td>\n","      <td>05:39 AM</td>\n","      <td>05:27 PM</td>\n","      <td>24</td>\n","      <td>30</td>\n","      <td>30</td>\n","      <td>26</td>\n","      <td>9</td>\n","      <td>71</td>\n","      <td>87</td>\n","      <td>12.8</td>\n","      <td>1009</td>\n","      <td>30</td>\n","      <td>9</td>\n","      <td>137</td>\n","      <td>5</td>\n","      <td>12.46%-87.0</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>6744</th>\n","      <td>6744</td>\n","      <td>2020-10-20</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Goyena</td>\n","      <td>Aristides Sanchez</td>\n","      <td>roosevelt donaire</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>2</td>\n","      <td>good_cond</td>\n","      <td>Deafania</td>\n","      <td>Hojas de chile</td>\n","      <td>0</td>\n","      <td>10</td>\n","      <td>2020</td>\n","      <td>12.48%-86.95</td>\n","      <td>2020-10-20</td>\n","      <td>27</td>\n","      <td>24</td>\n","      <td>0.0</td>\n","      <td>5.9</td>\n","      <td>6</td>\n","      <td>20</td>\n","      <td>09:33 AM</td>\n","      <td>09:16 PM</td>\n","      <td>05:39 AM</td>\n","      <td>05:27 PM</td>\n","      <td>23</td>\n","      <td>27</td>\n","      <td>27</td>\n","      <td>25</td>\n","      <td>6</td>\n","      <td>73</td>\n","      <td>91</td>\n","      <td>19.1</td>\n","      <td>1009</td>\n","      <td>27</td>\n","      <td>9</td>\n","      <td>187</td>\n","      <td>4</td>\n","      <td>12.48%-86.95</td>\n","      <td>Fall</td>\n","    </tr>\n","    <tr>\n","      <th>6745</th>\n","      <td>6745</td>\n","      <td>2020-11-24</td>\n","      <td>Lesbia/Camilo</td>\n","      <td>Goyena</td>\n","      <td>Aristides Sanchez</td>\n","      <td>roosevelt donaire</td>\n","      <td>Si</td>\n","      <td>Maiz</td>\n","      <td>transplanted</td>\n","      <td>0</td>\n","      <td>good_cond</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>2020</td>\n","      <td>12.48%-86.95</td>\n","      <td>2020-11-24</td>\n","      <td>30</td>\n","      <td>23</td>\n","      <td>0.0</td>\n","      <td>10.2</td>\n","      <td>6</td>\n","      <td>62</td>\n","      <td>01:52 PM</td>\n","      <td>01:21 AM</td>\n","      <td>05:50 AM</td>\n","      <td>05:19 PM</td>\n","      <td>23</td>\n","      <td>29</td>\n","      <td>29</td>\n","      <td>26</td>\n","      <td>8</td>\n","      <td>55</td>\n","      <td>87</td>\n","      <td>6.8</td>\n","      <td>1012</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>89</td>\n","      <td>5</td>\n","      <td>12.48%-86.95</td>\n","      <td>Fall</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>6740 rows × 43 columns</p>\n","</div>"],"text/plain":["      Unnamed: 0 Date visited  ...      location Season visited\n","0              0   2017-11-06  ...   12.44%-87.0           Fall\n","1              1   2017-11-06  ...   12.45%-87.0           Fall\n","2              2   2017-11-06  ...   12.45%-87.0           Fall\n","3              3   2017-11-06  ...   12.45%-87.0           Fall\n","4              4   2017-11-06  ...   12.46%-87.0           Fall\n","...          ...          ...  ...           ...            ...\n","6741        6741   2020-10-13  ...  12.48%-86.95           Fall\n","6742        6742   2020-10-15  ...  12.46%-86.96           Fall\n","6743        6743   2020-10-19  ...   12.46%-87.0           Fall\n","6744        6744   2020-10-20  ...  12.48%-86.95           Fall\n","6745        6745   2020-11-24  ...  12.48%-86.95           Fall\n","\n","[6740 rows x 43 columns]"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"markdown","metadata":{"id":"ntbL7Vo2tleX"},"source":["### Add Additional Variables"]},{"cell_type":"code","metadata":{"id":"KgNRst3AtqpT"},"source":["#engineer additional features "],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"wgHfmpdUzUtj","executionInfo":{"status":"ok","timestamp":1619206961360,"user_tz":420,"elapsed":24495,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"8ed54cfc-9c85-4071-f619-7fff6db41df3"},"source":["# Regions and crops\n","df1 = df[['Region', 'Crop']]\n","df1.groupby(['Crop']).count()"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Region</th>\n","    </tr>\n","    <tr>\n","      <th>Crop</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Ayote</th>\n","      <td>331</td>\n","    </tr>\n","    <tr>\n","      <th>Berenjena</th>\n","      <td>25</td>\n","    </tr>\n","    <tr>\n","      <th>Calabaza</th>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Calala</th>\n","      <td>100</td>\n","    </tr>\n","    <tr>\n","      <th>Camote</th>\n","      <td>28</td>\n","    </tr>\n","    <tr>\n","      <th>Caña</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Caña de azucar</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Cebolla</th>\n","      <td>284</td>\n","    </tr>\n","    <tr>\n","      <th>Chile</th>\n","      <td>34</td>\n","    </tr>\n","    <tr>\n","      <th>Chile jalapeño</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Chiltoma</th>\n","      <td>1320</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol alacin</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol de vara</th>\n","      <td>662</td>\n","    </tr>\n","    <tr>\n","      <th>Frijol rojo</th>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>Granadilla</th>\n","      <td>13</td>\n","    </tr>\n","    <tr>\n","      <th>Guayaba</th>\n","      <td>65</td>\n","    </tr>\n","    <tr>\n","      <th>Jamaica</th>\n","      <td>18</td>\n","    </tr>\n","    <tr>\n","      <th>Maiz</th>\n","      <td>276</td>\n","    </tr>\n","    <tr>\n","      <th>Melon</th>\n","      <td>161</td>\n","    </tr>\n","    <tr>\n","      <th>Papaya</th>\n","      <td>670</td>\n","    </tr>\n","    <tr>\n","      <th>Pepino</th>\n","      <td>278</td>\n","    </tr>\n","    <tr>\n","      <th>Pina</th>\n","      <td>42</td>\n","    </tr>\n","    <tr>\n","      <th>Pipian</th>\n","      <td>343</td>\n","    </tr>\n","    <tr>\n","      <th>Plátano</th>\n","      <td>600</td>\n","    </tr>\n","    <tr>\n","      <th>Rabano</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>Remolacha</th>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>Repollo</th>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Rábano</th>\n","      <td>15</td>\n","    </tr>\n","    <tr>\n","      <th>Sandia</th>\n","      <td>208</td>\n","    </tr>\n","    <tr>\n","      <th>Sandia y melon</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Tomate</th>\n","      <td>775</td>\n","    </tr>\n","    <tr>\n","      <th>Trigo</th>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Yuca</th>\n","      <td>461</td>\n","    </tr>\n","    <tr>\n","      <th>Zanahoria</th>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                Region\n","Crop                  \n","Ayote              331\n","Berenjena           25\n","Calabaza             2\n","Calala             100\n","Camote              28\n","Caña                 1\n","Caña de azucar       1\n","Cebolla            284\n","Chile               34\n","Chile jalapeño       1\n","Chiltoma          1320\n","Frijol alacin        1\n","Frijol de vara     662\n","Frijol rojo          5\n","Granadilla          13\n","Guayaba             65\n","Jamaica             18\n","Maiz               276\n","Melon              161\n","Papaya             670\n","Pepino             278\n","Pina                42\n","Pipian             343\n","Plátano            600\n","Rabano               4\n","Remolacha            4\n","Repollo              6\n","Rábano              15\n","Sandia             208\n","Sandia y melon       1\n","Tomate             775\n","Trigo                1\n","Yuca               461\n","Zanahoria            4"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"rvg0Lcg4XhhU"},"source":["# drop crops with only 1 count\n","df1 = df1.drop(df1.index[[4173, 5141, 2249, 6539, 4317, 3817, 6403, 5476, 311, 6697, 3002, 2908, 4494]])"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Jtkut-gJi8eF"},"source":["## 🔥 Modeling"]},{"cell_type":"markdown","metadata":{"id":"Z42-HgxgvhiT"},"source":["Leads: Adam & Chase"]},{"cell_type":"markdown","metadata":{"id":"foi-Fe5kzYv7"},"source":["### Pipeline for training, cross validation and test sets"]},{"cell_type":"code","metadata":{"id":"wG7_PErlMjsf"},"source":["# Drop unneeded columns\n","drop_cols = [\"Unnamed: 0\", \"Date visited\", \"Auditor\", \"Family visited\", \"Present?\",\n","             \"apienter\", \"date_time\", \"Community\", \"Month visited\", \"Year visited\",\n","             \"moonrise\", \"moonset\", \"sunrise\", \"sunset\"]\n","df = df.drop(drop_cols, axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FxjlUhWgQkU8"},"source":["# One hot encoding\n","\n","# Questions for Elda:\n","# Multiple spellings of same crop name\n","# Should we drop \"Plague\"? Has 162 different unique values. 1-hot encode for now. Ask team as well\n","# Should we drop organic and chemical recommendations? Has a lot of 0 values. First pass: include them (1-hot encode)\n","# Keep \"Community\" or \"location\"? 1-hot encode either? Keep location (1-hot encode), drop \"Community\"\n","# Keep condition and percent diseased? Keep these.\n","\n","df = df.join(pd.get_dummies(df[\"Season visited\"], prefix=\"Season\"), how = 'outer')\n","df = df.join(pd.get_dummies(df[\"Condition\"], prefix=\"Condition\"), how = 'outer')\n","df = df.join(pd.get_dummies(df[\"Region\"], prefix=\"Region\"), how= 'outer')\n","df = df.join(pd.get_dummies(df[\"Plague\"], prefix=\"Plague\"), how= 'outer')\n","df = df.join(pd.get_dummies(df[\"location\"], prefix=\"Location\"), how = \"outer\")\n","df = df.join(pd.get_dummies(df[\"Seedling_or_transplanted\"], prefix=\"Trans_or_seed\"), how = \"outer\")\n","df = df.join(pd.get_dummies(df[\"Organic recommendation\"], prefix=\"Org_rec\"), how = \"outer\")\n","df = df.join(pd.get_dummies(df[\"Chemical recommendation\"], prefix=\"Chem_rec\"), how = \"outer\")\n","\n","# Drop now one-hot encoded columns\n","df = df.drop([\"Season visited\", \"Condition\", \"Region\", \"Plague\", \"location\", \"Seedling_or_transplanted\", \"Organic recommendation\", \"Chemical recommendation\"], axis = 1)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"4bwzwWJWSvtA"},"source":["# Oversample using SMOTE and split into training and testing sets\n","y = df[[\"Crop\"]].copy()\n","X = df.drop([\"Crop\"], axis=1)\n","\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=True)"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GBJmfkkthdIp"},"source":["### Training the Model"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LVmYriWFrDdb","executionInfo":{"status":"ok","timestamp":1619206963596,"user_tz":420,"elapsed":26695,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"3f2032f6-a5c6-4751-e373-ccf32d15c166"},"source":["# Random Forest\n","randomforest_model = RandomForestClassifier(n_estimators=100)\n","randomforest_model.fit(X_train, y_train.values.ravel())\n","\n","y_pred = randomforest_model.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.2381305637982196"]},"metadata":{"tags":[]},"execution_count":28}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5GzOO-HYPiJC","executionInfo":{"status":"ok","timestamp":1619207043274,"user_tz":420,"elapsed":106363,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"1caa07de-61c6-429b-97a9-0cb2e19decbf"},"source":["# XGBoost\n","xgboost_model = XGBClassifier()\n","xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","y_pred = xgboost_model.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.33456973293768544"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"QvM86XUHfZJn","executionInfo":{"status":"ok","timestamp":1619207043645,"user_tz":420,"elapsed":106725,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"9baad94f-1309-4b27-8ea0-743e4b7ae938"},"source":["# K Nearest Neighbors\n","from sklearn.neighbors import KNeighborsClassifier\n","neighbors = KNeighborsClassifier(n_neighbors=5)\n","neighbors.fit(X_train, y_train.values.ravel())\n","\n","y_pred = neighbors.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.13649851632047477"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uZx3YnboST1R","executionInfo":{"status":"ok","timestamp":1619207043855,"user_tz":420,"elapsed":106927,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"5806cc57-66e2-4a9d-c2ab-21df76869eff"},"source":["# Decision Trees\n","from sklearn.tree import DecisionTreeClassifier\n","DT_clf = DecisionTreeClassifier()\n","DT_clf.fit(X_train, y_train.values.ravel())\n","\n","y_pred = DT_clf.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.19881305637982197"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jXqmOORaXzB0","executionInfo":{"status":"ok","timestamp":1619207064425,"user_tz":420,"elapsed":127488,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"56c9a48a-9496-43c0-d9c1-4d6a8de1ce70"},"source":["# Support Vector Classifier\n","from sklearn import svm\n","SVC = svm.SVC()\n","SVC.fit(X_train, y_train)\n","\n","y_pred = SVC.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/utils/validation.py:760: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["0.19658753709198812"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":480},"id":"R0cwB8mWXgVn","executionInfo":{"status":"error","timestamp":1619207111122,"user_tz":420,"elapsed":174175,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"3fee6626-dc67-4411-b505-c42e5c9d1953"},"source":["from sklearn.metrics import make_scorer\n","from sklearn.model_selection import GridSearchCV\n","# Finding the best parameters for XGBoost\n","def parameter_tune(params={'max_depth': [3, 6, 9],\n","                           'learn_rate': [0.2, 0.3, 0.45],\n","                           'sample_rate': [0.8, 0.9, 1]}):\n","    # The xgboost classifier\n","    XG_CLF = XGBClassifier()\n","\n","    # Type of scoring used to compare parameter combinations\n","    acc_scorer = make_scorer(accuracy_score)\n","\n","    # Run the grid search\n","    grid_obj = GridSearchCV(XG_CLF, params, scoring=acc_scorer)\n","    grid_obj = grid_obj.fit(X_train, y_train)\n","\n","    # Set the clf to the best combination of parameters\n","    XG_CLF = grid_obj.best_estimator_\n","\n","    # Fit the best algorithm to the data. \n","    XG_CLF.fit(X_train, y_train)\n","tune = parameter_tune({\"learning_rate\"    : [0.05, 0.10, 0.15, 0.20, 0.25, 0.30 ] ,\n","                       \"max_depth\"        : [ 3, 4, 5, 6, 8, 10, 12, 15],\n","                       \"min_child_weight\" : [ 1, 3, 5, 7 ],\n","                       \"gamma\"            : [ 0.0, 0.1, 0.2 , 0.3, 0.4 ],\n","                       \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ] })\n","tune"],"execution_count":null,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_split.py:667: UserWarning: The least populated class in y has only 1 members, which is less than n_splits=5.\n","  % (min_groups, self.n_splits)), UserWarning)\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:235: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n","/usr/local/lib/python3.7/dist-packages/sklearn/preprocessing/_label.py:268: DataConversionWarning: A column-vector y was passed when a 1d array was expected. Please change the shape of y to (n_samples, ), for example using ravel().\n","  y = column_or_1d(y, warn=True)\n"],"name":"stderr"},{"output_type":"error","ename":"KeyboardInterrupt","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)","\u001b[0;32m<ipython-input-33-ac4e5e5757fb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     24\u001b[0m                        \u001b[0;34m\"min_child_weight\"\u001b[0m \u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m7\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     25\u001b[0m                        \u001b[0;34m\"gamma\"\u001b[0m            \u001b[0;34m:\u001b[0m \u001b[0;34m[\u001b[0m \u001b[0;36m0.0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.2\u001b[0m \u001b[0;34m,\u001b[0m \u001b[0;36m0.3\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0.4\u001b[0m \u001b[0;34m]\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 26\u001b[0;31m                        \"colsample_bytree\" : [ 0.3, 0.4, 0.5 , 0.7 ] })\n\u001b[0m\u001b[1;32m     27\u001b[0m \u001b[0mtune\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m<ipython-input-33-ac4e5e5757fb>\u001b[0m in \u001b[0;36mparameter_tune\u001b[0;34m(params)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;31m# Run the grid search\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0mgrid_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGridSearchCV\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mXG_CLF\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mscoring\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0macc_scorer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m     \u001b[0mgrid_obj\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgrid_obj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m     \u001b[0;31m# Set the clf to the best combination of parameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, groups, **fit_params)\u001b[0m\n\u001b[1;32m    708\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    709\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 710\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    711\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    712\u001b[0m         \u001b[0;31m# For multi-metric evaluation, store the best_index_, best_params_ and\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36m_run_search\u001b[0;34m(self, evaluate_candidates)\u001b[0m\n\u001b[1;32m   1149\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_run_search\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1150\u001b[0m         \u001b[0;34m\"\"\"Search all candidates in param_grid\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1151\u001b[0;31m         \u001b[0mevaluate_candidates\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mParameterGrid\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparam_grid\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1152\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_search.py\u001b[0m in \u001b[0;36mevaluate_candidates\u001b[0;34m(candidate_params)\u001b[0m\n\u001b[1;32m    687\u001b[0m                                \u001b[0;32mfor\u001b[0m \u001b[0mparameters\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtest\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    688\u001b[0m                                in product(candidate_params,\n\u001b[0;32m--> 689\u001b[0;31m                                           cv.split(X, y, groups)))\n\u001b[0m\u001b[1;32m    690\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    691\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mout\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m<\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, iterable)\u001b[0m\n\u001b[1;32m   1042\u001b[0m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_iterating\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_original_iterator\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1043\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1044\u001b[0;31m             \u001b[0;32mwhile\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdispatch_one_batch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0miterator\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1045\u001b[0m                 \u001b[0;32mpass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1046\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36mdispatch_one_batch\u001b[0;34m(self, iterator)\u001b[0m\n\u001b[1;32m    857\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    858\u001b[0m             \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 859\u001b[0;31m                 \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_dispatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtasks\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    860\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    861\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m_dispatch\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    775\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_lock\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    776\u001b[0m             \u001b[0mjob_idx\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 777\u001b[0;31m             \u001b[0mjob\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbatch\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcb\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    778\u001b[0m             \u001b[0;31m# A job can complete so quickly than its callback is\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    779\u001b[0m             \u001b[0;31m# called before we get here, causing self._jobs to\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36mapply_async\u001b[0;34m(self, func, callback)\u001b[0m\n\u001b[1;32m    206\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mapply_async\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfunc\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    207\u001b[0m         \u001b[0;34m\"\"\"Schedule a func to be run\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 208\u001b[0;31m         \u001b[0mresult\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImmediateResult\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfunc\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    209\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mcallback\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    210\u001b[0m             \u001b[0mcallback\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/_parallel_backends.py\u001b[0m in \u001b[0;36m__init__\u001b[0;34m(self, batch)\u001b[0m\n\u001b[1;32m    570\u001b[0m         \u001b[0;31m# Don't delay the application, to avoid keeping the input\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    571\u001b[0m         \u001b[0;31m# arguments in memory\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 572\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mresults\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbatch\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    573\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    574\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mget\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/joblib/parallel.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    261\u001b[0m         \u001b[0;32mwith\u001b[0m \u001b[0mparallel_backend\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_backend\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mn_jobs\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_n_jobs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    262\u001b[0m             return [func(*args, **kwargs)\n\u001b[0;32m--> 263\u001b[0;31m                     for func, args, kwargs in self.items]\n\u001b[0m\u001b[1;32m    264\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    265\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__reduce__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/model_selection/_validation.py\u001b[0m in \u001b[0;36m_fit_and_score\u001b[0;34m(estimator, X, y, scorer, train, test, verbose, parameters, fit_params, return_train_score, return_parameters, return_n_test_samples, return_times, return_estimator, error_score)\u001b[0m\n\u001b[1;32m    513\u001b[0m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    514\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 515\u001b[0;31m             \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mfit_params\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    516\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    517\u001b[0m     \u001b[0;32mexcept\u001b[0m \u001b[0mException\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/sklearn.py\u001b[0m in \u001b[0;36mfit\u001b[0;34m(self, X, y, sample_weight, eval_set, eval_metric, early_stopping_rounds, verbose, xgb_model, sample_weight_eval_set, callbacks)\u001b[0m\n\u001b[1;32m    730\u001b[0m                               \u001b[0mevals_result\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mevals_result\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    731\u001b[0m                               \u001b[0mverbose_eval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mverbose\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mxgb_model\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mxgb_model\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 732\u001b[0;31m                               callbacks=callbacks)\n\u001b[0m\u001b[1;32m    733\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    734\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobjective\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mxgb_options\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"objective\"\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36mtrain\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, maximize, early_stopping_rounds, evals_result, verbose_eval, xgb_model, callbacks, learning_rates)\u001b[0m\n\u001b[1;32m    214\u001b[0m                            \u001b[0mevals\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mevals\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    215\u001b[0m                            \u001b[0mobj\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mfeval\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mfeval\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 216\u001b[0;31m                            xgb_model=xgb_model, callbacks=callbacks)\n\u001b[0m\u001b[1;32m    217\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    218\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/training.py\u001b[0m in \u001b[0;36m_train_internal\u001b[0;34m(params, dtrain, num_boost_round, evals, obj, feval, xgb_model, callbacks)\u001b[0m\n\u001b[1;32m     72\u001b[0m         \u001b[0;31m# Skip the first update if it is a recovery step.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     73\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mversion\u001b[0m \u001b[0;34m%\u001b[0m \u001b[0;36m2\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 74\u001b[0;31m             \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mi\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobj\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     75\u001b[0m             \u001b[0mbst\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msave_rabit_checkpoint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     76\u001b[0m             \u001b[0mversion\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/xgboost/core.py\u001b[0m in \u001b[0;36mupdate\u001b[0;34m(self, dtrain, iteration, fobj)\u001b[0m\n\u001b[1;32m   1107\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mfobj\u001b[0m \u001b[0;32mis\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1108\u001b[0m             _check_call(_LIB.XGBoosterUpdateOneIter(self.handle, ctypes.c_int(iteration),\n\u001b[0;32m-> 1109\u001b[0;31m                                                     dtrain.handle))\n\u001b[0m\u001b[1;32m   1110\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1111\u001b[0m             \u001b[0mpred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpredict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdtrain\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyboardInterrupt\u001b[0m: "]}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"bmVh_f-BwSYC","executionInfo":{"status":"ok","timestamp":1619207203251,"user_tz":420,"elapsed":87908,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"ff0d2cb4-f366-4d3a-bf9a-d784bc496489"},"source":["# XGBoost with parameter tuning\n","xgboost_model = XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,\n","                    colsample_bynode=1, colsample_bytree=1, gamma=0, learn_rate=0.2,\n","                    learning_rate=0.1, max_delta_step=0, max_depth=3,\n","                    min_child_weight=1, missing=None, n_estimators=100, n_jobs=1,\n","                    nthread=None, objective='multi:softprob', random_state=0,\n","                    reg_alpha=0, reg_lambda=1, sample_rate=1, scale_pos_weight=1,\n","                    seed=None, silent=None, subsample=0.8, verbosity=1)\n","xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","y_pred = xgboost_model.predict(X_test)\n","accuracy_score(y_test, y_pred)"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.3323442136498516"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UTso6RaOxXxZ","executionInfo":{"status":"ok","timestamp":1619209090567,"user_tz":420,"elapsed":528132,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"829b7a53-7488-4037-bf50-ec1e8863e2a8"},"source":["# My own ad hoc parameter tuning\n","max_depths = [3, 4, 5, 6, 7]\n","results = {}\n","for depth in max_depths:\n","  xgboost_model = XGBClassifier(max_depth=depth)\n","  xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","  y_pred = xgboost_model.predict(X_test)\n","  results['max_depth = ' + str(depth)] = accuracy_score(y_test, y_pred)\n","results"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'max_depth = 3': 0.33456973293768544,\n"," 'max_depth = 4': 0.3293768545994065,\n"," 'max_depth = 5': 0.31750741839762614,\n"," 'max_depth = 6': 0.3086053412462908,\n"," 'max_depth = 7': 0.293026706231454}"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lWvmMx0nY5Tr","executionInfo":{"status":"ok","timestamp":1619210552110,"user_tz":420,"elapsed":508744,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"df2a2ba1-fa95-475f-c955-e43aee1d6a24"},"source":["# Continuing the ad hoc tuning by checking different learn_rates\n","learn_rates = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7]\n","learn_rate_results = {}\n","for rate in learn_rates:\n","  xgboost_model = XGBClassifier(max_depth=3, learning_rate=rate)\n","  xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","  y_pred = xgboost_model.predict(X_test)\n","  learn_rate_results['learn rate = ' + str(rate)] = accuracy_score(y_test, y_pred)\n","  print('Finished rate ' + str(rate))\n","learn_rate_results"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Finished rate 0.1\n","Finished rate 0.2\n","Finished rate 0.3\n","Finished rate 0.4\n","Finished rate 0.5\n","Finished rate 0.6\n","Finished rate 0.7\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'learn rate = 0.1': 0.33456973293768544,\n"," 'learn rate = 0.2': 0.33086053412462907,\n"," 'learn rate = 0.3': 0.3108308605341246,\n"," 'learn rate = 0.4': 0.3093471810089021,\n"," 'learn rate = 0.5': 0.3056379821958457,\n"," 'learn rate = 0.6': 0.2900593471810089,\n"," 'learn rate = 0.7': 0.2841246290801187}"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zvzWF1EcgLR2","executionInfo":{"status":"ok","timestamp":1619211410847,"user_tz":420,"elapsed":226059,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"d4f961f5-9dc3-4dd7-df6d-9807f849d340"},"source":["# I found it interesting that 0.1 did the best in the previous cell so\n","# I decided to test 0.05 and 0.15 as well\n","learn_rates = [0.05, 0.1, 0.15]\n","learn_rate_results = {}\n","for rate in learn_rates:\n","  xgboost_model = XGBClassifier(max_depth=3, learning_rate=rate)\n","  xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","  y_pred = xgboost_model.predict(X_test)\n","  learn_rate_results['learn rate = ' + str(rate)] = accuracy_score(y_test, y_pred)\n","  print('Finished rate ' + str(rate))\n","learn_rate_results"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Finished rate 0.05\n","Finished rate 0.1\n","Finished rate 0.15\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'learn rate = 0.05': 0.3405044510385757,\n"," 'learn rate = 0.1': 0.33456973293768544,\n"," 'learn rate = 0.15': 0.327893175074184}"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"p40qAOd0hZWp","executionInfo":{"status":"ok","timestamp":1619211815173,"user_tz":420,"elapsed":352804,"user":{"displayName":"Chase Clements","photoUrl":"","userId":"15990477385226697741"}},"outputId":"a4f7adc9-45a8-41df-ef52-f96843d0750b"},"source":["# Even more precise\n","learn_rates = [0.07, 0.08, 0.09, 0.1]\n","learn_rate_results = {}\n","for rate in learn_rates:\n","  xgboost_model = XGBClassifier(max_depth=3, learning_rate=rate)\n","  xgboost_model.fit(X_train, y_train.values.ravel())\n","\n","  y_pred = xgboost_model.predict(X_test)\n","  learn_rate_results['learn rate = ' + str(rate)] = accuracy_score(y_test, y_pred)\n","  print('Finished rate ' + str(rate))\n","learn_rate_results"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Finished rate 0.07\n","Finished rate 0.08\n","Finished rate 0.09\n","Finished rate 0.1\n","Finished rate 1.1\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/plain":["{'learn rate = 0.07': 0.3367952522255193,\n"," 'learn rate = 0.08': 0.33902077151335314,\n"," 'learn rate = 0.09': 0.33827893175074186,\n"," 'learn rate = 0.1': 0.33456973293768544,\n"," 'learn rate = 1.1': 0.20474777448071216}"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"4xgRD0Z6kRz4"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"H28VT5yEsqKm"},"source":["### Evaluation"]},{"cell_type":"code","metadata":{"id":"F3iXbNMLRAIA"},"source":["#roc curves, confusion matrixes using cross validation and training sets"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"KE3PlV79U2m8"},"source":["## ➡️ Test set predictions"]},{"cell_type":"code","metadata":{"id":"uFRH429GAshT"},"source":["#ONLY TIME WE USE THE TEST SET"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"B1TbSETY6zvx"},"source":["df[\"Crops\"].value_counts()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"UpHnFJ2T98Iw"},"source":[""],"execution_count":null,"outputs":[]}]}